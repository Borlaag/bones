;;; GENERATED BY BONES 8
%define FEATURE_SRFI_6
%define FEATURE_FILE_PORTS
%define FEATURE_FILE_SYSTEM
%define FEATURE_PROCESS_ENVIRONMENT
%define FEATURE_TIME
%define FEATURE_JIFFY_CLOCK
%define FEATURE_LP64
%define FEATURE_IEEE754
%define FEATURE_BSD
%define FEATURE_X86_64
%define FEATURE_LITTLE_ENDIAN
%define FEATURE_DEFAULT_LINUX
%define FEATURE_BONES
%define FEATURE_SRFI_0
%define FEATURE_SRFI_7
%define FEATURE_SRFI_16
%define FEATURE_SRFI_46
%include "x86_64/boneslib.s"
 section .text
toplevel:
f_1388:
; ((k1 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25list], rax ; (set! %list ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2
 mov rax, ALLOC
 add ALLOC, 16
 mov [___void], rax ; (set! void ...)
 mov rax, L1 ; numerically_equal
 mov [____25_3d], rax ; (set! %= ...)
 mov rax, L2 ; numerically_greater
 mov [____25_3e], rax ; (set! %> ...)
 mov rax, L3 ; numerically_less
 mov [____25_3c], rax ; (set! %< ...)
 mov rax, L4 ; numerically_greater_or_equal
 mov [____3e_3d], rax ; (set! >= ...)
 mov rax, L5 ; numerically_less_or_equal
 mov [____3c_3d], rax ; (set! <= ...)
 mov rax, L6 ; multiply_numbers
 mov [____25_2a], rax ; (set! %* ...)
 mov rax, L7 ; add_numbers
 mov [____25_2b], rax ; (set! %+ ...)
 mov rax, L8 ; subtract_numbers
 mov [____25_2d], rax ; (set! %- ...)
 mov rax, L9 ; divide_numbers
 mov [____25_2f], rax ; (set! %/ ...)
 mov rax, L10 ; maximize_numbers
 mov [___max], rax ; (set! max ...)
 mov rax, L11 ; minimize_numbers
 mov rax, L12 ; alloc_block
 mov [____25allocate_2dblock], rax ; (set! %allocate-block ...)
 mov rax, undefined ; dropped: modulo
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _n_44^16 = rdx
 mov rdx, rax
 mov rax, rdx
 fldpi
  fstp qword [rax + CELLS(1)]
; _pi_44^15 = rdx
 mov rdx, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3995
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [____25_2f] ; %/
 mov rsi, 5 ; '2
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3995:
; ((t4832 . rcx))
; _pi/2_45^17 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_4
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t4830 = rsi
 mov rsi, rax
 mov rax, undefined ; dropped: atan
 mov rax, undefined ; dropped: gcd
 mov rax, undefined ; dropped: lcm
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _gcd1_47^29 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lcm1_48^30 = r8
 mov r8, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_5
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_7
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; dropped: gcd
 mov rax, undefined ; dropped: lcm
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_12
 mov rax, ALLOC
 add ALLOC, 16
 mov [___list_3f], rax ; (set! list? ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_14
 mov rax, ALLOC
 add ALLOC, 16
 mov [___list_2dtail], rax ; (set! list-tail ...)
 mov rax, [___list_2dtail] ; list-tail
; _list-tail_45^105 = r9
 mov r9, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_16
 mov [ALLOC + 16], r9
 mov rax, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_17
 mov rax, ALLOC
 add ALLOC, 16
 mov [___reverse], rax ; (set! reverse ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_19
 mov rax, ALLOC
 add ALLOC, 16
 mov [___append], rax ; (set! append ...)
 mov rax, L13 ; apply
 mov [____25apply], rax ; (set! %apply ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_22
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25file_2derror], rax ; (set! %file-error ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_23
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25make_2dfile_2dinput_2dport], rax ; (set! %make-file-input-port ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_26
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25make_2dfile_2doutput_2dport], rax ; (set! %make-file-output-port ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3971
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25make_2dfile_2dinput_2dport] ; %make-file-input-port
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3971:
; ((t4758 . rcx))
 mov rax, rcx
 mov [____25standard_2dinput_2dport], rax ; (set! %standard-input-port ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3970
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25make_2dfile_2doutput_2dport] ; %make-file-output-port
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3970:
; ((t4756 . rcx))
 mov rax, rcx
 mov [____25standard_2doutput_2dport], rax ; (set! %standard-output-port ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3969
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25make_2dfile_2doutput_2dport] ; %make-file-output-port
 mov rdx, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3969:
; ((t4754 . rcx))
 mov rax, rcx
 mov [____25standard_2derror_2dport], rax ; (set! %standard-error-port ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_29
 mov rax, ALLOC
 add ALLOC, 16
 mov [___open_2dinput_2dfile], rax ; (set! open-input-file ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_30
 mov rax, ALLOC
 add ALLOC, 16
 mov [___open_2doutput_2dfile], rax ; (set! open-output-file ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_31
 mov rax, ALLOC
 add ALLOC, 16
 mov [___string_2dappend], rax ; (set! string-append ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_34
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25string_2d_3enumber], rax ; (set! %string->number ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_35
 mov rax, ALLOC
 add ALLOC, 16
 mov [___number_2d_3estring], rax ; (set! number->string ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_36
 mov rax, ALLOC
 add ALLOC, 16
 mov [___list_2d_3evector], rax ; (set! list->vector ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_38
 mov rax, ALLOC
 add ALLOC, 16
 mov [___vector_2d_3elist], rax ; (set! vector->list ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_40
 mov rax, ALLOC
 add ALLOC, 16
 mov [___list_2d_3estring], rax ; (set! list->string ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_42
 mov rax, ALLOC
 add ALLOC, 16
 mov [___string_2d_3elist], rax ; (set! string->list ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_44
 mov rax, ALLOC
 add ALLOC, 16
 mov [___vector], rax ; (set! vector ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_45
 mov rax, ALLOC
 add ALLOC, 16
 mov [___string], rax ; (set! string ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3958
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rax, FIX(CELL_SHIFT)
; _y_45^306 = rdx
 mov rdx, rax
 mov rax, 513 ; '256
 mov r11, rdx
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
 mov rsi, rax
 mov rdx, 7 ; '3
 mov rdi, FALSE
 mov r8, 513 ; '256
 SET_T r9
 mov r10, null ; 
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3958:
; ((t4713 . rcx))
 mov rax, rcx
 mov [____25symbol_2dtable], rax ; (set! %symbol-table ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_46
 mov rax, ALLOC
 add ALLOC, 16
 mov [___string_2d_3esymbol], rax ; (set! string->symbol ...)
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_45^335 = rdx
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_48
 mov [ALLOC + 16], rdx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t4699 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1433
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, rsi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_48
f_1433:
; ()
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_49
 mov rax, ALLOC
 add ALLOC, 16
 mov [___for_2deach], rax ; (set! for-each ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_54
 mov rax, ALLOC
 add ALLOC, 16
 mov [___map], rax ; (set! map ...)
 mov rax, L14 ; values
 mov [___values], rax ; (set! values ...)
 mov rax, L15 ; call_with_values
 mov [___call_2dwith_2dvalues], rax ; (set! call-with-values ...)
 mov rax, L16 ; call_cc
 mov [____25call_2fcc], rax ; (set! %call/cc ...)
 mov rax, null ; 
 mov [____25dynamic_2dwinds], rax ; (set! %dynamic-winds ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_59
 mov rax, ALLOC
 add ALLOC, 16
 mov [___dynamic_2dwind], rax ; (set! dynamic-wind ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_61
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25dynamic_2dunwind], rax ; (set! %dynamic-unwind ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_62
 mov rax, ALLOC
 add ALLOC, 16
 mov [___call_2dwith_2dcurrent_2dcontinuation], rax ; (set! call-with-current-continuation ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_65
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25output_2dto_2dport], rax ; (set! %output-to-port ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_73
 mov rax, ALLOC
 add ALLOC, 16
 mov [___emergency_2dexit], rax ; (set! emergency-exit ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_74
 mov rax, ALLOC
 add ALLOC, 16
 mov [___exit], rax ; (set! exit ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_76
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25current_2dexception_2dhandler], rax ; (set! %current-exception-handler ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_78
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25error], rax ; (set! %error ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_79
 mov rax, ALLOC
 add ALLOC, 16
 mov [____25interrupt_2dhook], rax ; (set! %interrupt-hook ...)
 SET_T rax
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _cs_46^691 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_81
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [___case_2dsensitive], rax ; (set! case-sensitive ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_82
 mov rax, ALLOC
 add ALLOC, 16
 mov [___read], rax ; (set! read ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_102
 mov rax, ALLOC
 add ALLOC, 16
 mov [___call_2dwith_2doutput_2dfile], rax ; (set! call-with-output-file ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_105
 mov rax, ALLOC
 add ALLOC, 16
 mov [___call_2dwith_2dinput_2dfile], rax ; (set! call-with-input-file ...)
 mov rax, undefined ; dropped: with-input-from-file
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_112
 mov rax, ALLOC
 add ALLOC, 16
 mov [___with_2doutput_2dto_2dfile], rax ; (set! with-output-to-file ...)
 mov rax, undefined ; dropped: %make-promise
 mov rax, undefined ; dropped: open-input-string
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_122
 mov rax, ALLOC
 add ALLOC, 16
 mov [___open_2doutput_2dstring], rax ; (set! open-output-string ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_125
 mov rax, ALLOC
 add ALLOC, 16
 mov [___get_2doutput_2dstring], rax ; (set! get-output-string ...)
 mov rax, [argc]
  INT2FIX rax
; _argc_47^1316 = rcx
 mov rcx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^1318 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_126
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t4273 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3745
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, rsi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_126
f_3745:
; ((t4271 . rcx))
; _lst_48^1317 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_127
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
; t4269 = rsi
 mov rsi, rax
 mov rax, rsi
 mov [___command_2dline], rax ; (set! command-line ...)
 mov rax, undefined ; dropped: read-string
 mov rax, undefined ; dropped: current-directory
 mov rax, L17 ; reclaim_garbage
 mov rax, undefined ; dropped: open-append-output-file
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_131
 mov rax, ALLOC
 add ALLOC, 16
 mov [___print], rax ; (set! print ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_133
 mov rax, ALLOC
 add ALLOC, 16
 mov [___make_2dparameter], rax ; (set! make-parameter ...)
 mov rax, undefined ; dropped: %record-type-id-counter
 mov rax, undefined ; dropped: make-disjoint-type
 mov rax, undefined ; dropped: bytevector
 mov rax, undefined ; dropped: with-input-from-string
 mov rax, undefined ; dropped: with-output-to-string
 mov rax, 17 ; '8
 mov [___bones_2dversion], rax ; (set! bones-version ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_152
 mov rax, ALLOC
 add ALLOC, 16
 mov [___id], rax ; (set! id ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_153
 mov rax, ALLOC
 add ALLOC, 16
 mov [___read_2dforms], rax ; (set! read-forms ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_157
 mov rax, ALLOC
 add ALLOC, 16
 mov [___emit], rax ; (set! emit ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_159
 mov rax, ALLOC
 add ALLOC, 16
 mov [___stringify], rax ; (set! stringify ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_160
 mov rax, ALLOC
 add ALLOC, 16
 mov [___symbolify], rax ; (set! symbolify ...)
 mov rax, undefined ; dropped: listify
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_162
 mov rax, ALLOC
 add ALLOC, 16
 mov [___join], rax ; (set! join ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_164
 mov rax, ALLOC
 add ALLOC, 16
 mov [___every], rax ; (set! every ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_166
 mov rax, ALLOC
 add ALLOC, 16
 mov [___any], rax ; (set! any ...)
 mov rax, undefined ; dropped: const
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_170
 mov rax, ALLOC
 add ALLOC, 16
 mov [___compl], rax ; (set! compl ...)
 mov rax, undefined ; dropped: o
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_175
 mov rax, ALLOC
 add ALLOC, 16
 mov [___foldl], rax ; (set! foldl ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_177
 mov rax, ALLOC
 add ALLOC, 16
 mov [___foldr], rax ; (set! foldr ...)
 mov rax, undefined ; dropped: flip
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_181
 mov rax, ALLOC
 add ALLOC, 16
 mov [___equal_3d_3f], rax ; (set! equal=? ...)
 mov rax, undefined ; dropped: alist-cons
 mov rax, undefined ; dropped: make-list
 mov rax, undefined ; dropped: symbol<?
 mov rax, undefined ; dropped: symbol-append
 mov rax, undefined ; dropped: car+cdr
 mov rax, undefined ; dropped: tail?
 mov rax, undefined ; dropped: sublist?
 mov rax, undefined ; dropped: butlast
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_197
 mov rax, ALLOC
 add ALLOC, 16
 mov [___last], rax ; (set! last ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_199
 mov rax, ALLOC
 add ALLOC, 16
 mov [___last_2dpair], rax ; (set! last-pair ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_201
 mov rax, ALLOC
 add ALLOC, 16
 mov [___filter], rax ; (set! filter ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_203
 mov rax, ALLOC
 add ALLOC, 16
 mov [___filter_2dmap], rax ; (set! filter-map ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_205
 mov rax, ALLOC
 add ALLOC, 16
 mov [___append_2dmap], rax ; (set! append-map ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_207
 mov rax, ALLOC
 add ALLOC, 16
 mov [___find], rax ; (set! find ...)
 mov rax, undefined ; dropped: find-tail
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_211
 mov rax, ALLOC
 add ALLOC, 16
 mov [___position], rax ; (set! position ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_213
 mov rax, ALLOC
 add ALLOC, 16
 mov [___posq], rax ; (set! posq ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_215
 mov rax, ALLOC
 add ALLOC, 16
 mov [___append_21], rax ; (set! append! ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_218
 mov rax, ALLOC
 add ALLOC, 16
 mov [___adjoin], rax ; (set! adjoin ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_220
 mov rax, ALLOC
 add ALLOC, 16
 mov [___difference], rax ; (set! difference ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_223
 mov rax, ALLOC
 add ALLOC, 16
 mov [___union], rax ; (set! union ...)
 mov rax, undefined ; dropped: intersection
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_230
 mov rax, ALLOC
 add ALLOC, 16
 mov [___delete], rax ; (set! delete ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_232
 mov rax, ALLOC
 add ALLOC, 16
 mov [___delete_2dduplicates], rax ; (set! delete-duplicates ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_234
 mov rax, ALLOC
 add ALLOC, 16
 mov [___iota], rax ; (set! iota ...)
 mov rax, undefined ; dropped: print*
 mov rax, undefined ; dropped: show
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_238
 mov rax, ALLOC
 add ALLOC, 16
 mov [___concatenate], rax ; (set! concatenate ...)
 mov rax, undefined ; dropped: interleave
 mov rax, undefined ; dropped: split-at
 mov rax, undefined ; dropped: partition
 mov rax, undefined ; dropped: span
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_247
 mov rax, ALLOC
 add ALLOC, 16
 mov [___take], rax ; (set! take ...)
 mov rax, undefined ; dropped: drop
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_251
 mov rax, ALLOC
 add ALLOC, 16
 mov [___cons_2a], rax ; (set! cons* ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_253
 mov rax, ALLOC
 add ALLOC, 16
 mov [___option], rax ; (set! option ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_254
 mov rax, ALLOC
 add ALLOC, 16
 mov [___collect_2doptions], rax ; (set! collect-options ...)
 mov rax, undefined ; dropped: flatten
 mov rax, undefined ; dropped: chomp
 mov rax, undefined ; dropped: read-line
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_260
 mov rax, ALLOC
 add ALLOC, 16
 mov [___read_2dfile], rax ; (set! read-file ...)
 mov rax, undefined ; dropped: write-line
 mov rax, undefined ; dropped: read-all
 mov rax, undefined ; dropped: dribble
 mov rax, undefined ; dropped: sleep
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_274
 mov rax, ALLOC
 add ALLOC, 16
 mov [___sub1], rax ; (set! sub1 ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_275
 mov rax, ALLOC
 add ALLOC, 16
 mov [___add1], rax ; (set! add1 ...)
 mov rax, undefined ; dropped: numberize
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_277
 mov rax, ALLOC
 add ALLOC, 16
 mov [___string_2dsplit], rax ; (set! string-split ...)
 mov rax, undefined ; dropped: delete-file*
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_282
 mov rax, ALLOC
 add ALLOC, 16
 mov [___scan], rax ; (set! scan ...)
 mov rax, undefined ; dropped: eql
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_286
 mov rax, ALLOC
 add ALLOC, 16
 mov [___padl], rax ; (set! padl ...)
 mov rax, undefined ; dropped: padr
 mov rax, undefined ; dropped: pad
 mov rax, undefined ; dropped: trim
 mov rax, undefined ; dropped: absolute-pathname?
 mov rax, undefined ; dropped: directory?
 mov rax, undefined ; dropped: basename
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_295
 mov rax, ALLOC
 add ALLOC, 16
 mov [___dirname], rax ; (set! dirname ...)
 mov rax, undefined ; dropped: strip-suffix
 mov rax, undefined ; dropped: replace-suffix
 mov rax, undefined ; dropped: with-input-from-port
 mov rax, undefined ; dropped: with-output-to-port
 mov rax, undefined ; dropped: call-with-input-string
 mov rax, undefined ; dropped: call-with-output-string
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _counter_47^2322 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_316
 mov [ALLOC + 16], rdi
 mov rax, ALLOC
 add ALLOC, 24
 mov rax, undefined ; dropped: atom?
 mov rax, undefined ; dropped: vector-resize
 mov rax, undefined ; dropped: vector-copy!
 mov rax, undefined ; dropped: copy-list
 mov rax, L18 ; 
; _str_47^2392 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL copy_to_buffer
  LIBCALL1 getenv, buffer
  test rax, rax
  if z
  mov rax, FALSE
  else
  CALL alloc_zstring
  endif
 mov rax, undefined ; dropped: ep
 mov rax, undefined ; dropped: qs
 mov rax, undefined ; dropped: *temporary-files*
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3501
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___make_2dparameter] ; make-parameter
 mov rax, L19 ; 
; _str_47^2424 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL copy_to_buffer
  LIBCALL1 getenv, buffer
  test rax, rax
  if z
  mov rax, FALSE
  else
  CALL alloc_zstring
  endif
; _x_47^2423 = rdi
 mov rdi, rax
 mov rdx, rdi
 cmp rdx, FALSE
 je L20
 mov rdx, rdi
 jmp L21
L20:
 mov rax, L22 ; 
; _str_47^2426 = r8
 mov r8, rax
 mov rax, r8
 CALL copy_to_buffer
  LIBCALL1 getenv, buffer
  test rax, rax
  if z
  mov rax, FALSE
  else
  CALL alloc_zstring
  endif
; _x_48^2425 = r8
 mov r8, rax
 mov rdx, r8
 cmp rdx, FALSE
 je L23
 mov rdx, r8
 jmp L24
L23:
 mov rax, L25 ; 
; _str_47^2428 = r9
 mov r9, rax
 mov rax, r9
 CALL copy_to_buffer
  LIBCALL1 getenv, buffer
  test rax, rax
  if z
  mov rax, FALSE
  else
  CALL alloc_zstring
  endif
; _x_49^2427 = r9
 mov r9, rax
 mov rax, r9
 mov r11, r9
 mov r15, L26 ; 
 mov rdx, r11
 cmp rax, FALSE
 cmove rdx, r15
L24:
L21:
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3501:
; ((t3737 . rcx))
 mov rax, undefined ; dropped: temporary-directory
 mov rax, undefined ; dropped: with-temporary-files
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _count_47^2443 = rdx
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_332
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov rax, undefined ; dropped: temporary-file
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3490
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___make_2dparameter] ; make-parameter
 mov rdx, FALSE
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3490:
; ((t3711 . rcx))
 mov rax, undefined ; dropped: run-verbose
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3489
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___make_2dparameter] ; make-parameter
 mov rdx, FALSE
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3489:
; ((t3709 . rcx))
 mov rax, undefined ; dropped: run-dry-run
 mov rax, undefined ; dropped: execute
 mov rax, undefined ; dropped: check-status
 mov rax, undefined ; dropped: system-software
 mov [ALLOC + 8], FALSE
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _s_47^2509 = rdx
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_344
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov rax, undefined ; dropped: file-executable?
 mov rax, undefined ; dropped: file-size
 mov rax, undefined ; dropped: file-modification-time
 mov rax, undefined ; dropped: limited
 mov rax, 159 ; '79
 mov [____2apretty_2dprint_2dwidth_2a], rax ; (set! *pretty-print-width* ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_371
 mov rax, ALLOC
 add ALLOC, 16
 mov [___pretty_2dprint_2dhook], rax ; (set! pretty-print-hook ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_372
 mov rax, ALLOC
 add ALLOC, 16
 mov [___pretty_2dprint], rax ; (set! pretty-print ...)
 mov rax, [___pretty_2dprint] ; pretty-print
 mov [___pp], rax ; (set! pp ...)
 mov rax, [____25error] ; %error
 mov [___expand_2derror_2dhook], rax ; (set! expand-error-hook ...)
 mov rax, FALSE
 mov [___expand_2dsyntax], rax ; (set! expand-syntax ...)
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-error_47^2985 = rdx
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _sid?_48^2986 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _renamed-sid?_49^2987 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _svector?_50^2988 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _svector->list_51^2989 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _list->svector_52^2990 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-sid_53^2991 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _sid-name_54^2992 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _sid-id_55^2993 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _sid-location_56^2994 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _list1?_57^2995 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _list2?_58^2996 = local #4
 mov [locals + 32], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _map-vecs_59^2997 = local #5
 mov [locals + 40], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _wrap-vec_60^2998 = local #6
 mov [locals + 48], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _wrap-vecs_61^2999 = local #7
 mov [locals + 56], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _unwrap-vec_62^3000 = local #8
 mov [locals + 64], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _unwrap-vecs_63^3001 = local #9
 mov [locals + 72], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-code_64^3002 = local #10
 mov [locals + 80], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-builtin_65^3003 = local #11
 mov [locals + 88], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-transformer_66^3004 = local #12
 mov [locals + 96], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _variable?_67^3005 = local #13
 mov [locals + 104], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _code?_68^3006 = local #14
 mov [locals + 112], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _code-output_69^3007 = local #15
 mov [locals + 120], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _syntax?_70^3008 = local #16
 mov [locals + 128], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _builtin?_71^3009 = local #17
 mov [locals + 136], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _builtin-name_72^3010 = local #18
 mov [locals + 144], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _transformer?_73^3011 = local #19
 mov [locals + 152], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _transformer-synrules_74^3012 = local #20
 mov [locals + 160], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _transformer-env_75^3013 = local #21
 mov [locals + 168], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _acons_76^3014 = local #22
 mov [locals + 176], rax
 mov rax, undefined ; 
; _empty-env_77^3015 = local #23
 mov [locals + 184], rax
 mov rax, undefined ; 
; _empty-store_78^3016 = local #24
 mov [locals + 192], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lookup-sid_79^3017 = local #25
 mov [locals + 200], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lookup-location_80^3018 = local #26
 mov [locals + 208], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lookup2_81^3019 = local #27
 mov [locals + 216], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _extend-env_82^3020 = local #28
 mov [locals + 224], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _extend-store_83^3021 = local #29
 mov [locals + 232], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _substitute-in-store_84^3022 = local #30
 mov [locals + 240], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _symloc->var_85^3023 = local #31
 mov [locals + 248], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _intloc->var_86^3024 = local #32
 mov [locals + 256], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loc->var_87^3025 = local #33
 mov [locals + 264], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-begin_88^3026 = local #34
 mov [locals + 272], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-lambda_89^3027 = local #35
 mov [locals + 280], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _check-syntax-bindings_90^3028 = local #36
 mov [locals + 288], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-syntax-bindings_91^3029 = local #37
 mov [locals + 296], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-any_92^3030 = local #38
 mov [locals + 304], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-val_93^3031 = local #39
 mov [locals + 312], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-expr_94^3032 = local #40
 mov [locals + 320], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-body_95^3033 = local #41
 mov [locals + 328], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-top-level-forms_96^3034 = local #42
 mov [locals + 336], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _compile-syntax-rules_97^3035 = local #43
 mov [locals + 344], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _apply-transformer_98^3036 = local #44
 mov [locals + 352], rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_417
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_418
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_419
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_420
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_421
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_422
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_423
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_424
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 0] ; _sid-name_54^2992
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_425
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_426
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 16] ; _sid-location_56^2994
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_427
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 24] ; _list1?_57^2995
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_428
 mov rax, [locals + 24] ; _list1?_57^2995
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 32] ; _list2?_58^2996
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_429
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 40] ; _map-vecs_59^2997
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_432
 mov [ALLOC + 16], r10
 mov rax, [locals + 56] ; _wrap-vecs_61^2999
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 48] ; _wrap-vec_60^2998
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_433
 mov rax, [locals + 40] ; _map-vecs_59^2997
 mov [ALLOC + 16], rax
 mov rax, [locals + 48] ; _wrap-vec_60^2998
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 56] ; _wrap-vecs_61^2999
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_434
 mov rax, [locals + 72] ; _unwrap-vecs_63^3001
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 64] ; _unwrap-vec_62^3000
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_435
 mov rax, [locals + 40] ; _map-vecs_59^2997
 mov [ALLOC + 16], rax
 mov rax, [locals + 64] ; _unwrap-vec_62^3000
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 72] ; _unwrap-vecs_63^3001
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_436
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 80] ; _make-code_64^3002
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_437
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 88] ; _make-builtin_65^3003
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_438
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 96] ; _make-transformer_66^3004
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_439
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 104] ; _variable?_67^3005
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_440
 mov rax, [locals + 24] ; _list1?_57^2995
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 112] ; _code?_68^3006
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_441
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 120] ; _code-output_69^3007
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_442
 mov rax, [locals + 32] ; _list2?_58^2996
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 128] ; _syntax?_70^3008
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_443
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 136] ; _builtin?_71^3009
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_444
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 144] ; _builtin-name_72^3010
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_445
 mov rax, [locals + 136] ; _builtin?_71^3009
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 152] ; _transformer?_73^3011
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_446
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 160] ; _transformer-synrules_74^3012
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_447
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 168] ; _transformer-env_75^3013
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_448
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 176] ; _acons_76^3014
 mov [rax + 8], r11
 mov rax, r11
 mov rax, null ; 
 mov [locals + 184], rax ; (set! _empty-env_77^3015 ...)
 mov rax, null ; 
 mov [locals + 192], rax ; (set! _empty-store_78^3016 ...)
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_449
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [ALLOC + 16], rax
 mov rax, [locals + 16] ; _sid-location_56^2994
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 200] ; _lookup-sid_79^3017
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_450
 mov rax, [locals + 248] ; _symloc->var_85^3023
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 208] ; _lookup-location_80^3018
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_451
 mov [ALLOC + 16], rdx
 mov rax, [locals + 208] ; _lookup-location_80^3018
 mov [ALLOC + 24], rax
 mov rax, [locals + 200] ; _lookup-sid_79^3017
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 216] ; _lookup2_81^3019
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_452
 mov rax, [locals + 176] ; _acons_76^3014
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 224] ; _extend-env_82^3020
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_453
 mov rax, [locals + 176] ; _acons_76^3014
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 232] ; _extend-store_83^3021
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_454
 mov rax, [locals + 248] ; _symloc->var_85^3023
 mov [ALLOC + 16], rax
 mov rax, [locals + 176] ; _acons_76^3014
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 240] ; _substitute-in-store_84^3022
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_456
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 248] ; _symloc->var_85^3023
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_458
 mov rax, [locals + 0] ; _sid-name_54^2992
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 256] ; _intloc->var_86^3024
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_459
 mov rax, [locals + 248] ; _symloc->var_85^3023
 mov [ALLOC + 16], rax
 mov rax, [locals + 256] ; _intloc->var_86^3024
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 264] ; _loc->var_87^3025
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_460
 mov rax, [locals + 24] ; _list1?_57^2995
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 272] ; _make-begin_88^3026
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_461
 mov rax, [locals + 256] ; _intloc->var_86^3024
 mov [ALLOC + 16], rax
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [ALLOC + 24], rax
 mov rax, [locals + 232] ; _extend-store_83^3021
 mov [ALLOC + 32], rax
 mov rax, [locals + 224] ; _extend-env_82^3020
 mov [ALLOC + 40], rax
 mov rax, [locals + 320] ; _expand-expr_94^3032
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov [ALLOC + 64], rsi
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, [locals + 280] ; _expand-lambda_89^3027
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_466
 mov [ALLOC + 16], rdx
 mov rax, [locals + 32] ; _list2?_58^2996
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 288] ; _check-syntax-bindings_90^3028
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_469
 mov rax, [locals + 200] ; _lookup-sid_79^3017
 mov [ALLOC + 16], rax
 mov rax, [locals + 232] ; _extend-store_83^3021
 mov [ALLOC + 24], rax
 mov rax, [locals + 312] ; _expand-val_93^3031
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 296] ; _expand-syntax-bindings_91^3029
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693974
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_473
 mov [ALLOC + 16], rdx
 mov rax, [locals + 320] ; _expand-expr_94^3032
 mov [ALLOC + 24], rax
 mov rax, [locals + 304] ; _expand-any_92^3030
 mov [ALLOC + 32], rax
 mov rax, [locals + 128] ; _syntax?_70^3008
 mov [ALLOC + 40], rax
 mov rax, [locals + 120] ; _code-output_69^3007
 mov [ALLOC + 48], rax
 mov rax, [locals + 112] ; _code?_68^3006
 mov [ALLOC + 56], rax
 mov rax, [locals + 352] ; _apply-transformer_98^3036
 mov [ALLOC + 64], rax
 mov rax, [locals + 144] ; _builtin-name_72^3010
 mov [ALLOC + 72], rax
 mov rax, [locals + 296] ; _expand-syntax-bindings_91^3029
 mov [ALLOC + 80], rax
 mov rax, [locals + 328] ; _expand-body_95^3033
 mov [ALLOC + 88], rax
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [ALLOC + 96], rax
 mov rax, [locals + 224] ; _extend-env_82^3020
 mov [ALLOC + 104], rax
 mov rax, [locals + 288] ; _check-syntax-bindings_90^3028
 mov [ALLOC + 112], rax
 mov rax, [locals + 272] ; _make-begin_88^3026
 mov [ALLOC + 120], rax
 mov rax, [locals + 344] ; _compile-syntax-rules_97^3035
 mov [ALLOC + 128], rax
 mov rax, [locals + 280] ; _expand-lambda_89^3027
 mov [ALLOC + 136], rax
 mov rax, [locals + 72] ; _unwrap-vecs_63^3001
 mov [ALLOC + 144], rax
 mov rax, [locals + 104] ; _variable?_67^3005
 mov [ALLOC + 152], rax
 mov rax, [locals + 216] ; _lookup2_81^3019
 mov [ALLOC + 160], rax
 mov [ALLOC + 168], rsi
 mov rax, [locals + 152] ; _transformer?_73^3011
 mov [ALLOC + 176], rax
 mov r11, ALLOC
 add ALLOC, 184
 mov rax, [locals + 304] ; _expand-any_92^3030
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_489
 mov rax, [locals + 304] ; _expand-any_92^3030
 mov [ALLOC + 16], rax
 mov rax, [locals + 80] ; _make-code_64^3002
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 312] ; _expand-val_93^3031
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_492
 mov rax, [locals + 304] ; _expand-any_92^3030
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 320] ; _expand-expr_94^3032
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_494
 mov rax, [locals + 272] ; _make-begin_88^3026
 mov [ALLOC + 16], rax
 mov rax, [locals + 320] ; _expand-expr_94^3032
 mov [ALLOC + 24], rax
 mov rax, [locals + 304] ; _expand-any_92^3030
 mov [ALLOC + 32], rax
 mov rax, [locals + 256] ; _intloc->var_86^3024
 mov [ALLOC + 40], rax
 mov rax, [locals + 232] ; _extend-store_83^3021
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [locals + 224] ; _extend-env_82^3020
 mov [ALLOC + 64], rax
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [ALLOC + 72], rax
 mov rax, [locals + 32] ; _list2?_58^2996
 mov [ALLOC + 80], rax
 mov rax, [locals + 216] ; _lookup2_81^3019
 mov [ALLOC + 88], rax
 mov rax, [locals + 296] ; _expand-syntax-bindings_91^3029
 mov [ALLOC + 96], rax
 mov r11, ALLOC
 add ALLOC, 104
 mov rax, [locals + 328] ; _expand-body_95^3033
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_511
 mov rax, [locals + 32] ; _list2?_58^2996
 mov [ALLOC + 16], rax
 mov rax, [locals + 200] ; _lookup-sid_79^3017
 mov [ALLOC + 24], rax
 mov rax, [locals + 312] ; _expand-val_93^3031
 mov [ALLOC + 32], rax
 mov rax, [locals + 240] ; _substitute-in-store_84^3022
 mov [ALLOC + 40], rax
 mov rax, [locals + 264] ; _loc->var_87^3025
 mov [ALLOC + 48], rax
 mov rax, [locals + 320] ; _expand-expr_94^3032
 mov [ALLOC + 56], rax
 mov rax, [locals + 304] ; _expand-any_92^3030
 mov [ALLOC + 64], rax
 mov rax, [locals + 56] ; _wrap-vecs_61^2999
 mov [ALLOC + 72], rax
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, [locals + 336] ; _expand-top-level-forms_96^3034
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_519
 mov [ALLOC + 16], rsi
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [ALLOC + 24], rax
 mov rax, [locals + 200] ; _lookup-sid_79^3017
 mov [ALLOC + 32], rax
 mov rax, [locals + 176] ; _acons_76^3014
 mov [ALLOC + 40], rax
 mov rax, [locals + 32] ; _list2?_58^2996
 mov [ALLOC + 48], rax
 mov rax, [locals + 96] ; _make-transformer_66^3004
 mov [ALLOC + 56], rax
 mov rax, [locals + 16] ; _sid-location_56^2994
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], r9
 mov [ALLOC + 80], r8
 mov [ALLOC + 88], rdx
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, [locals + 344] ; _compile-syntax-rules_97^3035
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_543
 mov rax, [locals + 160] ; _transformer-synrules_74^3012
 mov [ALLOC + 16], rax
 mov rax, [locals + 168] ; _transformer-env_75^3013
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [locals + 8] ; _sid-id_55^2993
 mov [ALLOC + 40], rax
 mov rax, [locals + 200] ; _lookup-sid_79^3017
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov [ALLOC + 64], rdx
 mov [ALLOC + 72], r10
 mov [ALLOC + 80], r12
 mov rax, [locals + 0] ; _sid-name_54^2992
 mov [ALLOC + 88], rax
 mov rax, [locals + 176] ; _acons_76^3014
 mov [ALLOC + 96], rax
 mov [ALLOC + 104], r9
 mov r11, ALLOC
 add ALLOC, 112
 mov rax, [locals + 352] ; _apply-transformer_98^3036
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _builtins-store_99^4129 = local #45
 mov [locals + 360], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _null-prog_100^4130 = local #46
 mov [locals + 368], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_101^4131 = local #47
 mov [locals + 376], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_571
 mov rax, [locals + 88] ; _make-builtin_65^3003
 mov [ALLOC + 16], rax
 mov rax, [locals + 376] ; _loop_101^4131
 mov [ALLOC + 24], rax
 mov rax, [locals + 232] ; _extend-store_83^3021
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 376] ; _loop_101^4131
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 376] ; _loop_101^4131
 mov rax, [rax + 8]
; t3344 = local #48
 mov [locals + 384], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3279
 mov rax, [locals + 368] ; _null-prog_100^4130
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [locals + 336] ; _expand-top-level-forms_96^3034
 mov [ALLOC + 32], rax
 mov rax, [locals + 360] ; _builtins-store_99^4129
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [locals + 384] ; t3344
 mov rdx, L27 ; 
 mov rsi, null ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_571
f_3279:
; ((t3342 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 16]
 mov r11, L28 ; 
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3274
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, 1 ; '0
 mov r8, [____25list] ; %list
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_511
f_3274:
; ((t3330 . rcx))
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4141 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _null-store_102^4139 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4146 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4145 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _null-loc-n_103^4143 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_572
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
; _null-mstore_104^4148 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3275
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_572
f_3275:
; ((t3332 . rcx))
; _%null-mstore_105^4151 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-top-level-forms!_106^4152 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_573
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_575
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [___expand_2dsyntax], rax ; (set! expand-syntax ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2943
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___void] ; void
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2943:
; ((t2660 . rcx))
 mov rax, undefined ; dropped: i:undefined
 mov rax, undefined ; dropped: uncons
 mov rax, undefined ; dropped: uncons-2
 mov rax, undefined ; dropped: uncons-3
 mov rax, undefined ; dropped: uncons-4
 mov rax, undefined ; dropped: uncons-cons
 mov rax, undefined ; dropped: unlist
 mov rax, undefined ; dropped: unvector
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_583
 mov rax, ALLOC
 add ALLOC, 16
 mov [___parse_2dlambda_2dlist], rax ; (set! parse-lambda-list ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_585
 mov rax, ALLOC
 add ALLOC, 16
 mov [___build_2dlambda_2dlist], rax ; (set! build-lambda-list ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_586
 mov rax, ALLOC
 add ALLOC, 16
 mov [___fragment], rax ; (set! fragment ...)
 mov rax, undefined ; dropped: procedure-call-expression?
 mov rax, 1 ; '0
 mov [___lambda_2did_2dcounter], rax ; (set! lambda-id-counter ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_590
 mov rax, ALLOC
 add ALLOC, 16
 mov [___canonicalize_2dexpression], rax ; (set! canonicalize-expression ...)
 mov rax, 3 ; '1
 mov [___rename_2dcounter], rax ; (set! rename-counter ...)
 mov rax, null ; 
 mov [___renamed_2dvariables], rax ; (set! renamed-variables ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_648
 mov rax, ALLOC
 add ALLOC, 16
 mov [___rename_2dvar], rax ; (set! rename-var ...)
 mov rax, undefined ; dropped: genvar
 mov rax, undefined ; dropped: genvar/prefix
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_651
 mov rax, ALLOC
 add ALLOC, 16
 mov [___dump_2dexpressions], rax ; (set! dump-expressions ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_679
 mov rax, ALLOC
 add ALLOC, 16
 mov [___pure_2dexpression_3f], rax ; (set! pure-expression? ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_694
 mov rax, ALLOC
 add ALLOC, 16
 mov [___cp1], rax ; (set! cp1 ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_744
 mov rax, ALLOC
 add ALLOC, 16
 mov [___cp], rax ; (set! cp ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_780
 mov rax, ALLOC
 add ALLOC, 16
 mov [___simplify], rax ; (set! simplify ...)
 mov rax, undefined ; dropped: implicitly-retained-globals
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_827
 mov rax, ALLOC
 add ALLOC, 16
 mov [___detect_2dunused_2dvariables], rax ; (set! detect-unused-variables ...)
 mov rax, undefined ; dropped: cc-box-counts
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_874
 mov rax, ALLOC
 add ALLOC, 16
 mov [___cc], rax ; (set! cc ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1011
 mov rax, ALLOC
 add ALLOC, 16
 mov [___cps], rax ; (set! cps ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1099
 mov rax, ALLOC
 add ALLOC, 16
 mov [___mangle_2didentifier], rax ; (set! mangle-identifier ...)
 mov rax, undefined ; dropped: mangle-string-constant
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1104
 mov rax, ALLOC
 add ALLOC, 16
 mov [___mangle_2dfeature_2dname], rax ; (set! mangle-feature-name ...)
 mov rax, null ; 
 mov [___implementation_2dfeatures], rax ; (set! implementation-features ...)
 mov rax, L29 ; 
 mov [___file_2dsearch_2dpath], rax ; (set! file-search-path ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1106
 mov rax, ALLOC
 add ALLOC, 16
 mov [___program_2dfile_2dfilename], rax ; (set! program-file-filename ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1107
 mov rax, ALLOC
 add ALLOC, 16
 mov [___expand_2dprogram], rax ; (set! expand-program ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1139
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dcond_2dexpand], rax ; (set! generate-cond-expand ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1141
 mov rax, ALLOC
 add ALLOC, 16
 mov [___topological_2dsort], rax ; (set! topological-sort ...)
 mov rax, null ; 
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, undefined ; dropped: blocked-register?
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1150
 mov rax, ALLOC
 add ALLOC, 16
 mov [___trivial_2dregister_2dexpression_3f], rax ; (set! trivial-register-expression? ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1154
 mov rax, ALLOC
 add ALLOC, 16
 mov [___simple_2dexpression_3f], rax ; (set! simple-expression? ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1165
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2fregisters], rax ; (set! translate/registers ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1186
 mov rax, ALLOC
 add ALLOC, 16
 mov [___used_2dregisters], rax ; (set! used-registers ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1216
 mov rax, ALLOC
 add ALLOC, 16
 mov [___argument_2dregister], rax ; (set! argument-register ...)
 mov rax, L30 ; 
 mov [___basic_2dimplementation_2dfeatures], rax ; (set! basic-implementation-features ...)
 mov rax, undefined ; dropped: argument-register-count
 mov rax, null ; 
 mov [___primitives], rax ; (set! primitives ...)
 mov rax, null ; 
 mov [___closures_2dto_2dbe_2dtranslated], rax ; (set! closures-to-be-translated ...)
 mov rax, null ; 
 mov [___literals_2dto_2dbe_2dtranslated], rax ; (set! literals-to-be-translated ...)
 mov rax, null ; 
 mov [___string_2dliterals], rax ; (set! string-literals ...)
 mov rax, null ; 
 mov [___symbol_2dtable], rax ; (set! symbol-table ...)
 mov rax, 1 ; '0
 mov [___label_2dcounter], rax ; (set! label-counter ...)
 mov rax, FALSE
 mov [___allocating], rax ; (set! allocating ...)
 mov rax, FALSE
 mov [___emit_2dexpr_2dcomments], rax ; (set! emit-expr-comments ...)
 mov rax, FALSE
 mov [___enable_2dchecks], rax ; (set! enable-checks ...)
 mov rax, FALSE
 mov [___enable_2dpic], rax ; (set! enable-pic ...)
 mov rax, FALSE
 mov [___verbose], rax ; (set! verbose ...)
 mov rax, null ; 
 mov [___environment], rax ; (set! environment ...)
 mov rax, 1 ; '0
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, null ; 
 mov [___unused_2dglobal_2dvariables], rax ; (set! unused-global-variables ...)
 mov rax, 1 ; '0
 mov [___dropped_2dglobal_2dcount], rax ; (set! dropped-global-count ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1219
 mov rax, ALLOC
 add ALLOC, 16
 mov [___cells], rax ; (set! cells ...)
 mov rax, undefined ; dropped: bytes
 mov rax, L31 ; 
 mov [___default_2dconfiguration], rax ; (set! default-configuration ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1221
 mov rax, ALLOC
 add ALLOC, 16
 mov [___compile], rax ; (set! compile ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1234
 mov rax, ALLOC
 add ALLOC, 16
 mov [___compile_2dfile], rax ; (set! compile-file ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1235
 mov rax, ALLOC
 add ALLOC, 16
 mov [____4e_42], rax ; (set! NB ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1237
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dcode], rax ; (set! generate-code ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1238
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dglobals], rax ; (set! generate-globals ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1240
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dclosures], rax ; (set! generate-closures ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1242
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dliterals], rax ; (set! generate-literals ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1245
 mov rax, ALLOC
 add ALLOC, 16
 mov [___typecode], rax ; (set! typecode ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1246
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dstrings], rax ; (set! generate-strings ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1249
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dsymbol_2dtable], rax ; (set! generate-symbol-table ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1251
 mov rax, ALLOC
 add ALLOC, 16
 mov [___fixnum_3f], rax ; (set! fixnum? ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1252
 mov rax, ALLOC
 add ALLOC, 16
 mov [___register_2dliteral], rax ; (set! register-literal ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1253
 mov rax, ALLOC
 add ALLOC, 16
 mov [___label], rax ; (set! label ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1254
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dinline_2darguments], rax ; (set! translate-inline-arguments ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1255
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate], rax ; (set! translate ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1305
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dstore], rax ; (set! translate-store ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1306
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dcall], rax ; (set! translate-call ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1307
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dcall_2dto_2dknown_2dtarget], rax ; (set! translate-call-to-known-target ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1308
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dclosure], rax ; (set! translate-closure ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1314
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dllist], rax ; (set! translate-llist ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1318
 mov rax, ALLOC
 add ALLOC, 16
 mov [___translate_2dliteral], rax ; (set! translate-literal ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1321
 mov rax, ALLOC
 add ALLOC, 16
 mov [___encode_2dfixnum], rax ; (set! encode-fixnum ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1322
 mov rax, ALLOC
 add ALLOC, 16
 mov [___lookup_2dvariable], rax ; (set! lookup-variable ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1324
 mov rax, ALLOC
 add ALLOC, 16
 mov [___command_2dline_2doption_3f], rax ; (set! command-line-option? ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1325
 mov rax, ALLOC
 add ALLOC, 16
 mov [___usage], rax ; (set! usage ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1327
 mov rax, ALLOC
 add ALLOC, 16
 mov [___main], rax ; (set! main ...)
 mov rax, L32 ; 
 mov [___fixnum_2drange], rax ; (set! fixnum-range ...)
 mov rax, L33 ; 
 mov [___temporary_2dregisters], rax ; (set! temporary-registers ...)
 mov rax, L34 ; 
 mov [___argument_2dregisters], rax ; (set! argument-registers ...)
 mov rax, 17 ; '8
 mov [___word_2dsize], rax ; (set! word-size ...)
 mov rax, L35 ; 
 mov [___target_2darch], rax ; (set! target-arch ...)
 mov rax, L36 ; 
 mov [___target_2dendianness], rax ; (set! target-endianness ...)
 mov rax, L37 ; 
 mov [___arg_2dregister], rax ; (set! arg-register ...)
 mov rax, L38 ; 
 mov [___alloc_2dregister], rax ; (set! alloc-register ...)
 mov rax, L39 ; 
 mov [___self_2dregister], rax ; (set! self-register ...)
 mov rax, L40 ; 
 mov [___false_2dregister], rax ; (set! false-register ...)
 mov rax, L41 ; 
 mov [___count_2dregister], rax ; (set! count-register ...)
 mov rax, L42 ; 
 mov [___stack_2dregister], rax ; (set! stack-register ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1338
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dheader], rax ; (set! generate-header ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1340
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dtrailer], rax ; (set! generate-trailer ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1341
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dprimitives], rax ; (set! generate-primitives ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1344
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dsection], rax ; (set! generate-section ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1345
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2ddefword], rax ; (set! generate-defword ...)
 mov rax, undefined ; dropped: generate-defbyte
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1349
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2ddefstring], rax ; (set! generate-defstring ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1351
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2ddeffloat], rax ; (set! generate-deffloat ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1352
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dalign], rax ; (set! generate-align ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1353
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dpadding], rax ; (set! generate-padding ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1354
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dequ], rax ; (set! generate-equ ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1355
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dclosure_2dalloc], rax ; (set! generate-closure-alloc ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1356
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dmove], rax ; (set! generate-move ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1357
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dadd], rax ; (set! generate-add ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1358
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dmove_2dto_2dlocal], rax ; (set! generate-move-to-local ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1359
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dreserve_2don_2dstack], rax ; (set! generate-reserve-on-stack ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1360
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dpop_2dstack], rax ; (set! generate-pop-stack ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1361
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dcomment], rax ; (set! generate-comment ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1362
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dexpr_2dcomment], rax ; (set! generate-expr-comment ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1363
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dglobal_2dstore], rax ; (set! generate-global-store ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1364
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dglobal_2dref], rax ; (set! generate-global-ref ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1365
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dlocal_2dref], rax ; (set! generate-local-ref ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1366
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dlocal_2dstore], rax ; (set! generate-local-store ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1367
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dconditional_2dbranch], rax ; (set! generate-conditional-branch ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1368
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2djump], rax ; (set! generate-jump ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1369
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dimmediate_2dref], rax ; (set! generate-immediate-ref ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1370
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dslot_2dref], rax ; (set! generate-slot-ref ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1371
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dslot_2dstore], rax ; (set! generate-slot-store ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1372
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dtrue_2dref], rax ; (set! generate-true-ref ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1373
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dalloc_2dcheck], rax ; (set! generate-alloc-check ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1374
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dtail_2dcall], rax ; (set! generate-tail-call ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1375
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2ddirect_2dtail_2dcall], rax ; (set! generate-direct-tail-call ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1376
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dcall], rax ; (set! generate-call ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1377
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dargc_2dcheck], rax ; (set! generate-argc-check ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1378
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dconditional_2dmove], rax ; (set! generate-conditional-move ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1379
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dalloc_2dalignment], rax ; (set! generate-alloc-alignment ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1380
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dprocedure_2dcheck], rax ; (set! generate-procedure-check ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1381
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dconditional_2dset], rax ; (set! generate-conditional-set ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1382
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dconditional_2dbranch_2fcond], rax ; (set! generate-conditional-branch/cond ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1383
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dconditional_2dmove_2fcond], rax ; (set! generate-conditional-move/cond ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1384
 mov rax, ALLOC
 add ALLOC, 16
 mov [___real_2dcondition], rax ; (set! real-condition ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1385
 mov rax, ALLOC
 add ALLOC, 16
 mov [___inverted_2dcondition], rax ; (set! inverted-condition ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1386
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dlabel], rax ; (set! generate-label ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1387
 mov rax, ALLOC
 add ALLOC, 16
 mov [___generate_2dinstruction], rax ; (set! generate-instruction ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1732
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___command_2dline] ; command-line
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1732:
; ((t348 . rcx))
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; t347 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rdx
 mov rcx, [SELF + 16]
 mov SELF, [___main] ; main
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1387:
; ((_instr_52^11698 . rdx) (k349 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L43 ; 
 mov rdi, L44 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1386:
; ((_name_52^11697 . rdx) (k350 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___emit] ; emit
 mov rsi, L45 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1385:
; ((_cnd_52^11675 . rdx) (k351 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1733
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___symbolify] ; symbolify
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1733:
; ((t352 . rcx))
 mov rax, rcx
 mov r11, L46 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L47
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L49 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L47:
 mov rax, rcx
 mov r11, L50 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L51
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L53 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L51:
 mov rax, rcx
 mov r11, L54 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L55
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L57 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L55:
 mov rax, rcx
 mov r11, L58 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L59
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L61 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L59:
 mov rax, rcx
 mov r11, L62 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L63
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L65 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L63:
 mov rax, rcx
 mov r11, L66 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L67
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L69 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L67:
 mov rax, rcx
 mov r11, L70 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L71
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L73 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L71:
 mov rax, rcx
 mov r11, L74 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L75
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L77 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L75:
 mov rax, rcx
 mov r11, L78 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L79
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L81 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L79:
 mov rax, rcx
 mov r11, L82 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L83
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L85 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L83:
 mov rcx, [SELF + 16]
 mov rdx, L86 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L84:
L80:
L76:
L72:
L68:
L64:
L60:
L56:
L52:
L48:
f_1384:
; ((_cnd_52^11667 . rdx) (k353 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1734
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___symbolify] ; symbolify
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1734:
; ((t354 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, L87 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L88
 mov rax, L90 ; 
 jmp L89
L88:
 mov rax, rcx
 mov r11, L91 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L92
 mov rax, L94 ; 
 jmp L93
L92:
 sub rsp, 8
 mov rax, rcx
 mov r11, L95 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, L96 ; 
 mov r15, [SELF + 16]
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L93:
L89:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1383:
; ((_dest_54^11666 . rdi) (_src_53^11665 . rsi) (_cnd_52^11664 . rdx) (k355 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1735
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___real_2dcondition] ; real-condition
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1735:
; ((t356 . rcx))
 mov rdx, L97 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov rdi, L98 ; 
 mov r8, [SELF + 24]
 mov r9, L99 ; 
 mov r10, [SELF + 32]
 mov SELF, [___emit] ; emit
 mov r12, L100 ; 
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1382:
; ((_lbl_54^11663 . rdi) (_cnd_52^11661 . rdx) (k357 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1736
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___inverted_2dcondition] ; inverted-condition
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1736:
; ((t358 . rcx))
 mov rdx, L101 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov rdi, L102 ; 
 mov r8, [SELF + 24]
 mov SELF, [___emit] ; emit
 mov r9, L103 ; 
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
f_1381:
; ((_r_53^11660 . rsi) (_cnd_52^11659 . rdx) (k359 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1737
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___inverted_2dcondition] ; inverted-condition
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1737:
; ((t360 . rcx))
 mov rdx, L104 ; 
 mov rsi, [SELF + 24]
 mov rdi, L105 ; 
 mov r8, rcx
 mov rcx, [SELF + 16]
 mov r9, L106 ; 
 mov r10, [SELF + 24]
 mov SELF, [___emit] ; emit
 mov r12, L107 ; 
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1380:
; ((k361 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdx, L108 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1379:
; ((k362 . rcx))
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1378:
; ((_dest_54^11658 . rdi) (_src_53^11657 . rsi) (_test_52^11656 . rdx) (k363 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov r8, rdi
 mov rdi, L109 ; 
 mov r9, L110 ; 
 mov r10, rsi
 mov rsi, rdx
 mov rdx, L111 ; 
 mov r12, L112 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1377:
; ((_lbl_54^11655 . rdi) (_rest?_53^11654 . rsi) (_argc_52^11653 . rdx) (k364 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rax, rsi
 mov r11, L113 ; 
 mov r15, L114 ; 
 mov r8, r11
 cmp rax, FALSE
 cmove r8, r15
 mov rsi, rdx
 mov rdx, L115 ; 
 mov r9, rdi
 mov rdi, L116 ; 
 mov r10, L117 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 jmp rax
f_1376:
; ((_name_52^11652 . rdx) (k365 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L118 ; 
 mov rdi, L119 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1375:
; ((_lbl_52^11651 . rdx) (k366 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L120 ; 
 mov rdi, L121 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1374:
; ((_r_52^11650 . rdx) (k367 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L122 ; 
 mov rdi, L123 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1373:
; ((k368 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdx, L124 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1372:
; ((_r_52^11649 . rdx) (k369 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L125 ; 
 mov rdi, L126 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1371:
; ((_src_54^11648 . rdi) (_off_53^11647 . rsi) (_dest_52^11646 . rdx) (k370 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L127 ; 
 mov r9, L128 ; 
 mov r10, rdi
 mov rdi, L129 ; 
 mov r12, L130 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1370:
; ((_off_54^11645 . rdi) (_src_53^11644 . rsi) (_dest_52^11643 . rdx) (k371 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L131 ; 
 mov r9, L132 ; 
 mov r10, rdi
 mov rdi, L133 ; 
 mov r12, L134 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1369:
; ((_comment_54^11642 . rdi) (_val_53^11641 . rsi) (_dest_52^11640 . rdx) (k372 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1738
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdi, L135 ; 
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L136 ; 
 mov r9, L137 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1738:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1739
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___emit] ; emit
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1739:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L138 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1368:
; ((_lbl_52^11639 . rdx) (k375 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L139 ; 
 mov rdi, L140 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1367:
; ((_lbl_53^11638 . rsi) (_r_52^11637 . rdx) (k376 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdi, L141 ; 
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L142 ; 
 mov r9, L143 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
f_1366:
; ((_src_54^11636 . rdi) (_dest_53^11635 . rsi) (_var_52^11634 . rdx) (k377 . rcx))
 sub rsp, 16
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov SELF, [___emit] ; emit
 mov r8, rdi
 mov rdi, L144 ; 
 mov r9, L145 ; 
 mov r10, rdx
 mov rdx, L146 ; 
 mov r12, L147 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1365:
; ((_src_54^11633 . rdi) (_var_53^11632 . rsi) (_dest_52^11631 . rdx) (k378 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov r8, rdi
 mov rdi, L148 ; 
 mov r9, L149 ; 
 mov r10, rsi
 mov rsi, rdx
 mov rdx, L150 ; 
 mov r12, L151 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1364:
; ((_name_54^11630 . rdi) (_var_53^11629 . rsi) (_dest_52^11628 . rdx) (k379 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov r8, rdi
 mov rdi, L152 ; 
 mov r9, L153 ; 
 mov r10, rsi
 mov rsi, rdx
 mov rdx, L154 ; 
 mov r12, L155 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1363:
; ((_src_54^11627 . rdi) (_name_53^11626 . rsi) (_var_52^11625 . rdx) (k380 . rcx))
 sub rsp, 16
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov SELF, [___emit] ; emit
 mov r8, rdi
 mov rdi, L156 ; 
 mov r9, L157 ; 
 mov r10, rdx
 mov rdx, L158 ; 
 mov r12, L159 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
f_1362:
; ((_expr_52^11623 . rdx) (k381 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1740
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdx, L160 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1740:
; ()
 mov rax, [SELF + 24]
; _x_46^11624 = rcx
 mov rcx, rax
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1741
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 SET_T rsi
 mov rdi, [____25standard_2doutput_2dport] ; %standard-output-port
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1741:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L161 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1361:
; ((_text_52^11622 . rdx) (k384 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1742
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdx, L162 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1742:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1743
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___emit] ; emit
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1743:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L163 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1360:
; ((_bytes_52^11621 . rdx) (k387 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L164 ; 
 mov rdi, L165 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1359:
; ((_bytes_52^11620 . rdx) (k388 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L166 ; 
 mov rdi, L167 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1358:
; ((_src_53^11619 . rsi) (_off_52^11618 . rdx) (k389 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdi, L168 ; 
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L169 ; 
 mov r9, L170 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
f_1357:
; ((_n_53^11617 . rsi) (_r_52^11616 . rdx) (k390 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdi, L171 ; 
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L172 ; 
 mov r9, L173 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
f_1356:
; ((_src_53^11612 . rsi) (_dest_52^11611 . rdx) (k391 . rcx))
 mov rax, rdx
 mov r11, rsi
 cmp rax, r11
 jne L174
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L174:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdi, L176 ; 
 mov r8, rsi
 mov rsi, rdx
 mov rdx, L177 ; 
 mov r9, L178 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
L175:
f_1355:
; ((_id_53^11610 . rsi) (_n_52^11609 . rdx) (k392 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1748
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___add1] ; add1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1748:
; ((t397 . rcx))
 mov rdx, L179 ; 
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1747
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1747:
; ((t396 . rcx))
 mov rdx, L180 ; 
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1744
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___emit] ; emit
 mov rdi, L181 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1744:
; ()
 mov rax, [___enable_2dpic] ; enable-pic
 cmp rax, FALSE
 je L182
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1745
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L182:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1746
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L183:
f_1746:
; ((t395 . rcx))
 mov rdx, L184 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov rdi, L185 ; 
 mov r8, [SELF + 24]
 mov SELF, [___emit] ; emit
 mov r9, L186 ; 
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
f_1745:
; ((t394 . rcx))
 mov rdx, L187 ; 
 mov rsi, [SELF + 16]
 mov rdi, L188 ; 
 mov r8, L189 ; 
 mov r9, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___emit] ; emit
 mov r10, L190 ; 
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 jmp rax
f_1354:
; ((_vals_53^11608 . rsi) (_name_52^11607 . rdx) (k398 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1749
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___emit] ; emit
 mov rsi, L191 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1749:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1750
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___emit] ; emit
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1750:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L192 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1353:
; ((_bytes_52^11606 . rdx) (k401 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L193 ; 
 mov rdi, L194 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1352:
; ((_bytes_52^11605 . rdx) (k402 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L195 ; 
 mov rdi, L196 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1351:
; ((_val_52^11604 . rdx) (k403 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L197 ; 
 mov rdi, L198 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1349:
; ((_str_52^11591 . rdx) (k404 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1751
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdx, L199 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1751:
; ()
 mov rax, [SELF + 24]
; _s_45^11593 = rcx
 mov rcx, rax
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_53^11592 = rcx
 mov rcx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_54^11594 = rdx
 mov rdx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1350
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t407 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1752
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, rsi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1350
f_1752:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L200 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1350:
; ((_i_55^11595 . rdx) (k409 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1754
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [____3e_3d] ; >=
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1754:
; ((t410 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L201
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L201:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1755
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t414 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _n_44^11597 = rsi
 mov rsi, rax
 sub rsp, 8
; _x_44^11598 = rdi
 mov rdi, rsi
 mov rax, rdi
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L203
 mov rax, rsi
 jmp L204
L203:
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L204:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^11596 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L205
 mov SELF, [___emit] ; emit
 mov rcx, rdx
 mov rdx, L207 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L205:
 mov SELF, rdx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1755
L206:
L202:
f_1755:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_45^11600 = rcx
 mov rcx, rax
 mov rax, [SELF + 40]
; _i_46^11601 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^11602 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL lookup_char
; _x_45^11603 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L208
 mov rax, rdi
 jmp L209
L208:
 mov rax, rsi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L209:
; _x_44^11599 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1756
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___emit] ; emit
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1756:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1757
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1757:
; ((t413 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1350
f_1345:
; ((_vals_53^11586 . rsi) (_val1_52^11585 . rdx) (k420 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1761
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdx, L210 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1761:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1762
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1762:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1763
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1346
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1346:
; ((_x_54^11587 . rdx) (k424 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L211 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1763:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L212 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1344:
; ((_name_52^11584 . rdx) (k425 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L213 ; 
 mov rdi, L214 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1341:
; ((k426 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1764
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdx, L215 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1764:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1342
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [___primitives] ; primitives
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1342:
; ((_expr_52^11574 . rdx) (k428 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1343
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^11576 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L216
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_55^11578 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_56^11579 = r8
 mov r8, rax
; _name_60^11583 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1765
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L216:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1343
L217:
f_1765:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1766
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rdx, L218 ; 
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1766:
; ((t431 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1343:
; ((k429 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L219 ; 
 mov rsi, L220 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1340:
; ((k432 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rdx, L221 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1338:
; ((_features_52^11572 . rdx) (k433 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1767
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___emit] ; emit
 mov rdx, L222 ; 
 mov rsi, [___bones_2dversion] ; bones-version
 mov rdi, L223 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1767:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1768
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1339
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1339:
; ((_x_53^11573 . rdx) (k436 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___emit] ; emit
 mov rsi, rdx
 mov rdx, L224 ; 
 mov rdi, L225 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1768:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emit] ; emit
 mov rdx, L226 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1327:
; ((_args_52^11475 . rdx) (k437 . rcx))
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _opts_53^11476 = rsi
 mov rsi, rax
 mov [ALLOC + 8], FALSE
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _fname_54^11477 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_55^11478 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1328
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t438 = r9
 mov r9, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r9
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1328
f_1328:
; ((_args_56^11479 . rdx) (k440 . rcx))
; _v_57^11480 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1329
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_58^11481 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L227
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 cmp rax, FALSE
 je L229
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [___compile_2dfile] ; compile-file
 mov rsi, [SELF + 24]
 mov rsi, [rsi + 8]
 mov rdi, [SELF + 32]
 mov rdi, [rdi + 8]
 mov SELF, [____25apply] ; %apply
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L229:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___usage] ; usage
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L230:
L227:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1329
L228:
f_1329:
; ((k441 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1330
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_58^11482 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^11564 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L231
 mov rax, [SELF + 16]
; _x_44^11567 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^11565 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^11568 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, L233 ; 
; _y_45^11570 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL recursively_equal
 cmp rax, FALSE
 je L234
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1787
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___print] ; print
 mov rdx, [___bones_2dversion] ; bones-version
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L234:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1330
L235:
L231:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1330
L232:
f_1787:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___exit] ; exit
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1330:
; ((k442 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1331
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_58^11483 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^11550 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L236
 mov rax, [SELF + 40]
; _x_44^11553 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11551 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^11554 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11552 = rdi
 mov rdi, rax
 mov rax, L238 ; 
; _y_45^11556 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, r8
 CALL recursively_equal
 cmp rax, FALSE
 je L239
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L241
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^11558 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^11559 = r9
 mov r9, rax
; _more_68^11563 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1786
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, L243 ; 
 mov rsi, r8
 mov rdi, [SELF + 16]
 mov rdi, [rdi + 8]
 mov SELF, [___cons_2a] ; cons*
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L241:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1331
L242:
L239:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1331
L240:
L236:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1331
L237:
f_1786:
; ((t471 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1328
f_1331:
; ((k443 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1332
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_58^11484 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^11535 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L244
 mov rax, [SELF + 16]
; _x_44^11538 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11536 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^11539 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11537 = rdi
 mov rdi, rax
 mov rax, L246 ; 
; _y_45^11541 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, r8
 CALL recursively_equal
 cmp rax, FALSE
 je L247
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L249
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^11543 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^11544 = r9
 mov r9, rax
; _more_68^11548 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1784
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___string_2dsplit] ; string-split
 mov rdx, r8
 mov rsi, L251 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L249:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1332
L250:
L247:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1332
L248:
L244:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1332
L245:
f_1784:
; ((t469 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1337
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1783
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___append_2dmap] ; append-map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1783:
; ((t467 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1782
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rsi, [SELF + 40]
 mov rsi, [rsi + 8]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1782:
; ((t465 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1328
f_1337:
; ((_x_69^11549 . rdx) (k468 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25list] ; %list
 mov rsi, rdx
 mov rdx, L252 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1332:
; ((k444 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1333
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_58^11485 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^11527 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L253
 mov rax, [SELF + 40]
; _x_44^11530 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^11528 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^11531 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^11529 = rdi
 mov rdi, rax
 mov rax, L255 ; 
; _y_45^11533 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, r8
 CALL recursively_equal
 cmp rax, FALSE
 je L256
; _more_63^11534 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1780
 mov [ALLOC + 16], r8
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___case_2dsensitive] ; case-sensitive
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L256:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1333
L257:
L253:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1333
L254:
f_1780:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1328
f_1333:
; ((k445 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1334
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_58^11486 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^11513 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L258
 mov rax, [SELF + 16]
; _x_44^11516 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11514 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^11517 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11515 = rdi
 mov rdi, rax
 mov rax, L260 ; 
; _y_45^11519 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, r8
 CALL recursively_equal
 cmp rax, FALSE
 je L261
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L263
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^11521 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^11522 = r9
 mov r9, rax
; _more_68^11526 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1779
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L263:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1334
L264:
L261:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1334
L262:
L258:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1334
L259:
f_1779:
; ((t462 . rcx))
 mov rdx, L265 ; 
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1778
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdi, [SELF + 16]
 mov rdi, [rdi + 8]
 mov SELF, [___cons_2a] ; cons*
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1778:
; ((t460 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1328
f_1334:
; ((k446 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1335
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_58^11487 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^11496 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L266
 mov rax, [SELF + 40]
; _x_44^11499 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^11497 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^11500 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^11498 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1770
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rdi
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___command_2dline_2doption_3f] ; command-line-option?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L266:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1335
L267:
f_1770:
; ((t450 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L268
 mov rax, [SELF + 16]
; _opt_64^11501 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _more_66^11502 = rsi
 mov rsi, rax
; _str_45^11503 = rdi
 mov rdi, rdx
; _s_45^11506 = r8
 mov r8, rdx
 mov rax, r8
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _to_47^11505 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
; _len_48^11507 = r9
 mov r9, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1776
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov [ALLOC + 56], rdi
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, r9
 mov rdi, FALSE
 mov r8, r9
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L268:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1335
L269:
f_1776:
; ((t457 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
; _x_45^11509 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 48]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1774
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___string_2dappend] ; string-append
 mov rsi, L270 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1774:
; ((t455 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1773
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1773:
; ((t454 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1772
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 SET_T rsi
 mov rdi, [SELF + 16]
 mov rdi, [rdi + 8]
 mov SELF, [___cons_2a] ; cons*
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1772:
; ((t452 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1328
f_1335:
; ((k447 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1336
 mov rax, ALLOC
 add ALLOC, 16
; _failure_58^11488 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^11489 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L271
 mov rax, [SELF + 16]
; _x_44^11492 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^11490 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^11493 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^11491 = rdi
 mov rdi, rax
 mov rax, [SELF + 32]
 mov r11, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1328
L271:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1336
L272:
f_1336:
; ((k448 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L273 ; 
 mov rsi, L274 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1325:
; ((k474 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1788
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___for_2deach] ; for-each
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1326
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, L275 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1326:
; ((_x_52^11472 . rdx) (k476 . rcx))
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _p_47^11474 = rsi
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdi, rsi
 mov rsi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1788:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___exit] ; exit
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1324:
; ((_str_52^11463 . rdx) (k477 . rcx))
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_53^11464 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1789
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [____25_3e] ; %>
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1789:
; ((t478 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L276
 mov rax, [SELF + 16]
; _x_45^11468 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^11470 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL lookup_char
; _x_45^11471 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L278
 mov rax, rdi
 jmp L279
L278:
 mov rax, rsi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L279:
; _y_46^11467 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 sub rsp, 16
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, L280 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L276:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L277:
f_1322:
; ((_var_52^11450 . rdx) (k479 . rcx))
 mov rax, [___environment] ; environment
; _lst_46^11453 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_53^11451 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L281
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1323
 mov rax, ALLOC
 add ALLOC, 16
; _failure_56^11456 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L283
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^11459 = r8
 mov r8, rax
 mov SELF, rcx
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L283:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1323
L284:
L281:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L285 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L282:
f_1323:
; ((k480 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L286 ; 
 mov rsi, L287 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1321:
; ((_n_52^11445 . rdx) (k481 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
; _x_44^11446 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 3 ; '1
 or rax, r11
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1318:
; ((_c_53^11365 . rsi) (_l_52^11364 . rdx) (k482 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1790
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___fixnum_3f] ; fixnum?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1790:
; ((t483 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L288
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov rsi, L290 ; 
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dequ] ; generate-equ
 mov r8, L291 ; 
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
L288:
 mov rax, [SELF + 16]
; _x_44^11366 = rdx
 mov rdx, rax
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^11367 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L292
 mov rax, rsi
 jmp L293
L292:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L293:
 cmp rax, FALSE
 je L294
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1791
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t489 = rdx
 mov rdx, rax
 mov SELF, [____25_3d] ; %=
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1796
 mov [ALLOC + 16], rdx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___word_2dsize] ; word-size
 mov rsi, 9 ; '4
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L294:
 mov rax, [SELF + 16]
; _x_44^11385 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L296
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_44^11388 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1798
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___register_2dliteral] ; register-literal
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L296:
 mov rax, [SELF + 16]
; _x_44^11390 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L298
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1809
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___vector_2d_3elist] ; vector->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L298:
 mov rax, [SELF + 16]
; _x_44^11393 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 37 ; '18
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L300
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1810
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L300:
 mov rax, [SELF + 16]
; _x_44^11406 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L302
 sub rsp, 16
 mov rax, [SELF + 24]
; _x_45^11409 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^11410 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^11407 = rdx
 mov rdx, rax
 mov rax, [___string_2dliterals] ; string-literals
; _y_46^11408 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___string_2dliterals], rax ; (set! string-literals ...)
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L302:
 mov rax, [SELF + 16]
; _x_44^11411 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L304
 mov rax, [SELF + 16]
; _x_45^11413 = rdx
 mov rdx, rax
 mov rax, [___symbol_2dtable] ; symbol-table
; _lst_46^11414 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_54^11412 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L306
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1320
 mov rax, ALLOC
 add ALLOC, 16
; _failure_57^11417 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L308
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_59^11420 = rdi
 mov rdi, rax
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dequ] ; generate-equ
 mov rsi, rdi
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L308:
 mov rcx, [SELF + 32]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1320
L309:
L306:
 mov rax, [SELF + 16]
; _x_45^11425 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^11426 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^11427 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], r8
 mov [rsp + 8], r8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1825
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L307:
L304:
 mov rax, [SELF + 16]
; _x_44^11438 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L310
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1826
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L310:
 mov rax, [SELF + 16]
; _x_44^11440 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L312
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dequ] ; generate-equ
 mov rsi, L314 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L312:
 mov rax, [SELF + 16]
; _x_44^11441 = rdx
 mov rdx, rax
 mov rax, rdx
 SET_T r11
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L315
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dequ] ; generate-equ
 mov rsi, L317 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L315:
 mov rax, [SELF + 16]
; _x_44^11443 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L318
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dequ] ; generate-equ
 mov rsi, L320 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L318:
 mov rcx, [SELF + 32]
 mov rdx, L321 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L319:
L316:
L313:
L311:
L305:
L303:
L301:
L299:
L297:
L295:
L289:
f_1826:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1827
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1827:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1830
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rdx, L322 ; 
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1830:
; ((t530 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1828
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1828:
; ()
 mov rax, [SELF + 16]
; _x_44^11439 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1829
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___encode_2dfixnum] ; encode-fixnum
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1829:
; ((t529 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1825:
; ((t524 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^11430 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1819
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___register_2dliteral] ; register-literal
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1819:
; ((t517 . rcx))
; _l1_55^11424 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_45^11436 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _y_46^11437 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^11434 = rsi
 mov rsi, rax
 mov rax, [___symbol_2dtable] ; symbol-table
; _y_46^11435 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___symbol_2dtable], rax ; (set! symbol-table ...)
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1820
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1820:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1821
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1821:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1823
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rdx, L323 ; 
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1823:
; ((t522 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1822
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1822:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1320:
; ((k516 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L324 ; 
 mov rsi, L325 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1810:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1811
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1811:
; ()
 mov rax, [SELF + 24]
; _bv_47^11395 = rcx
 mov rcx, rax
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_54^11394 = rcx
 mov rcx, rax
 sub rsp, 24
 mov [rsp + 0], rcx
 mov [rsp + 8], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1812
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1812:
; ((t506 . rcx))
; _str_55^11396 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_56^11398 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1319
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t510 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1813
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, rdi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1319
f_1813:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1815
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L326 ; 
 mov rsi, [SELF + 16]
 mov SELF, [___typecode] ; typecode
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1815:
; ((t509 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1814
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1814:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2ddefstring] ; generate-defstring
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1319:
; ((_i_57^11399 . rdx) (k512 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1817
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [____3e_3d] ; >=
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1817:
; ((t513 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L327
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L327:
 mov rax, [SELF + 40]
; _x_45^11400 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _i_46^11401 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _bv_47^11403 = rdi
 mov rdi, rax
 mov rax, [SELF + 32]
; _i_48^11404 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _y_47^11402 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1818
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L328:
f_1818:
; ((t515 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1319
f_1809:
; ((t503 . rcx))
 mov rdx, [___register_2dliteral] ; register-literal
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1804
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1804:
; ((t498 . rcx))
; _ls_54^11391 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1805
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1805:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1806
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1806:
; ()
 mov rdx, L329 ; 
 mov rax, [SELF + 24]
; _x_45^11392 = rcx
 mov rcx, rax
 mov rax, rcx
 CALL list_length
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1808
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1808:
; ((t502 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1807
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1807:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [___generate_2ddefword] ; generate-defword
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1798:
; ((t492 . rcx))
; _lcar_54^11386 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1799
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, [SELF + 32]
; _x_44^11389 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov SELF, [___register_2dliteral] ; register-literal
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1799:
; ((t493 . rcx))
; _lcdr_55^11387 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1800
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1800:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1801
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1801:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1803
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___typecode] ; typecode
 mov rdx, L330 ; 
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1803:
; ((t497 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1802
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1802:
; ((t496 . rcx))
 mov rdx, [___generate_2ddefword] ; generate-defword
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1796:
; ((t490 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L331
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1797
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, 9 ; '4
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L331:
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L332:
f_1797:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dpadding] ; generate-padding
 mov rdx, 9 ; '4
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1791:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1792
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1792:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1795
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1795:
; ((t488 . rcx))
 mov rdx, L333 ; 
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1794
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1794:
; ((t487 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1793
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1793:
; ()
 mov rax, [SELF + 24]
; _x_44^11368 = rcx
 mov rcx, rax
; _x_44^11370 = rdx
 mov rdx, rcx
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_44^11369 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L334
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  sar rax, 51
  and rax, 0xfff
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 4095 ; '2047
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L336
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  mov r11, 0x000fffffffffffff
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L337
L336:
 mov rax, FALSE
L337:
 jmp L335
L334:
 mov rax, FALSE
L335:
 cmp rax, FALSE
 je L338
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rdx, L340 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L338:
 mov rax, [SELF + 24]
; _x_44^11373 = rcx
 mov rcx, rax
; _x_44^11375 = rdx
 mov rdx, rcx
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^11374 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L341
 mov rax, rdx
 jmp L342
L341:
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  sar rax, 51
  and rax, 0xfff
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 4095 ; '2047
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
; _x_46^11376 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L343
 mov rax, rsi
 jmp L344
L343:
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  mov r11, 0x000fffffffffffff
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
L344:
L342:
; _x_44^11372 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L345
 sub rsp, 8
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^11379 = rcx
 mov rcx, rax
; _x_44^11380 = rdx
 mov rdx, rcx
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L347
 mov rax, rcx
 mov r11, 1 ; '0
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L348
L347:
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L349
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L350
L349:
 mov rax, FALSE
L350:
L348:
 mov [rsp + 0], rax
 mov r11, L351 ; 
 mov r15, L352 ; 
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L345:
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^11382 = rcx
 mov rcx, rax
; _x_44^11383 = rdx
 mov rdx, rcx
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L353
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _tmp_45^11384 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 FIX2INT r11
  mov [rsp - CELLS(1)], r11
  fild qword [rsp - CELLS(1)]
  fstp qword [rax + CELLS(1)]
 jmp L354
L353:
 mov rax, rcx
L354:
 mov [rsp + 0], rax
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2ddeffloat] ; generate-deffloat
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L346:
L339:
f_1314:
; ((_llist_52^11322 . rdx) (k531 . rcx))
 mov rax, [___argument_2dregisters] ; argument-registers
; _x_44^11323 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, 1 ; '0
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, null ; 
 mov [___environment], rax ; (set! environment ...)
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1315
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1316
 mov rsi, ALLOC
 add ALLOC, 16
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1316:
; ((_t1_55^11326 . rdi) (_t1_54^11325 . rsi) (_t1_53^11324 . rdx) (k536 . rcx))
; _argc_57^11328 = r8
 mov r8, rsi
; _rest_58^11329 = r9
 mov r9, rdi
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _unused_59^11330 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1831
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r9
 mov [ALLOC + 40], r10
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___for_2deach] ; for-each
 mov rsi, rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1317
 mov [ALLOC + 16], r10
 mov rdx, ALLOC
 add ALLOC, 24
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1317:
; ((_var_60^11331 . rdx) (k546 . rcx))
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11332 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L355
 mov rax, rdx
 mov r11, L357 ; 
 cmp rax, r11
 jne L358
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L358:
 mov rax, [___locals_2dcounter] ; locals-counter
; _y_46^11339 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^11336 = rsi
 mov rsi, rax
 mov rax, [___environment] ; environment
; _y_46^11337 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___environment], rax ; (set! environment ...)
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1839
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, [___locals_2dcounter] ; locals-counter
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L359:
L355:
 mov rax, rdx
 mov r11, L360 ; 
 cmp rax, r11
 jne L361
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11346 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11345 = rsi
 mov rsi, rax
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11347 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^11344 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t550 = r8
 mov r8, rax
 mov rax, [SELF + 16]
 mov r11, r8
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L361:
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11350 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11349 = rsi
 mov rsi, rax
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11351 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^11352 = rdi
 mov rdi, rax
 mov rax, [___environment] ; environment
; _y_46^11353 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov [___environment], rcx ; (set! environment ...)
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L362:
L356:
f_1839:
; ((t548 . rcx))
 mov rax, rcx
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1831:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1838
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov SELF, [___append] ; append
 mov rsi, [___available_2dregisters] ; available-registers
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1838:
; ((t544 . rcx))
 mov rax, rcx
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1833
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dcomment] ; generate-comment
 mov rdx, [___environment] ; environment
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1833:
; ()
 mov rax, [SELF + 32]
 cmp rax, FALSE
 je L363
 mov rax, [SELF + 32]
; _y_45^11358 = rcx
 mov rcx, rax
 mov rax, L365 ; 
 mov r11, rcx
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^11356 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 jmp L364
L363:
 mov rax, FALSE
L364:
 cmp rax, FALSE
 je L366
 mov rax, [SELF + 32]
; _x_45^11361 = rcx
 mov rcx, rax
 mov rax, [___environment] ; environment
; _lst_46^11362 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL assoc_eq
; _x_44^11360 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rdest_60^11359 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1837
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L366:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L367:
f_1837:
; ((t543 . rcx))
 mov rdx, [___arg_2dregister] ; arg-register
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1834
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1834:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1835
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dcall] ; generate-call
 mov rdx, L368 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1835:
; ()
 mov rax, [SELF + 24]
; _x_44^11363 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L369
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L369:
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1836
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L370:
f_1836:
; ((t542 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dmove_2dto_2dlocal] ; generate-move-to-local
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1315:
; ((k535 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1308:
; ((_exp_52^11247 . rdx) (k556 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1309
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^11249 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L371
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^11251 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^11252 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L373 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L374
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L376
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11258 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11259 = r10
 mov r10, rax
; _id_63^11262 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L378
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^11264 = local #0
 mov [locals + 0], rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^11265 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_73^11269 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1310
 mov [ALLOC + 16], r12
 mov [ALLOC + 24], rsi
 mov rax, [locals + 16] ; _loop_73^11269
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 16] ; _loop_73^11269
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 16] ; _loop_73^11269
 mov rax, [rax + 8]
; t558 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 24] ; t558
 mov rdx, [locals + 8] ; _x_65^11265
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1310
L378:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L379:
L376:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L377:
L374:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L375:
L371:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L372:
f_1310:
; ((_p-ls_76^11272 . rdi) (_p-ls_75^11271 . rsi) (_ls_74^11270 . rdx) (k560 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L380
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1844
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L380:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L382
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^11303 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L384
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^11306 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^11307 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L386
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11312 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L387
L386:
 mov rax, FALSE
L387:
 cmp rax, FALSE
 je L388
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^11314 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1310
L388:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L389:
L384:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L385:
L382:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1309
L383:
L381:
f_1844:
; ((t561 . rcx))
; _bodies_77^11274 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1845
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 32]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1845:
; ((t562 . rcx))
; _llists_78^11275 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1861
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 32]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1861:
; ((t584 . rcx))
 mov rdx, L390 ; 
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1860
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1860:
; ((t583 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1846
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1846:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_79^11276 = rcx
 mov rcx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1311
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t564 = rdx
 mov rdx, rax
 mov rcx, [SELF + 32]
 mov rsi, [SELF + 24]
 mov rdi, [SELF + 40]
 mov SELF, rdx
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1311
f_1311:
; ((_bodies_82^11279 . rdi) (_llists_81^11278 . rsi) (_i_80^11277 . rdx) (k566 . rcx))
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L391
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L391:
 sub rsp, 24
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1313
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1312
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1848
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L392:
f_1848:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1849
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1849:
; ((t568 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
; _x_44^11301 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^11300 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_1311
f_1312:
; ((k569 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
; _x_44^11281 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1313:
; ((_t1_85^11284 . rdi) (_t1_84^11283 . rsi) (_t1_83^11282 . rdx) (k570 . rcx))
; _argc_87^11286 = r8
 mov r8, rsi
; _rest_88^11287 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1857
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov [ALLOC + 56], r8
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1857:
; ((t580 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1859
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1859:
; ((t582 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1858
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1858:
; ((t581 . rcx))
 mov rdx, L393 ; 
 mov rsi, [SELF + 16]
 mov rdi, L394 ; 
 mov r8, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1850
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1850:
; ((t571 . rcx))
; _next_89^11288 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1851
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t577 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^11290 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; _x_90^11289 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L395
 mov rax, rdi
 jmp L396
L395:
 mov rax, [SELF + 48]
; _x_44^11291 = r8
 mov r8, rax
; _x_44^11292 = r9
 mov r9, r8
 mov rax, r9
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L397
 mov rax, r8
 mov r11, 1 ; '0
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L398
L397:
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L399
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L400
L399:
 mov rax, FALSE
L400:
L398:
L396:
 cmp rax, FALSE
 je L401
 mov rax, [SELF + 24]
; _x_44^11295 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11294 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L403
 mov rax, [___enable_2dchecks] ; enable-checks
 cmp rax, FALSE
 je L405
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1855
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 48]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L405:
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1851
L406:
L403:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1856
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 48]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L404:
L401:
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1851
L402:
f_1856:
; ((t579 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dargc_2dcheck] ; generate-argc-check
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1855:
; ((t578 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dargc_2dcheck] ; generate-argc-check
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1851:
; ()
 mov rax, [SELF + 32]
; _x_44^11296 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1852
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___translate_2dllist] ; translate-llist
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1852:
; ()
 mov rax, FALSE
 mov [___allocating], rax ; (set! allocating ...)
 mov rax, [SELF + 16]
; _x_44^11297 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1853
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___translate] ; translate
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1853:
; ()
 mov rax, [SELF + 32]
; _x_44^11299 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11298 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L407
 mov rax, [___enable_2dchecks] ; enable-checks
 cmp rax, FALSE
 je L409
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1854
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L409:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L410:
L407:
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L408:
f_1854:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dinstruction] ; generate-instruction
 mov rdx, L411 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1309:
; ((k557 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L412 ; 
 mov rsi, L413 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1307:
; ((_x_53^11243 . rsi) (_id_52^11242 . rdx) (k585 . rcx))
 mov rax, rsi
 CALL list_length
; _n_54^11244 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1869
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___number_2d_3estring] ; number->string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1869:
; ((t593 . rcx))
 mov rdx, L414 ; 
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1862
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1862:
; ((t586 . rcx))
; _lbl_55^11245 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1863
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___translate_2fregisters] ; translate/registers
 mov rsi, [___argument_2dregisters] ; argument-registers
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1863:
; ()
 mov rax, [___allocating] ; allocating
 cmp rax, FALSE
 je L415
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1867
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L415:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1868
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [___count_2dregister] ; count-register
 mov rsi, [SELF + 32]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L416:
f_1868:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2ddirect_2dtail_2dcall] ; generate-direct-tail-call
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1867:
; ((t591 . rcx))
 mov rdx, [___arg_2dregister] ; arg-register
 mov rsi, [___self_2dregister] ; self-register
 mov rdi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1864
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dslot_2dref] ; generate-slot-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1864:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1865
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [___count_2dregister] ; count-register
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1865:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1866
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dalloc_2dcheck] ; generate-alloc-check
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1866:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2ddirect_2dtail_2dcall] ; generate-direct-tail-call
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1306:
; ((_x_52^11239 . rdx) (k594 . rcx))
 mov rax, rdx
 CALL list_length
; _n_53^11240 = rsi
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1870
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___translate_2fregisters] ; translate/registers
 mov rsi, [___argument_2dregisters] ; argument-registers
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1870:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1871
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t601 = rcx
 mov rcx, rax
 mov rax, [___enable_2dchecks] ; enable-checks
 cmp rax, FALSE
 je L417
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___generate_2dprocedure_2dcheck] ; generate-procedure-check
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L417:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1871
L418:
f_1871:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1875
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1875:
; ((t600 . rcx))
 mov rdx, [___arg_2dregister] ; arg-register
 mov rsi, [___self_2dregister] ; self-register
 mov rdi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1872
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dslot_2dref] ; generate-slot-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1872:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1873
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___count_2dregister] ; count-register
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1873:
; ()
 mov rax, [___allocating] ; allocating
 cmp rax, FALSE
 je L419
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1874
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dalloc_2dcheck] ; generate-alloc-check
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L419:
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dtail_2dcall] ; generate-tail-call
 mov rdx, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L420:
f_1874:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dtail_2dcall] ; generate-tail-call
 mov rdx, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1305:
; ((_k_53^11236 . rsi) (_exp_52^11235 . rdx) (k602 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1877
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___trivial_2dregister_2dexpression_3f] ; trivial-register-expression?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1877:
; ((t604 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1876
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t605 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L421
 sub rsp, 16
 mov [rsp + 0], rcx
 mov [rsp + 8], rdx
 mov SELF, [___id] ; id
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L421:
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1878
 mov [ALLOC + 16], rdx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___translate] ; translate
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L422:
f_1878:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, [___arg_2dregister] ; arg-register
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_1876
f_1876:
; ((t603 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1255:
; ((_t_53^10583 . rsi) (_x_52^10582 . rdx) (k607 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1879
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
; t844 = rdi
 mov rdi, rax
 mov rax, [___emit_2dexpr_2dcomments] ; emit-expr-comments
 cmp rax, FALSE
 je L423
 sub rsp, 8
 mov [rsp + 0], rdx
 mov SELF, [___fragment] ; fragment
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2028
 mov [ALLOC + 16], rdi
 mov rcx, ALLOC
 add ALLOC, 24
 mov rsi, 9 ; '4
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L423:
 mov SELF, rdi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1879
L424:
f_2028:
; ((t845 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dexpr_2dcomment] ; generate-expr-comment
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1879:
; ()
 mov rax, [SELF + 32]
; _v_54^10584 = rcx
 mov rcx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1256
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10585 = rdx
 mov rdx, rax
; _x_44^11205 = rsi
 mov rsi, rcx
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L425
; _x_44^11208 = rsi
 mov rsi, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^11206 = rsi
 mov rsi, rax
; _x_44^11209 = rdi
 mov rdi, rcx
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^11207 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L427 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L428
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L430
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^11213 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^11214 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L432
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^11219 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _cap_68^11223 = r12
 mov r12, r10
 mov rax, [SELF + 32]
; _x_45^11224 = local #0
 mov [locals + 0], rax
 mov rax, [___closures_2dto_2dbe_2dtranslated] ; closures-to-be-translated
; _y_46^11225 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _x_45^11224
 mov r11, [locals + 8] ; _y_46^11225
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___closures_2dto_2dbe_2dtranslated], rax ; (set! closures-to-be-translated ...)
 SET_T rax
 mov [___allocating], rax ; (set! allocating ...)
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2018
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r12
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dclosure_2dalloc] ; generate-closure-alloc
 mov rax, r10
 CALL list_length
 mov rdx, rax
 mov rsi, r8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L432:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1256
L433:
L430:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1256
L431:
L428:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1256
L429:
L425:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1256
L426:
f_2018:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_69^11227 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1303
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t837 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2019
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rsi, 5 ; '2
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1303
f_2019:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2020
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, [___alloc_2dregister] ; alloc-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2020:
; ()
 mov rdx, 5 ; '2
 mov rax, [SELF + 16]
; _x_45^11234 = rcx
 mov rcx, rax
 mov rax, rcx
 CALL list_length
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2023
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2023:
; ((t836 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2022
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2022:
; ((t835 . rcx))
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2021
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dadd] ; generate-add
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2021:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1303:
; ((_off_71^11229 . rsi) (_lst_70^11228 . rdx) (k839 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L434
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L434:
 sub rsp, 24
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1304
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2025
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov SELF, [___translate_2dstore] ; translate-store
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L435:
f_2025:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2026
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2026:
; ((t841 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^11233 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1303
f_1304:
; ((_reg_72^11232 . rdx) (k842 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2027
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___cells] ; cells
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2027:
; ((t843 . rcx))
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1256:
; ((k609 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1257
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10586 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^11129 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L436
 mov rax, [SELF + 24]
; _x_44^11132 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^11130 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^11133 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^11131 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L438 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L439
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L441
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11137 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^11138 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_67^11141 = r10
 mov r10, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1296
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t796 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1296
L441:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L442:
L439:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L440:
L436:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L437:
f_1296:
; ((_p-ls_70^11144 . rdi) (_p-ls_69^11143 . rsi) (_ls_68^11142 . rdx) (k798 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L443
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2005
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L443:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L445
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^11186 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L447
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^11189 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^11190 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L449
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11195 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L450
L449:
 mov rax, FALSE
L450:
 cmp rax, FALSE
 je L451
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^11197 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1296
L451:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L452:
L447:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L448:
L445:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L446:
L444:
f_2005:
; ((t799 . rcx))
; _vals_71^11146 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2006
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 48]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2006:
; ((t800 . rcx))
; _vars_72^11147 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^11148 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L453
 mov rax, [SELF + 16]
; _x_44^11150 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11149 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L454
L453:
 mov rax, FALSE
L454:
 cmp rax, FALSE
 je L455
 mov rax, [SELF + 16]
; _x_44^11152 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^11151 = rsi
 mov rsi, rax
; _body_75^11153 = rdi
 mov rdi, rsi
 mov rax, [___environment] ; environment
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_76^11154 = r8
 mov r8, rax
 mov rax, [___locals_2dcounter] ; locals-counter
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_77^11155 = r9
 mov r9, rax
 mov rax, [___available_2dregisters] ; available-registers
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_78^11156 = r10
 mov r10, rax
 mov rcx, [SELF + 48]
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1298
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rsi, ALLOC
 add ALLOC, 48
 mov SELF, [___dynamic_2dwind] ; dynamic-wind
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1297
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r10
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1302
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r10
 mov rdi, ALLOC
 add ALLOC, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L455:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1257
L456:
f_1302:
; ((k823 . rcx))
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
; _tmp_80^11182 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
 mov r11, [___available_2dregisters] ; available-registers
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _tmp_80^11183 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
 mov r11, [___locals_2dcounter] ; locals-counter
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _tmp_80^11184 = rdi
 mov rdi, rax
 mov rax, [SELF + 24]
 mov r11, [___environment] ; environment
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 mov rcx, rdi
 mov [___environment], rcx ; (set! environment ...)
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1297:
; ((k801 . rcx))
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
; _tmp_80^11157 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
 mov r11, [___available_2dregisters] ; available-registers
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _tmp_80^11158 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
 mov r11, [___locals_2dcounter] ; locals-counter
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _tmp_80^11159 = rdi
 mov rdi, rax
 mov rax, [SELF + 24]
 mov r11, [___environment] ; environment
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 mov rcx, rdi
 mov [___environment], rcx ; (set! environment ...)
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1298:
; ((k807 . rcx))
 mov rax, [___environment] ; environment
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _newenv_80^11160 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1299
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2009
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 40]
 mov SELF, [___for_2deach] ; for-each
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2009:
; ()
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [___environment], rax ; (set! environment ...)
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov SELF, [___translate] ; translate
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1299:
; ((_val_82^11162 . rsi) (_var_81^11161 . rdx) (k810 . rcx))
 mov rax, rdx
 mov r11, L457 ; 
 cmp rax, r11
 jne L458
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___translate] ; translate
 mov rdx, rsi
 mov rsi, [___arg_2dregister] ; arg-register
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L458:
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11165 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L460
 sub rsp, 24
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1300
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2010
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [___translate_2dstore] ; translate-store
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L460:
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11173 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _reg_83^11172 = rdi
 mov rdi, rax
 sub rsp, 24
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1301
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2014
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov SELF, [___translate_2dstore] ; translate-store
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L461:
L459:
f_2014:
; ()
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^11177 = rcx
 mov rcx, rax
 mov rax, [SELF + 24]
; _y_46^11178 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^11175 = rcx
 mov rcx, rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _y_46^11176 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11180 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_84^11179 = rcx
 mov rcx, rax
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^11181 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1301:
; ((_reg2_84^11174 . rdx) (k821 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2015
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rsi, L462 ; 
 mov rdi, [SELF + 24]
 mov SELF, [___generate_2dcomment] ; generate-comment
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2015:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2010:
; ()
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^11169 = rcx
 mov rcx, rax
 mov rax, [___locals_2dcounter] ; locals-counter
; _y_46^11170 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^11167 = rcx
 mov rcx, rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
; _y_46^11168 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2011
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25_2b] ; %+
 mov rdx, [___locals_2dcounter] ; locals-counter
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2011:
; ((t813 . rcx))
 mov rax, rcx
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1300:
; ((_reg_83^11166 . rdx) (k815 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2012
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dcomment] ; generate-comment
 mov rsi, L463 ; 
 mov rdi, [___locals_2dcounter] ; locals-counter
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2012:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2013
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rdx, [___locals_2dcounter] ; locals-counter
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2013:
; ((t817 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dmove_2dto_2dlocal] ; generate-move-to-local
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1257:
; ((k610 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1258
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10587 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^11107 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L464
 mov rax, [SELF + 24]
; _x_44^11110 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^11108 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^11111 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^11109 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L466 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L467
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L469
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^11115 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^11116 = r9
 mov r9, rax
; _var_64^11119 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L471
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11121 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L472
L471:
 mov rax, FALSE
L472:
 cmp rax, FALSE
 je L473
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^11123 = r12
 mov r12, rax
; _val_67^11125 = local #0
 mov [locals + 0], r12
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1998
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
; t789 = local #1
 mov [locals + 8], rax
 mov rax, [___unused_2dglobal_2dvariables] ; unused-global-variables
; _lst_46^11127 = local #2
 mov [locals + 16], rax
 mov rax, r8
 mov r11, [locals + 16] ; _lst_46^11127
 CALL member_eq
 cmp rax, FALSE
 je L475
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1999
 mov [ALLOC + 16], r10
 mov rax, [locals + 8] ; t789
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [locals + 0] ; _val_67^11125
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___pure_2dexpression_3f] ; pure-expression?
 mov rdx, r12
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L475:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2002
 mov rax, [locals + 8] ; t789
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, r12
 mov rsi, [SELF + 32]
 mov SELF, [___translate] ; translate
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L476:
L473:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1258
L474:
L469:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1258
L470:
L467:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1258
L468:
L464:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1258
L465:
f_2002:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2003
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 24]
 mov SELF, [___mangle_2didentifier] ; mangle-identifier
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2003:
; ((t795 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dglobal_2dstore] ; generate-global-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1999:
; ((t790 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L477
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2001
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25_2b] ; %+
 mov rdx, [___dropped_2dglobal_2dcount] ; dropped-global-count
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L477:
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 32]
 mov SELF, [___translate] ; translate
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L478:
f_2001:
; ((t792 . rcx))
 mov rax, rcx
 mov [___dropped_2dglobal_2dcount], rax ; (set! dropped-global-count ...)
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov rsi, L479 ; 
 mov rdi, L480 ; 
 mov r8, [SELF + 32]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_1998:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1258:
; ((k611 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1259
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10588 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^11094 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L481
 mov rax, [SELF + 24]
; _x_44^11097 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^11095 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^11098 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^11096 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L483 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L484
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L486
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11102 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L487
L486:
 mov rax, FALSE
L487:
 cmp rax, FALSE
 je L488
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11104 = r8
 mov r8, rax
; _var_62^11106 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1997
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___mangle_2didentifier] ; mangle-identifier
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L488:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1259
L489:
L484:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1259
L485:
L481:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1259
L482:
f_1997:
; ((t787 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1996
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dglobal_2dref] ; generate-global-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1996:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1259:
; ((k612 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1260
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10589 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^11079 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L490
 mov rax, [SELF + 24]
; _x_44^11082 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^11080 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^11083 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^11081 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L492 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L493
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L495
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11087 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L496
L495:
 mov rax, FALSE
L496:
 cmp rax, FALSE
 je L497
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^11089 = r8
 mov r8, rax
; _var_62^11091 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1994
 mov [ALLOC + 16], r9
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___lookup_2dvariable] ; lookup-variable
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L497:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1260
L498:
L493:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1260
L494:
L490:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1260
L491:
f_1994:
; ((t783 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1993
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t784 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L499
 mov rsi, rcx
 mov rcx, rdx
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L499:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1995
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___cells] ; cells
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L500:
f_1995:
; ((t785 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___generate_2dlocal_2dref] ; generate-local-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1993:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1260:
; ((k613 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1261
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10590 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^11058 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L501
 mov rax, [SELF + 24]
; _x_44^11061 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^11059 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^11062 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^11060 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L503 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L504
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L506
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^11066 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^11067 = r9
 mov r9, rax
; _var_64^11070 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L508
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11072 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L509
L508:
 mov rax, FALSE
L509:
 cmp rax, FALSE
 je L510
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^11074 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1989
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, r12
 mov rsi, [SELF + 16]
 mov SELF, [___translate] ; translate
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L510:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1261
L511:
L506:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1261
L507:
L504:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1261
L505:
L501:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1261
L502:
f_1989:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1991
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 32]
 mov SELF, [___lookup_2dvariable] ; lookup-variable
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1991:
; ((t779 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1990
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t780 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L512
 sub rsp, 16
 mov [rsp + 0], rcx
 mov [rsp + 8], rdx
 mov rsi, [SELF + 24]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L512:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1992
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___cells] ; cells
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L513:
f_1992:
; ((t781 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dlocal_2dstore] ; generate-local-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1990:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1261:
; ((k614 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1262
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10591 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10988 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L514
 mov rax, [SELF + 24]
; _x_44^10991 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10989 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10992 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10990 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L516 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L517
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L519
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10996 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10997 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L521
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^11001 = r10
 mov r10, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^11002 = r12
 mov r12, rax
 mov rax, r10
 mov r11, L523 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L524
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L526
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^11008 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^11009 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _w_67^11008
; _code_70^11012 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, [locals + 8] ; _x_68^11009
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L528
 mov rax, [locals + 8] ; _x_68^11009
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^11014 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 8] ; _x_68^11009
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^11015 = local #4
 mov [locals + 32], rax
 mov rax, [locals + 24] ; _w_72^11014
; _cnd_75^11018 = local #5
 mov [locals + 40], rax
 mov rax, [locals + 32] ; _x_73^11015
; _args_79^11019 = local #6
 mov [locals + 48], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1967
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [locals + 48] ; _args_79^11019
 mov [ALLOC + 32], rax
 mov rax, [locals + 16] ; _code_70^11012
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [locals + 40] ; _cnd_75^11018
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 32] ; _x_73^11015
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L528:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L529:
L526:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L527:
L524:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L525:
L521:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L522:
L519:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L520:
L517:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L518:
L514:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L515:
f_1967:
; ((t749 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L530
 mov rax, [SELF + 16]
; _x_44^11020 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L532
 mov rax, [SELF + 16]
; _x_44^11023 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^11021 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^11024 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_82^11022 = rsi
 mov rsi, rax
; _y_84^11025 = rdi
 mov rdi, rdx
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L534
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11027 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L535
L534:
 mov rax, FALSE
L535:
 cmp rax, FALSE
 je L536
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^11029 = r8
 mov r8, rax
; _z_87^11031 = r9
 mov r9, r8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1987
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r9
 mov rcx, ALLOC
 add ALLOC, 72
 mov rax, [SELF + 32]
; _x_45^11033 = r10
 mov r10, rax
 mov rax, r10
 CALL list_length
 mov rdx, rax
 mov SELF, [____3c_3d] ; <=
 mov rax, [___temporary_2dregisters] ; temporary-registers
; _x_45^11034 = r10
 mov r10, rax
 mov rax, r10
 CALL list_length
 mov rsi, rax
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L536:
 sub rsp, 16
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L537:
L532:
 sub rsp, 16
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L533:
L530:
 sub rsp, 16
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1262
L531:
f_1987:
; ((t774 . rcx))
; _tmp_88^11032 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1988
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; t776 = rsi
 mov rsi, rax
 mov rax, rcx
 cmp rax, FALSE
 je L538
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1988
L538:
 mov rcx, rsi
 mov rdx, L540 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L539:
f_1988:
; ()
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1969
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t773 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
; _x_44^11037 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^11036 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L541
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L541:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1969
L542:
f_1969:
; ()
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1986
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 56]
 mov SELF, [___string_2dsplit] ; string-split
 mov rsi, L543 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1986:
; ((t772 . rcx))
 mov rdx, [___generate_2dinstruction] ; generate-instruction
 mov rsi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1970
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1970:
; ()
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1971
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t770 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1985
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 48]
 mov SELF, [___simple_2dexpression_3f] ; simple-expression?
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1985:
; ((t771 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L544
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___simple_2dexpression_3f] ; simple-expression?
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L544:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_1971
L545:
f_1971:
; ((t753 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L546
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1976
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 48]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L546:
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1977
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [___label] ; label
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L547:
f_1977:
; ((t761 . rcx))
; _l1_88^11055 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1978
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [___label] ; label
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1978:
; ((t762 . rcx))
; _l2_89^11056 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1979
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov rsi, [SELF + 24]
 mov rdi, [SELF + 48]
 mov SELF, [___generate_2dconditional_2dbranch_2fcond] ; generate-conditional-branch/cond
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1979:
; ()
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1980
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t768 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1984
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 24]
 mov SELF, [___translate] ; translate
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1984:
; ((t769 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L548
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2djump] ; generate-jump
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L548:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_1980
L549:
f_1980:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1981
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1981:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1982
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 16]
 mov SELF, [___translate] ; translate
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1982:
; ((t766 . rcx))
; _ret_90^11057 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1983
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1983:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1976:
; ((t760 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1972
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1972:
; ((t754 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1295
 mov rax, ALLOC
 add ALLOC, 16
; _failure_90^11040 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L550
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_92^11042 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_93^11043 = rdi
 mov rdi, rax
; _r1_95^11046 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L552
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^11048 = r9
 mov r9, rax
 mov rax, r9
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L553
L552:
 mov rax, FALSE
L553:
 cmp rax, FALSE
 je L554
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_96^11050 = r9
 mov r9, rax
; _r2_98^11052 = r10
 mov r10, r9
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1973
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t757 = r12
 mov r12, rax
 mov rax, [SELF + 16]
; _x_45^11053 = local #0
 mov [locals + 0], rax
 mov rax, [___temporary_2dregisters] ; temporary-registers
; _lst_46^11054 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _x_45^11053
 mov r11, [locals + 8] ; _lst_46^11054
 CALL member_eq
 cmp rax, FALSE
 je L556
 sub rsp, 8
 mov [rsp + 0], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1974
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dconditional_2dmove_2fcond] ; generate-conditional-move/cond
 mov rdi, r9
 mov rsi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L556:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1975
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], r8
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, r9
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L557:
L554:
 mov rcx, [SELF + 32]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1295
L555:
L550:
 mov rcx, [SELF + 32]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1295
L551:
f_1975:
; ()
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov rsi, [SELF + 40]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dconditional_2dmove_2fcond] ; generate-conditional-move/cond
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1974:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1973:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1295:
; ((k755 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L558 ; 
 mov rsi, L559 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1262:
; ((k615 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1263
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10592 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10937 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L560
 mov rax, [SELF + 24]
; _x_44^10940 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10938 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10941 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10939 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L562 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L563
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L565
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^10945 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^10946 = r9
 mov r9, rax
; _x_64^10949 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L567
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^10951 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^10952 = local #0
 mov [locals + 0], rax
; _y_69^10955 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_67^10952
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L569
 mov rax, [locals + 0] ; _x_67^10952
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10957 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^10957
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L570
L569:
 mov rax, FALSE
L570:
 cmp rax, FALSE
 je L571
 mov rax, [locals + 0] ; _x_67^10952
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^10959 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_70^10959
; _z_72^10961 = local #3
 mov [locals + 24], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1951
 mov rax, [locals + 8] ; _y_69^10955
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov rax, [locals + 24] ; _z_72^10961
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t747 = local #4
 mov [locals + 32], rax
 mov SELF, [___simple_2dexpression_3f] ; simple-expression?
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1966
 mov rax, [locals + 32] ; t747
 mov [ALLOC + 16], rax
 mov rax, [locals + 24] ; _z_72^10961
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, r12
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L571:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1263
L572:
L567:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1263
L568:
L565:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1263
L566:
L563:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1263
L564:
L560:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1263
L561:
f_1966:
; ((t748 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L573
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___simple_2dexpression_3f] ; simple-expression?
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L573:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_1951
L574:
f_1951:
; ((t729 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L575
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1956
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L575:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1957
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 32]
 mov SELF, [___translate] ; translate
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L576:
f_1957:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1958
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___label] ; label
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1958:
; ((t738 . rcx))
; _l1_73^10985 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1959
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [___label] ; label
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1959:
; ((t739 . rcx))
; _l2_74^10986 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1960
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dconditional_2dbranch] ; generate-conditional-branch
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1960:
; ()
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1961
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t745 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1965
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 24]
 mov SELF, [___translate] ; translate
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1965:
; ((t746 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L577
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2djump] ; generate-jump
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L577:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_1961
L578:
f_1961:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1962
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1962:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1963
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 16]
 mov SELF, [___translate] ; translate
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1963:
; ((t743 . rcx))
; _ret_75^10987 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1964
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1964:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1956:
; ((t736 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1952
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1952:
; ((t730 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1294
 mov rax, ALLOC
 add ALLOC, 16
; _failure_75^10964 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L579
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^10966 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_78^10967 = rdi
 mov rdi, rax
; _r1_80^10970 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L581
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^10972 = r9
 mov r9, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_83^10973 = r10
 mov r10, rax
; _r2_85^10976 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L583
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10978 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^10978
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L584
L583:
 mov rax, FALSE
L584:
 cmp rax, FALSE
 je L585
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_86^10980 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _w_86^10980
; _r3_88^10982 = local #1
 mov [locals + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1953
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t733 = local #2
 mov [locals + 16], rax
 mov rax, [SELF + 16]
; _x_45^10983 = local #3
 mov [locals + 24], rax
 mov rax, [___temporary_2dregisters] ; temporary-registers
; _lst_46^10984 = local #4
 mov [locals + 32], rax
 mov rax, [locals + 24] ; _x_45^10983
 mov r11, [locals + 32] ; _lst_46^10984
 CALL member_eq
 cmp rax, FALSE
 je L587
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1954
 mov [ALLOC + 16], r12
 mov rax, [locals + 16] ; t733
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___generate_2dconditional_2dmove] ; generate-conditional-move
 mov rdx, rsi
 mov rsi, [locals + 0] ; _w_86^10980
 mov rdi, r9
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L587:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1955
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov rax, [locals + 16] ; t733
 mov [ALLOC + 32], rax
 mov rax, [locals + 8] ; _r3_88^10982
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, r9
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L588:
L585:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1294
L586:
L581:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1294
L582:
L579:
 mov rcx, [SELF + 24]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1294
L580:
f_1955:
; ()
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov rsi, [SELF + 40]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dconditional_2dmove] ; generate-conditional-move
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1954:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1953:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1294:
; ((k731 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L589 ; 
 mov rsi, L590 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1263:
; ((k616 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1264
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10593 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10903 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L591
 mov rax, [SELF + 24]
; _x_44^10906 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10904 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10907 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10905 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L593 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L594
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L596
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10911 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L597
L596:
 mov rax, FALSE
L597:
 cmp rax, FALSE
 je L598
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10913 = r8
 mov r8, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1292
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_66^10915 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1293
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_67^10922 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L600
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^10925 = r12
 mov r12, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^10926 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, L602 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L603
 sub rsp, 8
 mov rax, [locals + 0] ; _x_70^10926
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L605
 mov rax, [locals + 0] ; _x_70^10926
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10932 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^10932
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L606
L605:
 mov rax, FALSE
L606:
 cmp rax, FALSE
 je L607
 mov rax, [locals + 0] ; _x_70^10926
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^10934 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, [locals + 8] ; _w_72^10934
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1292
L607:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1293
L608:
L603:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1293
L604:
L600:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1293
L601:
L598:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1264
L599:
L594:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1264
L595:
L591:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1264
L592:
f_1293:
; ((k728 . rcx))
 mov rax, [SELF + 24]
; _name_68^10923 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1292
f_1292:
; ((_name_66^10916 . rdx) (k724 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1949
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___label] ; label
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1949:
; ((t725 . rcx))
 mov rax, [SELF + 32]
; _y_46^10921 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^10918 = rdx
 mov rdx, rax
 mov rax, [___primitives] ; primitives
; _y_46^10919 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___primitives], rax ; (set! primitives ...)
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1950
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdi, [SELF + 32]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1950:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1264:
; ((k617 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1265
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10594 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10889 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L609
 mov rax, [SELF + 24]
; _x_44^10892 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10890 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10893 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10891 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L611 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L612
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L614
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10897 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L615
L614:
 mov rax, FALSE
L615:
 cmp rax, FALSE
 je L616
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10899 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1942
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___translate_2dstore] ; translate-store
 mov rdx, r8
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1291
 mov rsi, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L616:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1265
L617:
L612:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1265
L613:
L609:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1265
L610:
f_1291:
; ((_reg_63^10902 . rdx) (k722 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1948
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1948:
; ((t723 . rcx))
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1942:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1943
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rsi, L618 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1943:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1944
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, 1 ; '0
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1944:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1945
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, [___alloc_2dregister] ; alloc-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1945:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1947
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___cells] ; cells
 mov rdx, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1947:
; ((t721 . rcx))
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1946
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dadd] ; generate-add
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1946:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1265:
; ((k618 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1266
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10595 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10876 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L619
 mov rax, [SELF + 24]
; _x_44^10879 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10877 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10880 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10878 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L621 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L622
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L624
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10884 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L625
L624:
 mov rax, FALSE
L625:
 cmp rax, FALSE
 je L626
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10886 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1939
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, r8
 mov rsi, [SELF + 32]
 mov SELF, [___translate] ; translate
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L626:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1266
L627:
L622:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1266
L623:
L619:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1266
L620:
f_1939:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1941
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1941:
; ((t715 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 16]
 mov rdi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1940
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dslot_2dref] ; generate-slot-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1940:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1266:
; ((k619 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1267
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10596 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10842 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L628
 mov rax, [SELF + 24]
; _x_44^10845 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10843 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10846 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10844 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L630 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L631
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L633
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^10850 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^10851 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L635
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10856 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L636
L635:
 mov rax, FALSE
L636:
 cmp rax, FALSE
 je L637
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^10858 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1938
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rdx, r8
 mov rsi, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L637:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1267
L638:
L633:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1267
L634:
L631:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1267
L632:
L628:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1267
L629:
f_1938:
; ((t712 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1934
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1934:
; ((t707 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1290
 mov rax, ALLOC
 add ALLOC, 16
; _failure_70^10863 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L639
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^10865 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^10866 = rdi
 mov rdi, rax
; _r1_75^10869 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L641
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10871 = r9
 mov r9, rax
 mov rax, r9
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L642
L641:
 mov rax, FALSE
L642:
 cmp rax, FALSE
 je L643
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^10873 = r9
 mov r9, rax
; _r2_78^10875 = r10
 mov r10, r9
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1937
 mov [ALLOC + 16], r8
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L643:
 mov rcx, [SELF + 16]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1290
L644:
L639:
 mov rcx, [SELF + 16]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1290
L640:
f_1937:
; ((t711 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1935
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdi, [SELF + 40]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1935:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1936
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1936:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1290:
; ((k708 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L645 ; 
 mov rsi, L646 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1267:
; ((k620 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1268
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10597 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10806 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L647
 mov rax, [SELF + 24]
; _x_44^10809 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10807 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10810 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10808 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L649 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L650
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L652
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10814 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10815 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1288
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
; _sk2_68^10818 = r10
 mov r10, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1289
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_69^10827 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L654
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^10830 = local #0
 mov [locals + 0], rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^10831 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _w_71^10830
 mov r11, L656 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L657
 sub rsp, 8
 mov rax, [locals + 8] ; _x_72^10831
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L659
 mov rax, [locals + 8] ; _x_72^10831
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10837 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^10837
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L660
L659:
 mov rax, FALSE
L660:
 cmp rax, FALSE
 je L661
 mov rax, [locals + 8] ; _x_72^10831
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^10839 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rdx, [locals + 16] ; _w_74^10839
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1288
L661:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1289
L662:
L657:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1289
L658:
L654:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1289
L655:
L652:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1268
L653:
L650:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1268
L651:
L647:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1268
L648:
f_1289:
; ((k706 . rcx))
 mov rax, [SELF + 24]
; _opr_70^10828 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1288
f_1288:
; ((_opr_68^10819 . rdx) (k695 . rcx))
 mov rax, [SELF + 32]
; _args_72^10820 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1926
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1926:
; ((t696 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L663
 sub rsp, 16
 mov rax, [___temporary_2dregisters] ; temporary-registers
; _x_45^10823 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_45^10822 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1932
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____3c_3d] ; <=
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L663:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1268
L664:
f_1932:
; ((t703 . rcx))
; _tmp_73^10821 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1933
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t705 = rsi
 mov rsi, rax
 mov rax, rcx
 cmp rax, FALSE
 je L665
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1933
L665:
 mov rcx, rsi
 mov rdx, L667 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L666:
f_1933:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1928
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t702 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
; _x_44^10826 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^10825 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L668
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L668:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1928
L669:
f_1928:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1931
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___string_2dsplit] ; string-split
 mov rsi, L670 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1931:
; ((t701 . rcx))
 mov rdx, [___generate_2dinstruction] ; generate-instruction
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1929
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1929:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1930
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1930:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1268:
; ((k621 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1269
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10598 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10748 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L671
 mov rax, [SELF + 24]
; _x_44^10751 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10749 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10752 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10750 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L673 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L674
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L676
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10756 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^10757 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1284
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
; _sk2_67^10760 = r10
 mov r10, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1287
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_68^10791 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L678
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^10794 = local #0
 mov [locals + 0], rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^10795 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _w_70^10794
 mov r11, L680 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L681
 sub rsp, 8
 mov rax, [locals + 8] ; _x_71^10795
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L683
 mov rax, [locals + 8] ; _x_71^10795
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10801 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^10801
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L684
L683:
 mov rax, FALSE
L684:
 cmp rax, FALSE
 je L685
 mov rax, [locals + 8] ; _x_71^10795
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^10803 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rdx, [locals + 16] ; _w_73^10803
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1284
L685:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1287
L686:
L681:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1287
L682:
L678:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1287
L679:
L676:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1269
L677:
L674:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1269
L675:
L671:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1269
L672:
f_1287:
; ((k694 . rcx))
 mov rax, [SELF + 24]
; _opr_69^10792 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1284
f_1284:
; ((_opr_67^10761 . rdx) (k681 . rcx))
 mov rax, [SELF + 32]
; _x_44^10762 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L687
 mov rax, [SELF + 32]
; _x_44^10765 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^10763 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^10766 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^10764 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1285
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
; _sk2_77^10767 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1286
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_78^10776 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L689
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^10779 = r10
 mov r10, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^10780 = r12
 mov r12, rax
 mov rax, r10
 mov r11, L691 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L692
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L694
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10786 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^10786
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L695
L694:
 mov rax, FALSE
L695:
 cmp rax, FALSE
 je L696
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^10788 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, [locals + 0] ; _w_83^10788
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1285
L696:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1286
L697:
L692:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1286
L693:
L689:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1286
L690:
L687:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1269
L688:
f_1286:
; ((k693 . rcx))
 mov rax, [SELF + 24]
; _cnd_79^10777 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1285
f_1285:
; ((_cnd_77^10768 . rdx) (k682 . rcx))
 mov rax, [SELF + 40]
; _args_81^10769 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1918
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1918:
; ((t683 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L698
 sub rsp, 16
 mov rax, [___temporary_2dregisters] ; temporary-registers
; _x_45^10772 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^10771 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1924
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____3c_3d] ; <=
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L698:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1269
L699:
f_1924:
; ((t690 . rcx))
; _tmp_82^10770 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1925
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t692 = rsi
 mov rsi, rax
 mov rax, rcx
 cmp rax, FALSE
 je L700
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1925
L700:
 mov rcx, rsi
 mov rdx, L702 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L701:
f_1925:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1920
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t689 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
; _x_44^10775 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^10774 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L703
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L703:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1920
L704:
f_1920:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1923
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov SELF, [___string_2dsplit] ; string-split
 mov rsi, L705 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1923:
; ((t688 . rcx))
 mov rdx, [___generate_2dinstruction] ; generate-instruction
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1921
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1921:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1922
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___generate_2dconditional_2dset] ; generate-conditional-set
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1922:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1269:
; ((k622 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1270
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10599 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10670 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L706
 mov rax, [SELF + 24]
; _x_44^10673 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10671 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10674 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10672 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L708 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L709
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L711
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10678 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^10679 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1279
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
; _sk2_67^10682 = r10
 mov r10, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1283
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_68^10733 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L713
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^10736 = local #0
 mov [locals + 0], rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^10737 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _w_70^10736
 mov r11, L715 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L716
 sub rsp, 8
 mov rax, [locals + 8] ; _x_71^10737
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L718
 mov rax, [locals + 8] ; _x_71^10737
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10743 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^10743
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L719
L718:
 mov rax, FALSE
L719:
 cmp rax, FALSE
 je L720
 mov rax, [locals + 8] ; _x_71^10737
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^10745 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rdx, [locals + 16] ; _w_73^10745
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1279
L720:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1283
L721:
L716:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1283
L717:
L713:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1283
L714:
L711:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1270
L712:
L709:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1270
L710:
L706:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1270
L707:
f_1283:
; ((k680 . rcx))
 mov rax, [SELF + 24]
; _type_69^10734 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1279
f_1279:
; ((_type_67^10683 . rdx) (k645 . rcx))
 mov rax, [SELF + 32]
; _x_44^10684 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L722
 mov rax, [SELF + 32]
; _x_44^10687 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^10685 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^10688 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^10686 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1280
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
; _sk2_77^10689 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1282
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_78^10718 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L724
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^10721 = r10
 mov r10, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^10722 = r12
 mov r12, rax
 mov rax, r10
 mov r11, L726 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L727
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L729
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10728 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^10728
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L730
L729:
 mov rax, FALSE
L730:
 cmp rax, FALSE
 je L731
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^10730 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, [locals + 0] ; _w_83^10730
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1280
L731:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1282
L732:
L727:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1282
L728:
L724:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1282
L725:
L722:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1270
L723:
f_1282:
; ((k679 . rcx))
 mov rax, [SELF + 24]
; _size_79^10719 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1280
f_1280:
; ((_size_77^10690 . rdx) (k646 . rcx))
 mov rax, [SELF + 40]
; _args_81^10691 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1892
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov [ALLOC + 48], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1892:
; ((t647 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L733
 sub rsp, 16
 mov rax, [___temporary_2dregisters] ; temporary-registers
; _x_45^10694 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^10693 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1916
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____3c_3d] ; <=
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L733:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1270
L734:
f_1916:
; ((t676 . rcx))
; _tmp_82^10692 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1917
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t678 = rsi
 mov rsi, rax
 mov rax, rcx
 cmp rax, FALSE
 je L735
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1917
L735:
 mov rcx, rsi
 mov rdx, L737 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L736:
f_1917:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1894
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___translate_2dinline_2darguments] ; translate-inline-arguments
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1894:
; ((t649 . rcx))
; _regs_82^10696 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^10700 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 33 ; '16
 and rax, r11
  or rax, 1
; _n_44^10699 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
 je L738
 mov rax, rsi
 jmp L739
L738:
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L739:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^10698 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; _bytevec_83^10697 = rsi
 mov rsi, rax
 SET_T rax
 mov [___allocating], rax ; (set! allocating ...)
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1895
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t675 = rdi
 mov rdi, rax
 mov rax, [SELF + 16]
; _x_44^10705 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 33 ; '16
 and rax, r11
  or rax, 1
; _n_44^10704 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
 je L740
 mov rax, r8
 jmp L741
L740:
 mov rax, r8
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L741:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^10703 = r8
 mov r8, rax
 mov rax, r8
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L742
 mov SELF, [___generate_2dalloc_2dalignment] ; generate-alloc-alignment
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L742:
 mov SELF, rdi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1895
L743:
f_1895:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_84^10708 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1281
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t669 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1896
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1281
f_1896:
; ()
 mov rax, [SELF + 48]
; _x_44^10716 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1911
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___sub1] ; sub1
 mov rdx, [___word_2dsize] ; word-size
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1911:
; ((t668 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1910
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [____25_2a] ; %*
 mov rsi, 17 ; '8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1910:
; ((t667 . rcx))
 mov rax, [SELF + 56]
 mov r11, rcx
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
; t666 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_45^10715 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 or rax, r11
; t665 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1897
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 24]
 mov rsi, rdi
 mov rdi, [SELF + 48]
 mov r8, L744 ; 
 mov r9, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1897:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1898
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, 1 ; '0
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1898:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1899
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, [___alloc_2dregister] ; alloc-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1899:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1901
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t658 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L745
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1904
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___cells] ; cells
 mov rdx, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L745:
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1907
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, [SELF + 24]
 mov SELF, [___add1] ; add1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L746:
f_1907:
; ((t664 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1906
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1906:
; ((t663 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1905
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1905:
; ((t662 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1904:
; ((t661 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1902
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1902:
; ((t659 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1903
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1903:
; ((t660 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, L747 ; 
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov r8, L748 ; 
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_1901:
; ((t657 . rcx))
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1900
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dadd] ; generate-add
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1900:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1281:
; ((_off_86^10710 . rsi) (_regs_85^10709 . rdx) (k671 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L749
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L749:
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1915
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___cells] ; cells
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L750:
f_1915:
; ((t674 . rcx))
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1913
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rax, [SELF + 32]
; _x_44^10712 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdi, rax
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rdx, [___alloc_2dregister] ; alloc-register
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1913:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1914
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1914:
; ((t673 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^10713 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1281
f_1270:
; ((k623 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1271
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10600 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10659 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L751
 mov rax, [SELF + 24]
; _x_44^10661 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10660 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L752
L751:
 mov rax, FALSE
L752:
 cmp rax, FALSE
 je L753
 mov rax, [SELF + 24]
; _x_44^10663 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10662 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1277
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_58^10664 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1278
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_59^10665 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, L755 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L756
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1277
L756:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1278
L757:
L753:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1271
L754:
f_1278:
; ((k644 . rcx))
 mov rax, [SELF + 32]
; _x_44^10666 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L758 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L759
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1277
L759:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1271
L760:
f_1277:
; ((k642 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1891
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rsi, L761 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1891:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1271:
; ((k624 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1272
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_55^10601 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10646 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L762
 mov rax, [SELF + 24]
; _x_44^10649 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10647 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10650 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10648 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L764 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L765
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L767
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10654 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L768
L767:
 mov rax, FALSE
L768:
 cmp rax, FALSE
 je L769
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10656 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1890
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, r8
 mov rsi, 5 ; '2
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L769:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1272
L770:
L765:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1272
L766:
L762:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1272
L763:
f_1890:
; ((t641 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1889
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1889:
; ((t640 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [___self_2dregister] ; self-register
 mov rdi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1888
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dslot_2dref] ; generate-slot-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1888:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1272:
; ((k625 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1273
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_55^10602 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10627 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L771
 mov rax, [SELF + 24]
; _x_44^10630 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10628 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10631 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10629 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L773 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L774
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L776
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10635 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L777
L776:
 mov rax, FALSE
L777:
 cmp rax, FALSE
 je L778
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10637 = r8
 mov r8, rax
; _c_62^10639 = r9
 mov r9, r8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1884
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
; t635 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1885
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r10
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___fixnum_3f] ; fixnum?
 mov rdx, r8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L778:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1273
L779:
L774:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1273
L775:
L771:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1273
L772:
f_1885:
; ((t636 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L780
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1886
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___encode_2dfixnum] ; encode-fixnum
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L780:
 mov rax, [SELF + 16]
; _y_45^10641 = rdx
 mov rdx, rax
 SET_T rax
 mov r11, rdx
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L782
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov SELF, [___generate_2dtrue_2dref] ; generate-true-ref
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L782:
 mov rax, [SELF + 16]
; _y_45^10643 = rdx
 mov rdx, rax
 mov rax, FALSE
 mov r11, rdx
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L784
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov SELF, [___generate_2dmove] ; generate-move
 mov rsi, [___false_2dregister] ; false-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L784:
 mov rax, [SELF + 16]
; _x_44^10644 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L786
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rsi, L788 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L786:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1887
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___register_2dliteral] ; register-literal
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L787:
L785:
L783:
L781:
f_1887:
; ((t638 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1886:
; ((t637 . rcx))
 mov rdx, [SELF + 32]
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, L789 ; 
 mov r8, [SELF + 16]
 mov SELF, [___generate_2dimmediate_2dref] ; generate-immediate-ref
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_1884:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1273:
; ((k626 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1274
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_55^10603 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10613 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L790
 mov rax, [SELF + 24]
; _x_44^10616 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10614 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10617 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10615 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L792 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L793
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L795
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^10621 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^10622 = r9
 mov r9, rax
; _id_64^10625 = r10
 mov r10, r8
; _args_68^10626 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1882
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L795:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1274
L796:
L793:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1274
L794:
L790:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1274
L791:
f_1882:
; ((t632 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L797
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1883
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov SELF, [___translate_2dcall_2dto_2dknown_2dtarget] ; translate-call-to-known-target
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L797:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1274
L798:
f_1883:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1274:
; ((k627 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1275
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_55^10604 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10606 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L799
 mov rax, [SELF + 16]
; _x_44^10609 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_57^10607 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10610 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_58^10608 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1880
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L799:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1275
L800:
f_1880:
; ((t630 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L801
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1881
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___translate_2dcall] ; translate-call
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L801:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1275
L802:
f_1881:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1275:
; ((k628 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1276
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L803 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1276:
; ((k629 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L804 ; 
 mov rsi, L805 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1254:
; ((_args_52^10581 . rdx) (k846 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___translate_2fregisters] ; translate/registers
 mov rsi, [___temporary_2dregisters] ; temporary-registers
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1253:
; ((k847 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2031
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, [___label_2dcounter] ; label-counter
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2031:
; ((t850 . rcx))
 mov rax, rcx
 mov [___label_2dcounter], rax ; (set! label-counter ...)
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2029
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2029:
; ((t848 . rcx))
 mov rdx, L806 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1252:
; ((_c_52^10574 . rdx) (k852 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2032
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___label] ; label
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2032:
; ((t853 . rcx))
 mov rax, [SELF + 24]
; _y_46^10579 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^10576 = rdx
 mov rdx, rax
 mov rax, [___literals_2dto_2dbe_2dtranslated] ; literals-to-be-translated
; _y_46^10577 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___literals_2dto_2dbe_2dtranslated], rax ; (set! literals-to-be-translated ...)
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1251:
; ((_n_52^10568 . rdx) (k855 . rcx))
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^10570 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L807
 mov rax, rsi
 jmp L808
L807:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L808:
 cmp rax, FALSE
 je L809
 mov rax, rdx
 test rax, 1
 je L811
 sub rsp, 32
 mov rax, [___fixnum_2drange] ; fixnum-range
; _x_44^10573 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, [___fixnum_2drange] ; fixnum-range
; _x_44^10572 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov SELF, [____3c_3d] ; <=
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L811:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L812:
L809:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L810:
f_1249:
; ((k856 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2033
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___generate_2dsection] ; generate-section
 mov rdx, L813 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2033:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2034
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rdx, L814 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2034:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2035
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___for_2deach] ; for-each
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1250
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [___symbol_2dtable] ; symbol-table
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1250:
; ((_l_52^10566 . rdx) (k860 . rcx))
 sub rsp, 16
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_2035:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rdx, L815 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1246:
; ((k861 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2036
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___generate_2dsection] ; generate-section
 mov rdx, L816 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2036:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1247
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [___string_2dliterals] ; string-literals
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1247:
; ((_expr_52^10551 . rdx) (k863 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1248
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^10553 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L817
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_55^10555 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_56^10556 = r8
 mov r8, rax
; _l_58^10559 = r9
 mov r9, rdi
; _str_60^10560 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2037
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___generate_2dalign] ; generate-align
 mov rdx, [___word_2dsize] ; word-size
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L817:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1248
L818:
f_2037:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2038
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2038:
; ()
 mov rdx, L819 ; 
 mov rax, [SELF + 16]
; _s_45^10561 = rcx
 mov rcx, rax
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2040
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___typecode] ; typecode
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2040:
; ((t868 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2039
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2039:
; ()
 mov rax, [SELF + 24]
; _s_45^10563 = rcx
 mov rcx, rax
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _x_44^10562 = rcx
 mov rcx, rax
 mov rax, rcx
 test rax, 1
 je L820
 mov rax, rcx
 mov r11, 1 ; '0
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L821
L820:
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L822
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L823
L822:
 mov rax, FALSE
L823:
L821:
 cmp rax, FALSE
 je L824
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___generate_2ddefstring] ; generate-defstring
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L824:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L825:
f_1248:
; ((k864 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L826 ; 
 mov rsi, L827 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1245:
; ((_len_53^10515 . rsi) (_type_52^10514 . rdx) (k869 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2042
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t872 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, L828 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L829
 mov SELF, rdi
 mov rcx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L829:
 mov rax, rdx
 mov r11, L831 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L832
 mov SELF, rdi
 mov rcx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L832:
 mov rax, rdx
 mov r11, L834 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L835
 mov SELF, rdi
 mov rcx, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L835:
 mov rax, rdx
 mov r11, L837 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L838
 mov SELF, rdi
 mov rcx, 7 ; '3
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L838:
 mov rax, rdx
 mov r11, L840 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L841
 mov SELF, rdi
 mov rcx, 9 ; '4
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L841:
 mov rax, rdx
 mov r11, L843 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L844
 mov SELF, rdi
 mov rcx, 11 ; '5
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L844:
 mov rax, rdx
 mov r11, L846 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L847
 mov SELF, rdi
 mov rcx, 13 ; '6
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L847:
 mov rax, rdx
 mov r11, L849 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L850
 mov SELF, rdi
 mov rcx, 15 ; '7
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L850:
 mov rax, rdx
 mov r11, L852 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L853
 mov SELF, rdi
 mov rcx, 17 ; '8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L853:
 mov rax, rdx
 mov r11, L855 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L856
 mov SELF, rdi
 mov rcx, 19 ; '9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L856:
 mov rax, rdx
 mov r11, L858 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L859
 mov SELF, rdi
 mov rcx, 21 ; '10
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L859:
 mov rax, rdx
 mov r11, L861 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L862
 mov SELF, rdi
 mov rcx, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L862:
 mov rax, rdx
 mov r11, L864 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L865
 mov SELF, rdi
 mov rcx, 35 ; '17
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L865:
 mov rax, rdx
 mov r11, L867 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L868
 mov SELF, rdi
 mov rcx, 37 ; '18
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L868:
 mov rax, rdx
 mov r11, L870 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L871
 mov SELF, rdi
 mov rcx, 65 ; '32
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2042
L871:
 mov SELF, [____25error] ; %error
 mov rcx, rdi
 mov rsi, rdx
 mov rdx, L873 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L872:
L869:
L866:
L863:
L860:
L857:
L854:
L851:
L848:
L845:
L842:
L839:
L836:
L833:
L830:
f_2042:
; ((t871 . rcx))
 mov rax, rcx
 mov r11, 113 ; '56
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
; t870 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_45^10517 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 or rax, r11
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1242:
; ((k873 . rcx))
 mov rax, null ; 
 mov [___string_2dliterals], rax ; (set! string-literals ...)
 mov rax, null ; 
 mov [___symbol_2dtable], rax ; (set! symbol-table ...)
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2043
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___generate_2dsection] ; generate-section
 mov rdx, L874 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2043:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_52^10499 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1243
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t879 = rdx
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2044
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1243
f_2044:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2045
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dstrings] ; generate-strings
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2045:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dsymbol_2dtable] ; generate-symbol-table
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1243:
; ((k881 . rcx))
 mov rax, [___literals_2dto_2dbe_2dtranslated] ; literals-to-be-translated
; _x_44^10500 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L875
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L875:
 mov rax, [___literals_2dto_2dbe_2dtranslated] ; literals-to-be-translated
; _x_44^10503 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_53^10502 = rdx
 mov rdx, rax
 mov rax, [___literals_2dto_2dbe_2dtranslated] ; literals-to-be-translated
; _x_44^10504 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___literals_2dto_2dbe_2dtranslated], rax ; (set! literals-to-be-translated ...)
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1244
 mov rax, ALLOC
 add ALLOC, 16
; _failure_55^10506 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2047
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t885 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L877
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10508 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10509 = r9
 mov r9, rax
 mov SELF, [___translate_2dliteral] ; translate-literal
 mov rcx, rdi
 mov rdx, r8
 mov rsi, r9
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L877:
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1244
L878:
L876:
f_2047:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1243
f_1244:
; ((k884 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L879 ; 
 mov rsi, L880 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1240:
; ((_top_52^10493 . rdx) (k887 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2055
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2055:
; ((t897 . rcx))
 mov rax, rcx
 mov [___closures_2dto_2dbe_2dtranslated], rax ; (set! closures-to-be-translated ...)
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2050
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dsection] ; generate-section
 mov rdx, L881 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2050:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2051
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rdx, L882 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2051:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_53^10494 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1241
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t891 = rdx
 mov rdx, rax
 mov rcx, [SELF + 16]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1241
f_1241:
; ((k893 . rcx))
 mov rax, [___closures_2dto_2dbe_2dtranslated] ; closures-to-be-translated
; _x_44^10495 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L883
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L883:
 mov rax, [___closures_2dto_2dbe_2dtranslated] ; closures-to-be-translated
; _x_44^10497 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_54^10496 = rdx
 mov rdx, rax
 mov rax, [___closures_2dto_2dbe_2dtranslated] ; closures-to-be-translated
; _x_44^10498 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___closures_2dto_2dbe_2dtranslated], rax ; (set! closures-to-be-translated ...)
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2053
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___translate_2dclosure] ; translate-closure
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L884:
f_2053:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1241
f_1238:
; ((_defs_52^10491 . rdx) (k899 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2056
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___generate_2dsection] ; generate-section
 mov rdx, L885 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2056:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2057
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rdx, L886 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2057:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2058
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1239
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1239:
; ((_def_53^10492 . rdx) (k903 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2060
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [___mangle_2didentifier] ; mangle-identifier
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2060:
; ((t905 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2059
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2059:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2ddefword] ; generate-defword
 mov rdx, L887 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_2058:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dlabel] ; generate-label
 mov rdx, L888 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1237:
; ((_unused_54^10490 . rdi) (_code_53^10489 . rsi) (_defs_52^10488 . rdx) (k906 . rcx))
 mov rax, 1 ; '0
 mov [___label_2dcounter], rax ; (set! label-counter ...)
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2066
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rdx, [___mangle_2dfeature_2dname] ; mangle-feature-name
 mov rsi, [___implementation_2dfeatures] ; implementation-features
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2066:
; ((t916 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2061
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___generate_2dheader] ; generate-header
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2061:
; ()
 mov rax, null ; 
 mov [___literals_2dto_2dbe_2dtranslated], rax ; (set! literals-to-be-translated ...)
 mov rax, null ; 
 mov [___primitives], rax ; (set! primitives ...)
 mov rax, [SELF + 40]
 mov [___unused_2dglobal_2dvariables], rax ; (set! unused-global-variables ...)
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2062
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___generate_2dclosures] ; generate-closures
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2062:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2063
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dglobals] ; generate-globals
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2063:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2064
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dliterals] ; generate-literals
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2064:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2065
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___generate_2dprimitives] ; generate-primitives
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2065:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dtrailer] ; generate-trailer
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1235:
; ((_args_52^10477 . rdx) (k917 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, [___verbose] ; verbose
 cmp rax, FALSE
 je L889
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _out_53^10478 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1236
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2067
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov SELF, [___for_2deach] ; for-each
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L889:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L890:
f_2067:
; ()
 mov rax, [SELF + 24]
; _p_45^10482 = rcx
 mov rcx, rax
; _p_46^10484 = rdx
 mov rdx, rcx
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^10486 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, L891 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, rdx
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1236:
; ((_x_54^10479 . rdx) (k921 . rcx))
 mov rax, [SELF + 16]
; _p_47^10481 = rsi
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdi, rsi
 mov rsi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1234:
; ((_options_53^10476 . rsi) (_fname_52^10475 . rdx) (k922 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2069
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___read_2dforms] ; read-forms
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2069:
; ((t923 . rcx))
 mov rdx, [___compile] ; compile
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1221:
; ((_options_53^10403 . rsi) (_code_52^10402 . rdx) (k924 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, 1 ; '0
 mov [___lambda_2did_2dcounter], rax ; (set! lambda-id-counter ...)
 mov rax, 1 ; '0
 mov [___dropped_2dglobal_2dcount], rax ; (set! dropped-global-count ...)
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2132
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___sub1] ; sub1
 mov rax, [___argument_2dregisters] ; argument-registers
; _x_45^10404 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL list_length
 mov rdx, rax
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2132:
; ((t1017 . rcx))
 mov rax, undefined ; dropped: argument-register-count
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2128
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, L892 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___collect_2doptions] ; collect-options
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2128:
; ((t1013 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2131
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rdx, [___target_2darch] ; target-arch
 mov rsi, [___target_2dendianness] ; target-endianness
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2131:
; ((t1016 . rcx))
 mov rdx, [___id] ; id
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2129
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___filter] ; filter
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2129:
; ((t1014 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2130
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rdx, [___default_2dconfiguration] ; default-configuration
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2130:
; ((t1015 . rcx))
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 16]
 mov rdi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2127
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___append] ; append
 mov r8, [___basic_2dimplementation_2dfeatures] ; basic-implementation-features
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2127:
; ((t1011 . rcx))
 mov rax, rcx
 mov [___implementation_2dfeatures], rax ; (set! implementation-features ...)
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2125
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, L893 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___collect_2doptions] ; collect-options
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2125:
; ((t1008 . rcx))
 mov rax, L894 ; 
; _str_47^10406 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL copy_to_buffer
  LIBCALL1 getenv, buffer
  test rax, rax
  if z
  mov rax, FALSE
  else
  CALL alloc_zstring
  endif
; _lp_54^10405 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2126
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
; t1010 = rsi
 mov rsi, rax
 mov rax, rdx
 cmp rax, FALSE
 je L895
 sub rsp, 8
 mov [rsp + 0], rdx
 mov SELF, [___string_2dsplit] ; string-split
 mov rcx, rsi
 mov rsi, L897 ; 
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L895:
 mov SELF, rsi
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2126
L896:
f_2126:
; ((t1009 . rcx))
 mov rdx, [SELF + 40]
 mov rsi, L898 ; 
 mov rdi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2124
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___append] ; append
 mov r8, L899 ; 
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2124:
; ((t1006 . rcx))
 mov rax, rcx
 mov [___file_2dsearch_2dpath], rax ; (set! file-search-path ...)
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2123
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, L900 ; 
 mov rsi, [SELF + 16]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2123:
; ((t1004 . rcx))
 mov rax, rcx
 mov [___verbose], rax ; (set! verbose ...)
 mov rax, [SELF + 16]
; _v_54^10408 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1222
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_55^10409 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2074
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t1003 = rdi
 mov rdi, rax
; _x_44^10411 = r8
 mov r8, rdx
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L901
; _x_44^10414 = r8
 mov r8, rdx
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10412 = r8
 mov r8, rax
; _x_44^10415 = r9
 mov r9, rdx
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10413 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L903 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L904
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L906
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10419 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L907
L906:
 mov rax, FALSE
L907:
 cmp rax, FALSE
 je L908
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10421 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L910
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10424 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r12
 mov r11, L912 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L913
 mov rcx, rdi
 mov rax, [SELF + 16]
; _x_44^10430 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^10430
; _x_44^10432 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^10432
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10431 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^10431
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov SELF, [___expand_2dprogram] ; expand-program
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L913:
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1222
L914:
L910:
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1222
L911:
L908:
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1222
L909:
L904:
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1222
L905:
L901:
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1222
L902:
f_2074:
; ((t931 . rcx))
; _prg_54^10407 = rdx
 mov rdx, rcx
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1224
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rcx, [SELF + 16]
 mov SELF, [___call_2dwith_2dcurrent_2dcontinuation] ; call-with-current-continuation
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1224:
; ((_return_55^10433 . rdx) (k932 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _stop_56^10434 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1225
 mov [ALLOC + 16], rdx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2075
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t995 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2118
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L915 ; 
 mov rsi, [SELF + 24]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2118:
; ((t996 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L916
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2119
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___for_2deach] ; for-each
 mov rdx, [___print] ; print
 mov rsi, [___implementation_2dfeatures] ; implementation-features
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L916:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2075
L917:
f_2119:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2075:
; ()
 mov rax, [___implementation_2dfeatures] ; implementation-features
; _lst_46^10436 = rcx
 mov rcx, rax
 mov rax, L918 ; 
 mov r11, rcx
 CALL member_eq
 mov [___enable_2dpic], rax ; (set! enable-pic ...)
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2117
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___generate_2dcond_2dexpand] ; generate-cond-expand
 mov rdx, [___implementation_2dfeatures] ; implementation-features
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2117:
; ((t994 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2076
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___expand_2dsyntax] ; expand-syntax
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2076:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2077
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t991 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2115
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, L919 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___option] ; option
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2115:
; ((t992 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L920
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2116
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___pp] ; pp
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L920:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2077
L921:
f_2116:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2077:
; ()
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2078
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____4e_42] ; NB
 mov rdx, L922 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2078:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2079
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___expand_2dsyntax] ; expand-syntax
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2079:
; ((t940 . rcx))
; _code_57^10437 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2080
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t988 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2113
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, L923 ; 
 mov rsi, [SELF + 24]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2113:
; ((t989 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L924
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2114
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___pp] ; pp
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L924:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2080
L925:
f_2114:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2080:
; ((t941 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2081
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, L926 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2081:
; ((t942 . rcx))
; _dumpcc_59^10439 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2082
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, L927 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2082:
; ((t943 . rcx))
; _dumpcps_60^10440 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2112
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, L928 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2112:
; ((t987 . rcx))
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t944 = rdx
 mov rdx, rax
; _dumpserial_61^10441 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2084
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, L929 ; 
 mov rsi, [SELF + 32]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2084:
; ((t945 . rcx))
; _outfile_62^10443 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2085
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov SELF, [____4e_42] ; NB
 mov rdx, L930 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2085:
; ((t946 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2086
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 16]
 mov SELF, [___canonicalize_2dexpression] ; canonicalize-expression
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2086:
; ((t947 . rcx))
; _code_64^10445 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2087
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rcx, ALLOC
 add ALLOC, 80
 mov SELF, [____4e_42] ; NB
 mov rdx, L931 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2087:
; ((t948 . rcx))
 mov rcx, [SELF + 64]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1226
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1227
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rsi, ALLOC
 add ALLOC, 64
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1227:
; ((_t1_67^10448 . rsi) (_t1_66^10447 . rdx) (k950 . rcx))
; _defs_68^10449 = rdi
 mov rdi, rdx
; _code_69^10450 = r8
 mov r8, rsi
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2088
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov [ALLOC + 72], r8
 mov rax, ALLOC
 add ALLOC, 80
; t985 = r9
 mov r9, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L932
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2111
 mov [ALLOC + 16], r9
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, rsi
 mov rsi, [SELF + 40]
 mov SELF, [___dump_2dexpressions] ; dump-expressions
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L932:
 mov SELF, r9
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2088
L933:
f_2111:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2088:
; ((t951 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2089
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov SELF, [____4e_42] ; NB
 mov rdx, L934 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2089:
; ((t952 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2090
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 16]
 mov SELF, [___cp] ; cp
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2090:
; ((t953 . rcx))
; _code_72^10453 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2091
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rcx, ALLOC
 add ALLOC, 80
 mov SELF, [____4e_42] ; NB
 mov rdx, L935 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2091:
; ((t954 . rcx))
 mov rcx, [SELF + 64]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1228
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1229
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rsi, ALLOC
 add ALLOC, 64
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1229:
; ((_t1_75^10456 . rsi) (_t1_74^10455 . rdx) (k956 . rcx))
; _code_76^10457 = rdi
 mov rdi, rdx
; _unused_77^10458 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2092
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, [____4e_42] ; NB
 mov rdx, L936 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2092:
; ((t957 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2093
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 16]
 mov SELF, [___simplify] ; simplify
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2093:
; ((t958 . rcx))
; _code_79^10460 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2094
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; t974 = rsi
 mov rsi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2103
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, L937 ; 
 mov rsi, [SELF + 16]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2103:
; ((t975 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L938
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2104
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 40]
 mov SELF, [___dump_2dexpressions] ; dump-expressions
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L938:
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2105
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, L940 ; 
 mov rsi, [SELF + 56]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L939:
f_2105:
; ((t977 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L941
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2106
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1230
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 32]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L941:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2109
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, L943 ; 
 mov rsi, [SELF + 40]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L942:
f_2109:
; ((t983 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L944
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2110
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 40]
 mov SELF, [___dump_2dexpressions] ; dump-expressions
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L944:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2094
L945:
f_2110:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_1230:
; ((_var_80^10462 . rdx) (k979 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2107
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 SET_T rsi
 mov rdi, [____25standard_2doutput_2dport] ; %standard-output-port
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2107:
; ()
 mov rax, [____25standard_2doutput_2dport] ; %standard-output-port
; _p_46^10465 = rcx
 mov rcx, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^10467 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, L946 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, rcx
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2106:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2104:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2094:
; ((t959 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2095
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov SELF, [____4e_42] ; NB
 mov rdx, L947 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2095:
; ((t960 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2096
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 80]
 mov SELF, [___cc] ; cc
 mov rsi, null ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2096:
; ((t961 . rcx))
; _ccode_82^10470 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2102
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, L948 ; 
 mov rsi, [SELF + 72]
 mov SELF, [___option] ; option
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2102:
; ((t972 . rcx))
 mov rax, rcx
 mov [___emit_2dexpr_2dcomments], rax ; (set! emit-expr-comments ...)
 mov rax, [___implementation_2dfeatures] ; implementation-features
; _lst_46^10472 = rdx
 mov rdx, rax
 mov rax, L949 ; 
 mov r11, rdx
 CALL member_eq
 mov [___enable_2dchecks], rax ; (set! enable-checks ...)
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2098
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t970 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L950
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2101
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 56]
 mov rsi, [SELF + 24]
 mov SELF, [___dump_2dexpressions] ; dump-expressions
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L950:
 mov SELF, rdx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2098
L951:
f_2101:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1225
f_2098:
; ()
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2099
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____4e_42] ; NB
 mov rdx, L952 ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2099:
; ()
 sub rsp, 24
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1233
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2100
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 cmp rax, FALSE
 je L953
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1231
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L954
L953:
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1232
 mov rax, ALLOC
 add ALLOC, 16
L954:
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1232:
; ((_thunk_83^10474 . rdx) (k968 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1231:
; ((_thunk_83^10473 . rdx) (k967 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rsi, rdx
 mov rdx, [SELF + 16]
 mov SELF, [___with_2doutput_2dto_2dfile] ; with-output-to-file
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2100:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [____4e_42] ; NB
 mov rdx, L955 ; 
 mov rsi, [___dropped_2dglobal_2dcount] ; dropped-global-count
 mov rdi, L956 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1233:
; ((k969 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 24]
 mov rsi, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dcode] ; generate-code
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1228:
; ((k955 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___detect_2dunused_2dvariables] ; detect-unused-variables
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1226:
; ((k949 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___cps] ; cps
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1225:
; ((k934 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1222:
; ((k998 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1223
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2120
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, L957 ; 
 mov rsi, [SELF + 24]
 mov SELF, [___option] ; option
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2120:
; ((t1000 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L958
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L958:
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2122
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, L960 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L959:
f_2122:
; ((t1002 . rcx))
 mov rdx, L961 ; 
 mov rsi, L962 ; 
 mov rdi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2121
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2121:
; ((t1001 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___expand_2dprogram] ; expand-program
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1223:
; ((k999 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L963 ; 
 mov rsi, L964 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1219:
; ((_n_52^10398 . rdx) (k1020 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25_2a] ; %*
 mov rsi, rdx
 mov rdx, [___word_2dsize] ; word-size
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1216:
; ((_arg_52^10381 . rdx) (k1021 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1217
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^10383 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L965
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10386 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10387 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L967 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L968
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L970
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10393 = r9
 mov r9, rax
 mov rax, r9
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L971
L970:
 mov rax, FALSE
L971:
 cmp rax, FALSE
 je L972
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10395 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___lookup_2dvariable] ; lookup-variable
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L972:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1217
L973:
L968:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1217
L969:
L965:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1217
L966:
f_1217:
; ((k1022 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1218
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1218:
; ((k1023 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L974 ; 
 mov rsi, L975 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1186:
; ((_x_52^9998 . rdx) (k1024 . rcx))
; _v_53^9999 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1187
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10000 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L976
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10361 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10362 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L978 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L979
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L981
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10368 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10369 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L983
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^10374 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [___arg_2dregister] ; arg-register
; _x_45^10379 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2169
 mov rax, [locals + 8] ; _x_45^10379
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___append_2dmap] ; append-map
 mov rdx, [___used_2dregisters] ; used-registers
 mov rsi, [locals + 0] ; _w_64^10374
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L983:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1187
L984:
L981:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1187
L982:
L979:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1187
L980:
L976:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1187
L977:
f_2169:
; ((t1102 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1187:
; ((k1025 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1188
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10001 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10284 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L985
 mov rax, [SELF + 24]
; _x_44^10287 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_55^10285 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10288 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_56^10286 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L987 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L988
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L990
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10292 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^10293 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_66^10296 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1211
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r10
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1067 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1211
L990:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L991:
L988:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L989:
L985:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L986:
f_1211:
; ((_p-ls_69^10299 . rdi) (_p-ls_68^10298 . rsi) (_ls_67^10297 . rdx) (k1069 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L992
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2152
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L992:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L994
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^10341 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L996
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^10344 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^10345 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L998
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10350 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L999
L998:
 mov rax, FALSE
L999:
 cmp rax, FALSE
 je L1000
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^10352 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1211
L1000:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L1001:
L996:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L997:
L994:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L995:
L993:
f_2152:
; ((t1070 . rcx))
; _vals_70^10301 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2153
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2153:
; ((t1071 . rcx))
; _vars_71^10302 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^10303 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1002
 mov rax, [SELF + 16]
; _x_44^10305 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10304 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1003
L1002:
 mov rax, FALSE
L1003:
 cmp rax, FALSE
 je L1004
 mov rax, [SELF + 16]
; _x_44^10307 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^10306 = rsi
 mov rsi, rax
; _body_74^10308 = rdi
 mov rdi, rsi
 mov rax, [___environment] ; environment
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_75^10309 = r8
 mov r8, rax
 mov rax, [___locals_2dcounter] ; locals-counter
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_76^10310 = r9
 mov r9, rax
 mov rax, [___available_2dregisters] ; available-registers
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_77^10311 = r10
 mov r10, rax
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1213
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rsi, ALLOC
 add ALLOC, 40
 mov SELF, [___dynamic_2dwind] ; dynamic-wind
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1212
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r10
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1215
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r10
 mov rdi, ALLOC
 add ALLOC, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1004:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1188
L1005:
f_1215:
; ((k1096 . rcx))
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
; _tmp_79^10337 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
 mov r11, [___available_2dregisters] ; available-registers
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _tmp_79^10338 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
 mov r11, [___locals_2dcounter] ; locals-counter
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _tmp_79^10339 = rdi
 mov rdi, rax
 mov rax, [SELF + 24]
 mov r11, [___environment] ; environment
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 mov rcx, rdi
 mov [___environment], rcx ; (set! environment ...)
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1212:
; ((k1072 . rcx))
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
; _tmp_79^10312 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
 mov r11, [___available_2dregisters] ; available-registers
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _tmp_79^10313 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
 mov r11, [___locals_2dcounter] ; locals-counter
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _tmp_79^10314 = rdi
 mov rdi, rax
 mov rax, [SELF + 24]
 mov r11, [___environment] ; environment
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 mov rcx, rdi
 mov [___environment], rcx ; (set! environment ...)
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1213:
; ((k1078 . rcx))
 mov rax, [___environment] ; environment
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _newenv_79^10315 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1214
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2158
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2158:
; ((t1082 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2156
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___concatenate] ; concatenate
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2156:
; ((t1079 . rcx))
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [___environment], rax ; (set! environment ...)
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2157
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 24]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2157:
; ((t1080 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1214:
; ((_val_81^10317 . rsi) (_var_80^10316 . rdx) (k1083 . rcx))
 mov rax, rdx
 mov r11, L1006 ; 
 cmp rax, r11
 jne L1007
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2159
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___simple_2dexpression_3f] ; simple-expression?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1007:
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^10322 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1009
 sub rsp, 8
 mov rax, [___locals_2dcounter] ; locals-counter
; _y_46^10326 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^10323 = rdi
 mov rdi, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^10324 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2164
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, [___locals_2dcounter] ; locals-counter
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1009:
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^10329 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _reg_82^10328 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^10330 = r8
 mov r8, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^10331 = r9
 mov r9, rax
 mov rax, r8
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^10335 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_83^10334 = r8
 mov r8, rax
 mov rax, [___available_2dregisters] ; available-registers
; _x_44^10336 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [___available_2dregisters], rax ; (set! available-registers ...)
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2166
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1010:
L1008:
f_2166:
; ((t1094 . rcx))
 mov rdx, [___arg_2dregister] ; arg-register
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___cons_2a] ; cons*
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2164:
; ((t1090 . rcx))
 mov rax, rcx
 mov [___locals_2dcounter], rax ; (set! locals-counter ...)
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2162
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___sub1] ; sub1
 mov rdx, [___locals_2dcounter] ; locals-counter
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2162:
; ((t1088 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2163
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2163:
; ((t1089 . rcx))
 mov rdx, [___arg_2dregister] ; arg-register
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___cons_2a] ; cons*
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2159:
; ((t1084 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1011
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, null ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1011:
 mov rax, [___arg_2dregister] ; arg-register
; _x_45^10320 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2160
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1012:
f_2160:
; ((t1085 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1188:
; ((k1026 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1189
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10002 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10265 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1013
 mov rax, [SELF + 16]
; _x_44^10268 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10266 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10269 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10267 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1015 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1016
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1018
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10273 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10274 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1020
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10279 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1021
L1020:
 mov rax, FALSE
L1021:
 cmp rax, FALSE
 je L1022
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^10281 = r10
 mov r10, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1022:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1189
L1023:
L1018:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1189
L1019:
L1016:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1189
L1017:
L1013:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1189
L1014:
f_1189:
; ((k1027 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1190
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10003 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10252 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1024
 mov rax, [SELF + 24]
; _x_44^10255 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10253 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10256 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10254 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1026 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1027
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1029
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10260 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1030
L1029:
 mov rax, FALSE
L1030:
 cmp rax, FALSE
 je L1031
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10262 = r8
 mov r8, rax
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1031:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1190
L1032:
L1027:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1190
L1028:
L1024:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1190
L1025:
f_1190:
; ((k1028 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1191
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10004 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10239 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1033
 mov rax, [SELF + 16]
; _x_44^10242 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10240 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10243 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10241 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1035 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1036
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1038
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10247 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1039
L1038:
 mov rax, FALSE
L1039:
 cmp rax, FALSE
 je L1040
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10249 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2150
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___lookup_2dvariable] ; lookup-variable
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1040:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1191
L1041:
L1036:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1191
L1037:
L1033:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1191
L1034:
f_2150:
; ((t1066 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1191:
; ((k1029 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1192
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10005 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10219 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1042
 mov rax, [SELF + 24]
; _x_44^10222 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10220 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10223 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10221 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1044 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1045
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1047
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10227 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10228 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1049
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10233 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1050
L1049:
 mov rax, FALSE
L1050:
 cmp rax, FALSE
 je L1051
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^10235 = r10
 mov r10, rax
; _val_66^10237 = r12
 mov r12, r10
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2147
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r12
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___lookup_2dvariable] ; lookup-variable
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1051:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1192
L1052:
L1047:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1192
L1048:
L1045:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1192
L1046:
L1042:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1192
L1043:
f_2147:
; ((t1063 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2148
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2148:
; ((t1064 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2149
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2149:
; ((t1065 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1192:
; ((k1030 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1193
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10006 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10194 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1053
 mov rax, [SELF + 16]
; _x_44^10197 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10195 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10198 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10196 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1055 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1056
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1058
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10202 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10203 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1060
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^10208 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^10209 = r12
 mov r12, rax
; _y_68^10212 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1062
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10214 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^10214
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1063
L1062:
 mov rax, FALSE
L1063:
 cmp rax, FALSE
 je L1064
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^10216 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _w_69^10216
; _z_71^10218 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2144
 mov rax, [locals + 0] ; _y_68^10212
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [locals + 16] ; _z_71^10218
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1064:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1193
L1065:
L1060:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1193
L1061:
L1058:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1193
L1059:
L1056:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1193
L1057:
L1053:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1193
L1054:
f_2144:
; ((t1060 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2145
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2145:
; ((t1061 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2146
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2146:
; ((t1062 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1193:
; ((k1031 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1194
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10007 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10165 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1066
 mov rax, [SELF + 24]
; _x_44^10168 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_55^10166 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10169 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_56^10167 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1068 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1069
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1071
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10173 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1072
L1071:
 mov rax, FALSE
L1072:
 cmp rax, FALSE
 je L1073
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_58^10175 = r8
 mov r8, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1209
 mov rax, ALLOC
 add ALLOC, 16
; _sk2_65^10177 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1210
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; _fk2_66^10179 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1075
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^10182 = r12
 mov r12, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^10183 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, L1077 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1078
 sub rsp, 8
 mov rax, [locals + 0] ; _x_69^10183
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1080
 mov rax, [locals + 0] ; _x_69^10183
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10189 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^10189
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1081
L1080:
 mov rax, FALSE
L1081:
 cmp rax, FALSE
 je L1082
 mov rax, [locals + 0] ; _x_69^10183
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^10191 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, [locals + 8] ; _w_71^10191
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1209
L1082:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1210
L1083:
L1078:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1210
L1079:
L1075:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1210
L1076:
L1073:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1194
L1074:
L1069:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1194
L1070:
L1066:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1194
L1067:
f_1210:
; ((k1059 . rcx))
 mov rax, [SELF + 24]
; _name_67^10180 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1209
f_1209:
; ((k1058 . rcx))
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1194:
; ((k1032 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1195
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10008 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10152 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1084
 mov rax, [SELF + 16]
; _x_44^10155 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10153 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10156 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10154 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1086 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1087
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1089
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10160 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1090
L1089:
 mov rax, FALSE
L1090:
 cmp rax, FALSE
 je L1091
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10162 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1091:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1195
L1092:
L1087:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1195
L1088:
L1084:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1195
L1085:
f_1195:
; ((k1033 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1196
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10009 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10139 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1093
 mov rax, [SELF + 24]
; _x_44^10142 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10140 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10143 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10141 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1095 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1096
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1098
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10147 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1099
L1098:
 mov rax, FALSE
L1099:
 cmp rax, FALSE
 je L1100
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^10149 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1100:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1196
L1101:
L1096:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1196
L1097:
L1093:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1196
L1094:
f_1196:
; ((k1034 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1197
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10010 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10120 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1102
 mov rax, [SELF + 16]
; _x_44^10123 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10121 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10124 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10122 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1104 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1105
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1107
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^10128 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10129 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1109
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10134 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1110
L1109:
 mov rax, FALSE
L1110:
 cmp rax, FALSE
 je L1111
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^10136 = r10
 mov r10, rax
; _val_66^10138 = r12
 mov r12, r10
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2142
 mov [ALLOC + 16], r12
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1111:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1197
L1112:
L1107:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1197
L1108:
L1105:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1197
L1106:
L1102:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1197
L1103:
f_2142:
; ((t1056 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2143
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___used_2dregisters] ; used-registers
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2143:
; ((t1057 . rcx))
 mov rdx, [___temporary_2dregisters] ; temporary-registers
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1197:
; ((k1035 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1198
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10011 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10107 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1113
 mov rax, [SELF + 24]
; _x_44^10110 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10108 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10111 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10109 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1115 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1116
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1118
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10116 = r8
 mov r8, rax
; _args_65^10119 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2140
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r9
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1118:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1198
L1119:
L1116:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1198
L1117:
L1113:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1198
L1114:
f_2140:
; ((t1054 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1120
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2141
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___used_2dregisters] ; used-registers
 mov rsi, [SELF + 24]
 mov SELF, [___append_2dmap] ; append-map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1120:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1198
L1121:
f_2141:
; ((t1055 . rcx))
 mov rdx, [___temporary_2dregisters] ; temporary-registers
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1198:
; ((k1036 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1199
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10012 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10089 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1122
 mov rax, [SELF + 16]
; _x_44^10092 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10090 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10093 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10091 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1124 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1125
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1127
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10098 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1129
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^10103 = r9
 mov r9, rax
; _args_68^10106 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2138
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1129:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1199
L1130:
L1127:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1199
L1128:
L1125:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1199
L1126:
L1122:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1199
L1123:
f_2138:
; ((t1052 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1131
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2139
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___used_2dregisters] ; used-registers
 mov rsi, [SELF + 24]
 mov SELF, [___append_2dmap] ; append-map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1131:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1199
L1132:
f_2139:
; ((t1053 . rcx))
 mov rdx, [___temporary_2dregisters] ; temporary-registers
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1199:
; ((k1037 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1200
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10013 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10070 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1133
 mov rax, [SELF + 24]
; _x_44^10073 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10071 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10074 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10072 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1135 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1136
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1138
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^10079 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1140
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^10084 = r9
 mov r9, rax
; _args_68^10087 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2135
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1140:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1200
L1141:
L1138:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1200
L1139:
L1136:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1200
L1137:
L1133:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1200
L1134:
f_2135:
; ((t1049 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1142
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^10088 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2136
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___take] ; take
 mov rsi, [___temporary_2dregisters] ; temporary-registers
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1142:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1200
L1143:
f_2136:
; ((t1050 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2137
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [___used_2dregisters] ; used-registers
 mov rsi, [SELF + 16]
 mov SELF, [___append_2dmap] ; append-map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2137:
; ((t1051 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1200:
; ((k1038 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1201
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10014 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10059 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1144
 mov rax, [SELF + 16]
; _x_44^10061 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10060 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1145
L1144:
 mov rax, FALSE
L1145:
 cmp rax, FALSE
 je L1146
 mov rax, [SELF + 16]
; _x_44^10063 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_55^10062 = rsi
 mov rsi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1207
 mov rax, ALLOC
 add ALLOC, 16
; _sk2_57^10064 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1208
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_58^10065 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, L1148 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1149
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1207
L1149:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1208
L1150:
L1146:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1201
L1147:
f_1208:
; ((k1048 . rcx))
 mov rax, [SELF + 32]
; _x_44^10066 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L1151 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1152
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1207
L1152:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1201
L1153:
f_1207:
; ((k1047 . rcx))
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1201:
; ((k1039 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1202
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10015 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10047 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1154
 mov rax, [SELF + 24]
; _x_44^10050 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10048 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10051 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10049 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1156 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1157
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1159
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10055 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1160
L1159:
 mov rax, FALSE
L1160:
 cmp rax, FALSE
 je L1161
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25list] ; %list
 mov rdx, [___self_2dregister] ; self-register
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1161:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1202
L1162:
L1157:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1202
L1158:
L1154:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1202
L1155:
f_1202:
; ((k1040 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1203
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10016 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10035 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1163
 mov rax, [SELF + 16]
; _x_44^10038 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10036 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10039 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10037 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1165 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1166
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1168
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^10043 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1169
L1168:
 mov rax, FALSE
L1169:
 cmp rax, FALSE
 je L1170
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1170:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1203
L1171:
L1166:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1203
L1167:
L1163:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1203
L1164:
f_1203:
; ((k1041 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1204
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_54^10017 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^10027 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1172
 mov rax, [SELF + 24]
; _x_44^10030 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10028 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^10031 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10029 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1174 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1175
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2134
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1175:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1204
L1176:
L1172:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1204
L1173:
f_2134:
; ((t1046 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1177
 mov rcx, [SELF + 16]
 mov rdx, L1179 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1177:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1204
L1178:
f_1204:
; ((k1042 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1205
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_54^10018 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^10020 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1180
 mov rax, [SELF + 16]
; _x_44^10023 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^10021 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^10024 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^10022 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2133
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1180:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1205
L1181:
f_2133:
; ((t1045 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1182
 mov rcx, [SELF + 16]
 mov rdx, L1184 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1182:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1205
L1183:
f_1205:
; ((k1043 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1206
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L1185 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1206:
; ((k1044 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1186 ; 
 mov rsi, L1187 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1165:
; ((_regs_53^9805 . rsi) (_args_52^9804 . rdx) (k1103 . rcx))
 mov rax, rdx
 CALL list_length
; _argc_54^9806 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2201
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov SELF, [___take] ; take
 mov rdx, rdi
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2201:
; ((t1164 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2203
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_45^9811 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov rsi, rax
 mov rdx, [SELF + 40]
 mov SELF, [____25_2d] ; %-
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2203:
; ((t1166 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2202
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___iota] ; iota
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2202:
; ((t1165 . rcx))
 mov rdx, [SELF + 32]
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2200
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2200:
; ((t1163 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1166
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2170
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2170:
; ((t1104 . rcx))
; _rargs_55^9808 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _circular?_56^9812 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _translate-arguments_57^9813 = rdi
 mov rdi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1167
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1172
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_58^9978 = r8
 mov r8, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1182
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdi
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t1151 = r9
 mov r9, rax
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1182
f_1182:
; ((_unspilled_61^9981 . rdi) (_spilled_60^9980 . rsi) (_ras_59^9979 . rdx) (k1153 . rcx))
; _v_62^9982 = r8
 mov r8, rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1183
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_63^9983 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1188
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2197
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rsi, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1172
L1188:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1183
L1189:
f_2197:
; ()
 mov rcx, [SELF + 24]
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1185
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1185:
; ((_x_44^9997 . rdx) (k1159 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1183:
; ((k1154 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1184
 mov rax, ALLOC
 add ALLOC, 16
; _failure_63^9984 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9985 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1190
 mov rax, [SELF + 16]
; _x_44^9988 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9986 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9989 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9987 = rdi
 mov rdi, rax
; _ra_67^9990 = r8
 mov r8, rsi
; _more_69^9991 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2196
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 24]
 mov SELF, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1190:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1184
L1191:
f_2196:
; ((t1157 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2195
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1167
f_2195:
; ((t1156 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1192
 sub rsp, 40
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
; _x_45^9992 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^9993 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1182
L1192:
 sub rsp, 40
 mov rax, [SELF + 24]
; _x_45^9994 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _y_46^9995 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1182
L1193:
f_1184:
; ((k1155 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1194 ; 
 mov rsi, L1195 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1172:
; ((_unspilled_59^9855 . rsi) (_spilled_58^9854 . rdx) (k1113 . rcx))
 mov rax, rdx
 CALL list_length
; _n_60^9856 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2171
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rdi
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___cells] ; cells
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2171:
; ((t1114 . rcx))
; _reserve_61^9858 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2172
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t1138 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _n_44^9860 = rdi
 mov rdi, rax
 sub rsp, 8
; _x_44^9861 = r8
 mov r8, rdi
 mov rax, r8
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L1196
 mov rax, rdi
 jmp L1197
L1196:
 mov rax, rdi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L1197:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^9859 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L1198
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2186
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dreserve_2don_2dstack] ; generate-reserve-on-stack
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1198:
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2172
L1199:
f_2186:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_62^9862 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1173
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t1140 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1173
f_1173:
; ((_i_64^9864 . rsi) (_rargs_63^9863 . rdx) (k1142 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1200
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1200:
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1174
 mov rax, ALLOC
 add ALLOC, 16
; _failure_67^9868 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2188
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
; t1146 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1202
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^9870 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1204
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^9876 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1206
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^9880 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^9881 = local #0
 mov [locals + 0], rax
; _arg_77^9884 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_75^9881
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1208
 mov rax, [locals + 0] ; _x_75^9881
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9886 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^9886
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1209
L1208:
 mov rax, FALSE
L1209:
 cmp rax, FALSE
 je L1210
 mov rax, [locals + 0] ; _x_75^9881
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, [___argument_2dregister] ; argument-register
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2190
 mov rax, [locals + 8] ; _arg_77^9884
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], r8
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, r12
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1210:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1174
L1211:
L1206:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1174
L1207:
L1204:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1174
L1205:
L1202:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1174
L1203:
L1201:
f_2190:
; ((t1147 . rcx))
; _reg_79^9890 = rdx
 mov rdx, rcx
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1212
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2191
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1212:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2192
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___translate] ; translate
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1213:
f_2192:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2193
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2193:
; ((t1150 . rcx))
 mov rdx, [___stack_2dregister] ; stack-register
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rdi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2191:
; ((t1148 . rcx))
 mov rdx, [___stack_2dregister] ; stack-register
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [___generate_2dslot_2dstore] ; generate-slot-store
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2188:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2189
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2189:
; ((t1144 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^9892 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1173
f_1174:
; ((k1145 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1214 ; 
 mov rsi, L1215 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2172:
; ()
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2182
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1175
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1175:
; ((_expr_62^9894 . rdx) (k1136 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1176
 mov rax, ALLOC
 add ALLOC, 16
; _failure_64^9896 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1216
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^9898 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^9899 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1218
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^9905 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1220
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9909 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1221
L1220:
 mov rax, FALSE
L1221:
 cmp rax, FALSE
 je L1222
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^9911 = r10
 mov r10, rax
 mov SELF, rcx
 mov rax, rdi
 mov r11, r10
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1222:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1176
L1223:
L1218:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1176
L1219:
L1216:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1176
L1217:
f_1176:
; ((k1137 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1224 ; 
 mov rsi, L1225 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2182:
; ((t1129 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2183
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [___topological_2dsort] ; topological-sort
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1177
 mov rsi, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1177:
; ((_y_45^9918 . rsi) (_x_44^9917 . rdx) (k1135 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 CALL structurally_equal
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2183:
; ((t1130 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1178
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2173
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2173:
; ()
 mov rax, [SELF + 40]
; _n_44^9945 = rcx
 mov rcx, rax
 sub rsp, 8
; _x_44^9946 = rdx
 mov rdx, rcx
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L1226
 mov rax, rcx
 jmp L1227
L1226:
 mov rax, rcx
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L1227:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^9944 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L1228
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_62^9947 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1180
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t1118 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2174
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1180
L1228:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1229:
f_2174:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___generate_2dpop_2dstack] ; generate-pop-stack
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1180:
; ((_i_64^9949 . rsi) (_rargs_63^9948 . rdx) (k1120 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1230
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1230:
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1181
 mov rax, ALLOC
 add ALLOC, 16
; _failure_67^9953 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2176
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
; t1124 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1232
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^9955 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1234
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^9960 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^9961 = r12
 mov r12, rax
; _tr_74^9964 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1236
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^9966 = local #1
 mov [locals + 8], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^9967 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, [locals + 16] ; _x_77^9967
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1238
 mov rax, [locals + 16] ; _x_77^9967
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9972 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _x_44^9972
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1239
L1238:
 mov rax, FALSE
L1239:
 cmp rax, FALSE
 je L1240
 mov rax, [locals + 16] ; _x_77^9967
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1242
 mov SELF, [___cells] ; cells
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2178
 mov rax, [locals + 0] ; _tr_74^9964
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1242:
 mov SELF, [___cells] ; cells
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2181
 mov [ALLOC + 16], r8
 mov rax, [locals + 0] ; _tr_74^9964
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1243:
L1240:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1181
L1241:
L1236:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1181
L1237:
L1234:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1181
L1235:
L1232:
 mov SELF, rdi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1181
L1233:
L1231:
f_2181:
; ((t1128 . rcx))
 mov rdx, [___arg_2dregister] ; arg-register
 mov rsi, [___stack_2dregister] ; stack-register
 mov rdi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2179
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___generate_2dslot_2dref] ; generate-slot-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2179:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2180
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2180:
; ((t1127 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dmove_2dto_2dlocal] ; generate-move-to-local
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2178:
; ((t1125 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [___stack_2dregister] ; stack-register
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___generate_2dslot_2dref] ; generate-slot-ref
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2176:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2177
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2177:
; ((t1122 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^9977 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1180
f_1181:
; ((k1123 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1244 ; 
 mov rsi, L1245 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1178:
; ((_sr_64^9919 . rdx) (k1131 . rcx))
 mov rax, [SELF + 16]
; _lst_46^9922 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eqv
; _tmp_65^9920 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L1246
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1179
 mov rax, ALLOC
 add ALLOC, 16
; _failure_68^9925 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1248
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^9927 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^9928 = r9
 mov r9, rax
; _tr_73^9931 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1250
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^9933 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^9934 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov rax, [locals + 0] ; _x_76^9934
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1252
 mov rax, [locals + 0] ; _x_76^9934
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9939 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^9939
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1253
L1252:
 mov rax, FALSE
L1253:
 cmp rax, FALSE
 je L1254
 mov rax, [locals + 0] ; _x_76^9934
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1256
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___translate] ; translate
 mov rdx, r12
 mov rsi, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1256:
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2184
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___translate] ; translate
 mov rdx, r12
 mov rsi, [___arg_2dregister] ; arg-register
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1257:
L1254:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1179
L1255:
L1250:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1179
L1251:
L1248:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1179
L1249:
L1246:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1247:
f_2184:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2185
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___cells] ; cells
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2185:
; ((t1134 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___generate_2dmove_2dto_2dlocal] ; generate-move-to-local
 mov rsi, [___arg_2dregister] ; arg-register
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1179:
; ((k1132 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1258 ; 
 mov rsi, L1259 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1167:
; ((_rargs_59^9815 . rsi) (_ra_58^9814 . rdx) (k1106 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _follow_60^9816 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1168
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___any] ; any
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9852 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9851 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1171
 mov [ALLOC + 16], rdi
 mov rdx, ALLOC
 add ALLOC, 24
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1171:
; ((_x_61^9849 . rdx) (k1111 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_1168
f_1168:
; ((_done_62^9818 . rsi) (_r_61^9817 . rdx) (k1108 . rcx))
 mov rax, rdx
 mov r11, rsi
 CALL member_eq
; _x_63^9819 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L1260
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1260:
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _done_64^9822 = r8
 mov r8, rax
 mov rax, [SELF + 24]
; _lst_46^9827 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, r9
 CALL assoc_eq
; _tmp_65^9825 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L1262
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1169
 mov rax, ALLOC
 add ALLOC, 16
; _failure_68^9830 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1264
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^9832 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^9833 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov rax, [locals + 0] ; _x_71^9833
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1266
 mov rax, [locals + 0] ; _x_71^9833
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [locals + 0] ; _x_71^9833
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^9839 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov rax, [locals + 8] ; _x_76^9839
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1268
 mov rax, [locals + 8] ; _x_76^9839
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9843 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^9843
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1269
L1268:
 mov rax, FALSE
L1269:
 cmp rax, FALSE
 je L1270
 mov rax, [locals + 8] ; _x_76^9839
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^9845 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1170
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov SELF, [___any] ; any
 mov rsi, [locals + 16] ; _w_77^9845
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1270:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1169
L1271:
L1266:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1169
L1267:
L1264:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1169
L1265:
L1262:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1263:
L1261:
f_1170:
; ((_x_80^9848 . rdx) (k1110 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1168
f_1169:
; ((k1109 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1272 ; 
 mov rsi, L1273 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1166:
; ((_reg_56^9810 . rsi) (_arg_55^9809 . rdx) (k1160 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2199
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___used_2dregisters] ; used-registers
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2199:
; ((t1162 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2198
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___delete_2dduplicates] ; delete-duplicates
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2198:
; ((t1161 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1154:
; ((_exp_52^9727 . rdx) (k1167 . rcx))
; _v_53^9728 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1155
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^9729 = rdi
 mov rdi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1157
 mov rax, ALLOC
 add ALLOC, 16
; _sk2_67^9731 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1158
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9732 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1274
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1157
L1274:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1158
L1275:
f_1158:
; ((k1171 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1159
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9733 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9791 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1276
 mov rax, [SELF + 32]
; _x_44^9794 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^9792 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^9795 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^9793 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1278 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1279
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1281
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9799 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1282
L1281:
 mov rax, FALSE
L1282:
 cmp rax, FALSE
 je L1283
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1157
L1283:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1159
L1284:
L1279:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1159
L1280:
L1276:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1159
L1277:
f_1159:
; ((k1172 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1160
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9734 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9789 = rsi
 mov rsi, rax
 mov rax, L1285 ; 
; _y_45^9790 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL recursively_equal
 cmp rax, FALSE
 je L1286
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1157
L1286:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1160
L1287:
f_1160:
; ((k1173 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1161
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9735 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9787 = rsi
 mov rsi, rax
 mov rax, L1288 ; 
; _y_45^9788 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL recursively_equal
 cmp rax, FALSE
 je L1289
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1157
L1289:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1161
L1290:
f_1161:
; ((k1174 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1162
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9736 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9775 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1291
 mov rax, [SELF + 16]
; _x_44^9778 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^9776 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9779 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^9777 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1293 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1294
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1296
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9783 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1297
L1296:
 mov rax, FALSE
L1297:
 cmp rax, FALSE
 je L1298
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1157
L1298:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1162
L1299:
L1294:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1162
L1295:
L1291:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1162
L1292:
f_1162:
; ((k1175 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1163
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9737 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9763 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1300
 mov rax, [SELF + 32]
; _x_44^9766 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9764 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^9767 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9765 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1302 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1303
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1305
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9771 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1306
L1305:
 mov rax, FALSE
L1306:
 cmp rax, FALSE
 je L1307
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^9773 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2204
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___simple_2dexpression_3f] ; simple-expression?
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1307:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1163
L1308:
L1303:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1163
L1304:
L1300:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1163
L1301:
f_2204:
; ((t1178 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1309
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1157
L1309:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1163
L1310:
f_1163:
; ((k1176 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1164
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9738 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9751 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1311
 mov rax, [SELF + 16]
; _x_44^9754 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^9752 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9755 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^9753 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1313 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1314
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1316
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9759 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1317
L1316:
 mov rax, FALSE
L1317:
 cmp rax, FALSE
 je L1318
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1157
L1318:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1164
L1319:
L1314:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1164
L1315:
L1311:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1164
L1312:
f_1164:
; ((k1177 . rcx))
 mov rax, [SELF + 32]
; _x_44^9739 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1320
 mov rax, [SELF + 32]
; _x_44^9742 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9740 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9743 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9741 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, L1322 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1323
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1325
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9747 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1326
L1325:
 mov rax, FALSE
L1326:
 cmp rax, FALSE
 je L1327
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1157
L1327:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1155
L1328:
L1323:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1155
L1324:
L1320:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1155
L1321:
f_1157:
; ((k1170 . rcx))
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1155:
; ((k1168 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1156
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1156:
; ((k1169 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1329 ; 
 mov rsi, L1330 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1150:
; ((_exp_52^9693 . rdx) (k1179 . rcx))
; _v_53^9694 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1151
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
; _failure_54^9695 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1331
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^9713 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^9714 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L1333 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1334
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1336
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9720 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1337
L1336:
 mov rax, FALSE
L1337:
 cmp rax, FALSE
 je L1338
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^9722 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2205
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___lookup_2dvariable] ; lookup-variable
 mov rdx, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1338:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1151
L1339:
L1334:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1151
L1335:
L1331:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1151
L1332:
f_2205:
; ((t1183 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, rcx
 mov r11, FALSE
 cmove r11, rax
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1151:
; ((k1180 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1152
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^9696 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9698 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1340
 mov rax, [SELF + 16]
; _x_44^9701 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_56^9699 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9702 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_57^9700 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1342 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1343
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1345
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9706 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1346
L1345:
 mov rax, FALSE
L1346:
 cmp rax, FALSE
 je L1347
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_59^9708 = r8
 mov r8, rax
 mov rax, r8
 mov r11, FALSE
 CALL recursively_equal
 cmp rax, FALSE
 je L1349
 mov SELF, rcx
 mov rcx, L1351 ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1349:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1152
L1350:
L1347:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1152
L1348:
L1343:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1152
L1344:
L1340:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1152
L1341:
f_1152:
; ((k1181 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1153
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1153:
; ((k1182 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1352 ; 
 mov rsi, L1353 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1141:
; ((_pred_53^9616 . rsi) (_dag_52^9615 . rdx) (k1185 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _alist-ref_54^9617 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _alist-update!_55^9618 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _visit_56^9619 = r9
 mov r9, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1142
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1144
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1146
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], r9
 mov [ALLOC + 32], r8
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_57^9675 = r10
 mov r10, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1148
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r10
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1206 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2216
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2216:
; ((t1208 . rcx))
; _x_45^9687 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2217
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2217:
; ((t1209 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1207 = rdx
 mov rdx, rax
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1148
f_1148:
; ((_state_59^9677 . rsi) (_dag_58^9676 . rdx) (k1211 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1354
 mov SELF, rcx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1354:
 sub rsp, 48
 mov [rsp + 0], rsi
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9685 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9682 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2218
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 32], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, null ; 
 mov r9, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1146
L1355:
f_2218:
; ((t1212 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^9680 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1148
f_1146:
; ((_state_61^9644 . r9) (_path_60^9643 . r8) (_edges_59^9642 . rdi) (_node_58^9641 . rsi) (_dag_57^9640 . rdx) (k1196 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2208
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], r9
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov rdi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1142
f_2208:
; ((t1197 . rcx))
 mov rax, rcx
 mov r11, L1356 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L1357
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2209
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1357:
 mov rax, rcx
 mov r11, L1359 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L1360
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1360:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_63^9651 = rdx
 mov rdx, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1147
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t1199 = rsi
 mov rsi, rax
 mov rax, [SELF + 72]
; _x_63^9666 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2211
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
; t1201 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L1362
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2211
L1362:
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rcx, r8
 mov rdi, null ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1142
L1363:
L1361:
L1358:
f_2211:
; ((t1200 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
; _x_45^9671 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L1364 ; 
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^9669 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^9673 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^9670 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^9667 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^9674 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^9668 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1147
f_1147:
; ((_state_65^9653 . rsi) (_edges_64^9652 . rdx) (k1203 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1365
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2212
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdi, rax
 mov rsi, L1367 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1144
L1365:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _edge_66^9661 = rdi
 mov rdi, rax
 sub rsp, 32
 mov rax, [SELF + 32]
; _y_46^9665 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2213
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov r9, rsi
 mov rsi, rdi
 mov rdi, FALSE
 mov r8, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1146
L1366:
f_2213:
; ((t1205 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^9663 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1147
f_2212:
; ((t1204 . rcx))
 mov rax, [SELF + 24]
; _x_45^9658 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9660 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^9659 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^9656 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2209:
; ((t1198 . rcx))
 mov rdx, L1368 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 32]
 mov r8, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_1144:
; ((_al_59^9629 . rdi) (_y_58^9628 . rsi) (_x_57^9627 . rdx) (k1191 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1145
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2207
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov SELF, [___find] ; find
 mov rsi, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2207:
; ((t1192 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1369
 mov rax, [SELF + 16]
; _y_45^9635 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1369:
 mov rax, [SELF + 40]
; _x_45^9638 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^9639 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^9636 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _y_46^9637 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1370:
f_1145:
; ((_a_60^9631 . rdx) (k1194 . rcx))
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1142:
; ((_def_59^9622 . rdi) (_al_58^9621 . rsi) (_x_57^9620 . rdx) (k1187 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1143
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2206
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov SELF, [___find] ; find
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2206:
; ((t1188 . rcx))
 sub rsp, 16
 mov rax, rcx
 cmp rax, FALSE
 je L1371
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L1372
L1371:
 mov rax, [SELF + 16]
L1372:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1143:
; ((_a_60^9624 . rdx) (k1189 . rcx))
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1139:
; ((_features_52^9591 . rdx) (k1213 . rcx))
 mov rax, L1373 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^9601 = rsi
 mov rsi, rax
 mov rax, L1374 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^9599 = rsi
 mov rsi, rax
 mov rax, L1375 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^9597 = rsi
 mov rsi, rax
 mov rax, L1376 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^9594 = rsi
 mov rsi, rax
 mov rax, L1377 ; 
; _x_45^9604 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2223
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1140
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1140:
; ((_f_53^9606 . rdx) (k1219 . rcx))
 mov rax, L1378 ; 
; _y_46^9614 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^9611 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1379 ; 
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^9610 = rsi
 mov rsi, rax
 mov rax, L1380 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^9607 = rsi
 mov rsi, rax
 mov rax, L1381 ; 
; _y_46^9608 = rdi
 mov rdi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2223:
; ((t1218 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2222
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___append] ; append
 mov rsi, L1382 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2222:
; ((t1217 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1216 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1215 = rsi
 mov rsi, rax
 mov rax, L1383 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1214 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rdi
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rdx, L1384 ; 
 mov rsi, L1385 ; 
 mov rdi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1107:
; ((_src_53^9374 . rsi) (_prg_52^9373 . rdx) (k1220 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1386
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L1387
L1386:
 mov rax, FALSE
L1387:
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _src_54^9375 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax + 8]
 cmp rax, FALSE
 je L1388
 mov rax, [___file_2dsearch_2dpath] ; file-search-path
; _y_46^9380 = r8
 mov r8, rax
 mov rax, rdi
 mov rax, [rax + 8]
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L1389
L1388:
 mov rax, [___file_2dsearch_2dpath] ; file-search-path
L1389:
; _spath_55^9378 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _find-file_56^9381 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _localize_57^9382 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-req_58^9383 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-clause_59^9384 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1108
 mov [ALLOC + 16], r8
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1110
 mov [ALLOC + 16], r9
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1111
 mov [ALLOC + 16], r12
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1117
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov rax, [locals + 0] ; _expand-clause_59^9384
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 0] ; _expand-clause_59^9384
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2256
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [locals + 0] ; _expand-clause_59^9384
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
; t1293 = local #1
 mov [locals + 8], rax
 mov rax, rdi
 mov rax, [rax + 8]
 cmp rax, FALSE
 je L1390
 sub rsp, 8
 mov rax, rdi
 mov rax, [rax + 8]
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1392
 mov SELF, [___dirname] ; dirname
 mov rcx, [locals + 8] ; t1293
 mov rdx, rdi
 mov rdx, [rdx + 8]
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1392:
 mov SELF, [locals + 8] ; t1293
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2256
L1393:
L1390:
 mov SELF, [locals + 8] ; t1293
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2256
L1391:
f_2256:
; ((t1291 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 16]
; _v_60^9578 = rdx
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1137
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_61^9579 = rsi
 mov rsi, rax
; _x_44^9581 = rdi
 mov rdi, rdx
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1394
; _x_44^9584 = rdi
 mov rdi, rdx
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^9582 = rdi
 mov rdi, rax
; _x_44^9585 = r8
 mov r8, rdx
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^9583 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L1396 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1397
; _clauses_69^9588 = r9
 mov r9, r8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2254
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r9
 mov [ALLOC + 40], rsi
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___list_3f] ; list?
 mov rdx, r8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1397:
 mov rcx, [SELF + 24]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1137
L1398:
L1394:
 mov rcx, [SELF + 24]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1137
L1395:
f_2254:
; ((t1289 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1399
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2255
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1399:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1137
L1400:
f_2255:
; ((t1290 . rcx))
 sub rsp, 16
 mov rax, L1401 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1137:
; ((k1287 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1138
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L1402 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1138:
; ((k1288 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1403 ; 
 mov rsi, L1404 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1117:
; ((_clause_60^9448 . rdx) (k1242 . rcx))
; _v_61^9449 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1118
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^9450 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1405
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9566 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9567 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L1407 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1408
; _ids_70^9572 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2251
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1408:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1118
L1409:
L1405:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1118
L1406:
f_2251:
; ((t1283 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1410
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2252
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1136
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 24]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1410:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1118
L1411:
f_1136:
; ((_id_71^9573 . rdx) (k1285 . rcx))
 mov rax, [___implementation_2dfeatures] ; implementation-features
; _lst_46^9576 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL member_eq
; _x_44^9574 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L1412
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L1414 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1412:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1413:
f_2252:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L1415 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1118:
; ((k1243 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1119
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^9451 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^9554 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1416
 mov rax, [SELF + 48]
; _x_44^9557 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9555 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^9558 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9556 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1418 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1419
; _fns_70^9561 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2248
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1419:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1119
L1420:
L1416:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1119
L1417:
f_2248:
; ((t1279 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1421
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2249
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1135
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1421:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1119
L1422:
f_1135:
; ((_fn_71^9564 . rdx) (k1281 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2250
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1110
f_2250:
; ((t1282 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___read_2dforms] ; read-forms
 mov rsi, [___read] ; read
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2249:
; ((t1280 . rcx))
 sub rsp, 16
 mov rax, L1423 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1119:
; ((k1244 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1120
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^9452 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9544 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1424
 mov rax, [SELF + 16]
; _x_44^9547 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9545 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9548 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9546 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1426 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1427
; _exps_70^9551 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2247
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1427:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1120
L1428:
L1424:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1120
L1425:
f_2247:
; ((t1278 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1429
 mov rax, [SELF + 16]
; _y_46^9553 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L1431 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1429:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1120
L1430:
f_1120:
; ((k1245 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1121
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^9453 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^9536 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1432
 mov rax, [SELF + 48]
; _x_44^9539 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9537 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^9540 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9538 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1434 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1435
; _ids_70^9543 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2244
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1435:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1121
L1436:
L1432:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1121
L1433:
f_2244:
; ((t1274 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1437
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2246
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rsi, [___implementation_2dfeatures] ; implementation-features
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1437:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1121
L1438:
f_2246:
; ((t1276 . rcx))
 mov rax, rcx
 mov [___implementation_2dfeatures], rax ; (set! implementation-features ...)
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L1439 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1121:
; ((k1246 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1122
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^9454 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9523 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1440
 mov rax, [SELF + 16]
; _x_44^9526 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9524 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9527 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9525 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1442 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1443
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1445
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9531 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1446
L1445:
 mov rax, FALSE
L1446:
 cmp rax, FALSE
 je L1447
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^9533 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1447:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1122
L1448:
L1443:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1122
L1444:
L1440:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1122
L1441:
f_1122:
; ((k1247 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1123
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^9455 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^9510 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1449
 mov rax, [SELF + 48]
; _x_44^9513 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9511 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^9514 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9512 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1451 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1452
; _fns_70^9517 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2239
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1452:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1123
L1453:
L1449:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1123
L1450:
f_2239:
; ((t1268 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1454
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2240
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1134
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1454:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1123
L1455:
f_1134:
; ((_fn_71^9520 . rdx) (k1270 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2243
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1110
f_2243:
; ((t1273 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2242
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___read_2dfile] ; read-file
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2242:
; ((t1272 . rcx))
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2241
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2241:
; ((t1271 . rcx))
 sub rsp, 16
 mov rax, L1456 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2240:
; ((t1269 . rcx))
 sub rsp, 16
 mov rax, L1457 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1123:
; ((k1248 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1124
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_62^9456 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9458 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1458
 mov rax, [SELF + 16]
; _x_44^9461 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9459 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9462 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9460 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1126
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
; _sk2_67^9463 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1133
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^9505 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L1460 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1461
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1126
L1461:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1133
L1462:
L1458:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1124
L1459:
f_1133:
; ((k1267 . rcx))
 mov rax, [SELF + 32]
; _x_44^9506 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L1463 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1464
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1126
L1464:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1124
L1465:
f_1126:
; ((k1251 . rcx))
 mov rax, [SELF + 40]
; _clauses_70^9464 = rdx
 mov rdx, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2231
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2231:
; ((t1252 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1466
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_71^9465 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1127
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t1253 = rsi
 mov rsi, rax
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1127
L1466:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1124
L1467:
f_1127:
; ((_cs_72^9466 . rdx) (k1255 . rcx))
; _v_73^9467 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1128
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_74^9468 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1468
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2238
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1132
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1468:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1128
L1469:
f_1132:
; ((_x_44^9504 . rdx) (k1266 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2238:
; ((t1265 . rcx))
 mov rdx, L1470 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1128:
; ((k1256 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1129
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_74^9469 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9488 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1471
 mov rax, [SELF + 16]
; _x_44^9490 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9489 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1472
L1471:
 mov rax, FALSE
L1472:
 cmp rax, FALSE
 je L1473
 mov rax, [SELF + 16]
; _x_44^9492 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^9491 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1475
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^9494 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_78^9495 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L1477 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1478
; _clauses_83^9500 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2236
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r9
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1478:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1129
L1479:
L1475:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1129
L1476:
L1473:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1129
L1474:
f_2236:
; ((t1263 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1480
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2237
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1480:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1129
L1481:
f_2237:
; ((t1264 . rcx))
 sub rsp, 16
 mov rax, L1482 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1129:
; ((k1257 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1130
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_74^9470 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^9473 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1483
 mov rax, [SELF + 40]
; _x_44^9476 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^9474 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^9477 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^9475 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1485
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^9479 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^9480 = r9
 mov r9, rax
; _req_81^9483 = r10
 mov r10, r8
; _clauses_85^9484 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2233
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], r10
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r12
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1485:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1130
L1486:
L1483:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1130
L1484:
f_2233:
; ((t1260 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1487
 mov rax, [SELF + 16]
; _more_87^9485 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2234
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1111
L1487:
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1130
L1488:
f_2234:
; ((t1261 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1489
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2235
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1489:
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1127
L1490:
f_2235:
; ((t1262 . rcx))
 sub rsp, 16
 mov rax, L1491 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1130:
; ((k1258 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1131
 mov rax, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 16]
; _c_76^9472 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L1492 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1131:
; ((k1259 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1493 ; 
 mov rsi, L1494 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1124:
; ((k1249 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1125
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L1495 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1125:
; ((k1250 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1496 ; 
 mov rsi, L1497 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1111:
; ((_expr_60^9406 . rdx) (k1232 . rcx))
; _v_61^9407 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1112
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_62^9408 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1498
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9441 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9442 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L1500 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1501
; _reqs_70^9447 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2230
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1501:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1112
L1502:
L1498:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1112
L1499:
f_2230:
; ((t1240 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1503
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___every] ; every
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1503:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1112
L1504:
f_1112:
; ((k1233 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1113
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_62^9409 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9432 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1505
 mov rax, [SELF + 16]
; _x_44^9435 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9433 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9436 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9434 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1507 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1508
; _reqs_70^9439 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2229
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1508:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1113
L1509:
L1505:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1113
L1506:
f_2229:
; ((t1239 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1510
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___any] ; any
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1510:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1113
L1511:
f_1113:
; ((k1234 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1114
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_62^9410 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^9418 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1512
 mov rax, [SELF + 24]
; _x_44^9421 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^9419 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^9422 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^9420 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1514 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1515
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1517
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9426 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1518
L1517:
 mov rax, FALSE
L1518:
 cmp rax, FALSE
 je L1519
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^9428 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2228
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r8
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1111
L1519:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1114
L1520:
L1515:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1114
L1516:
L1512:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1114
L1513:
f_2228:
; ((t1238 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1114:
; ((k1235 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1115
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_62^9411 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9414 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1521
 mov rax, [SELF + 16]
; _r_66^9415 = rsi
 mov rsi, rax
; _x_45^9416 = rdi
 mov rdi, rsi
 mov rax, [___implementation_2dfeatures] ; implementation-features
; _lst_46^9417 = r8
 mov r8, rax
 mov SELF, rcx
 mov rax, rdi
 mov r11, r8
 CALL member_eq
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1521:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1115
L1522:
f_1115:
; ((k1236 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1116
 mov rax, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 16]
; _r_64^9413 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L1523 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1116:
; ((k1237 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1524 ; 
 mov rsi, L1525 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1110:
; ((_path_60^9393 . rdx) (k1228 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2226
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___program_2dfile_2dfilename] ; program-file-filename
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2226:
; ((t1229 . rcx))
; _path_61^9394 = rdx
 mov rdx, rcx
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _x_44^9395 = rsi
 mov rsi, rax
 mov rax, rsi
 test rax, 1
 je L1526
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L1527
L1526:
 sub rsp, 8
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1528
 sub rsp, 8
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L1529
L1528:
 mov rax, FALSE
L1529:
L1527:
 cmp rax, FALSE
 je L1530
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^9403 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL lookup_char
; _x_45^9404 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L1532
 mov rax, rdi
 jmp L1533
L1532:
 mov rax, rsi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L1533:
; _x_45^9399 = rsi
 mov rsi, rax
 mov rax, L1534 ; 
; _lst_46^9400 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL member_eq
 jmp L1531
L1530:
 mov rax, FALSE
L1531:
 cmp rax, FALSE
 je L1535
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1535:
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2227
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1108
L1536:
f_2227:
; ((t1230 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1537
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1537:
 mov rcx, [SELF + 16]
 mov rdx, L1539 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1538:
f_1108:
; ((_name_60^9385 . rdx) (k1222 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_61^9386 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1109
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t1223 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1109
f_1109:
; ((_dirs_62^9387 . rdx) (k1225 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1540
 sub rsp, 16
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2225
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rsi, L1542 ; 
 mov rdi, [SELF + 24]
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1540:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1541:
f_2225:
; ((t1226 . rcx))
 sub rsp, 8
 mov rax, rcx
 CALL copy_to_buffer
  LIBCALL2 stat, buffer, stat_buffer
  test rax, rax
  SET_T rax
  cmovnz rax, FALSE
 mov [rsp + 0], rax
 mov r11, rcx
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L1543
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1543:
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^9392 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1109
L1544:
f_1106:
; ((_x_52^9359 . rdx) (k1294 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1545
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1545:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1547
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^9363 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^9364 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2257
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1547:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2258
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1548:
L1546:
f_2258:
; ((t1297 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1549
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2259
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [___program_2dfile_2dfilename] ; program-file-filename
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1549:
 mov rax, [SELF + 24]
; _x_44^9372 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^9371 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L1551
 mov rcx, [SELF + 16]
 mov rdx, L1553 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1551:
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___stringify] ; stringify
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1552:
L1550:
f_2259:
; ((t1298 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___join] ; join
 mov rsi, L1554 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2257:
; ((t1295 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^9367 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1104:
; ((_name_52^9336 . rdx) (k1299 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^9351 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^9352 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2264
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2264:
; ((t1305 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^9355 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2262
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___string_2d_3elist] ; string->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2262:
; ((t1303 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1105
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2261
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2261:
; ((t1301 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2260
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___list_2d_3estring] ; list->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2260:
; ((t1300 . rcx))
 mov rdx, L1555 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1105:
; ((_c_53^9337 . rdx) (k1302 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, L1556 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L1557
 mov rcx, L1559 ; 
 jmp L1558
L1557:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^9344 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 195 ; '97
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
; _x_47^9346 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L1560
 mov rax, rdi
 jmp L1561
L1560:
 mov rax, rsi
 mov r11, 245 ; '122
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
L1561:
 cmp rax, FALSE
 je L1562
 mov rax, rsi
 jmp L1563
L1562:
 mov rax, 447 ; '223
 mov r11, rsi
 and rax, r11
  or rax, 1
L1563:
; _x_44^9342 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL lookup_char
; _x_45^9349 = rdi
 mov rdi, rax
 mov rcx, rdi
 cmp rcx, FALSE
 je L1564
 mov rcx, rdi
 jmp L1565
L1564:
 mov rax, rsi
 mov [ALLOC + 8], rax
 mov rcx, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 16
L1565:
L1558:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1099:
; ((_x_52^9318 . rdx) (k1316 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2277
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [___stringify] ; stringify
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2277:
; ((t1325 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2276
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___string_2d_3elist] ; string->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2276:
; ((t1324 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1100
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2271
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2271:
; ((t1317 . rcx))
 mov rdx, [___string_2dappend] ; string-append
 mov rsi, L1566 ; 
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1100:
; ((_c_53^9319 . rdx) (k1318 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^9322 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 195 ; '97
 cmp rax, r11
 jge L1567
 mov rax, FALSE
 jmp L1568
L1567:
 mov rax, rsi
 mov r11, 245 ; '122
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmovg r11, rax
 mov rax, r11
L1568:
; _x_54^9320 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L1569
 mov rax, rsi
 jmp L1570
L1569:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^9325 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 97 ; '48
 cmp rax, r11
 jge L1571
 mov rax, FALSE
 jmp L1572
L1571:
 mov rax, rdi
 mov r11, 115 ; '57
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmovg r11, rax
 mov rax, r11
L1572:
L1570:
 cmp rax, FALSE
 je L1573
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___string] ; string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L1573:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_54^9327 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2272
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___number_2d_3estring] ; number->string
 mov rdx, rsi
 mov rsi, 33 ; '16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1574:
f_2272:
; ((t1319 . rcx))
; _s_55^9329 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2273
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1321 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2274
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov SELF, [____25_3c] ; %<
 mov rsi, 257 ; '128
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2274:
; ((t1322 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1575
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___padl] ; padl
 mov rsi, 5 ; '2
 mov rdi, L1577 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L1575:
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2275
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___padl] ; padl
 mov rsi, 11 ; '5
 mov rdi, L1578 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1576:
f_2275:
; ((t1323 . rcx))
 mov rdx, L1579 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2273:
; ((t1320 . rcx))
 mov rdx, L1580 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1011:
; ((_form_52^8439 . rdx) (k1326 . rcx))
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _defs_53^8440 = rsi
 mov rsi, rax
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _counter_54^8441 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _temp_55^8442 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _k-id_56^8443 = r9
 mov r9, rax
 mov rax, undefined ; 
; _zero_57^8444 = r10
 mov r10, rax
 mov rax, undefined ; 
; _i_58^8445 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _one_59^8446 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _two_60^8447 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _bindk_61^8448 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _callk_62^8449 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _head_63^8450 = local #4
 mov [locals + 32], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _simple?_64^8451 = local #5
 mov [locals + 40], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1012
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1013
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1014
 mov [ALLOC + 16], r8
 mov rax, [locals + 0] ; _one_59^8446
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
 mov r10, rax
 mov rax, 1 ; '0
 mov r12, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1015
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], r9
 mov rax, [locals + 16] ; _bindk_61^8448
 mov [ALLOC + 32], rax
 mov rax, [locals + 40] ; _simple?_64^8451
 mov [ALLOC + 40], rax
 mov rax, [locals + 8] ; _two_60^8447
 mov [ALLOC + 48], rax
 mov rax, [locals + 32] ; _head_63^8450
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov rax, [locals + 0] ; _one_59^8446
 mov [ALLOC + 72], rax
 mov rax, [locals + 24] ; _callk_62^8449
 mov [ALLOC + 80], rax
 mov r11, ALLOC
 add ALLOC, 88
 mov rax, [locals + 0] ; _one_59^8446
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1054
 mov rax, [locals + 8] ; _two_60^8447
 mov [ALLOC + 16], rax
 mov rax, [locals + 0] ; _one_59^8446
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 8] ; _two_60^8447
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1073
 mov [ALLOC + 16], r8
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 16] ; _bindk_61^8448
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1074
 mov rax, [locals + 8] ; _two_60^8447
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 24] ; _callk_62^8449
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1075
 mov rax, [locals + 8] ; _two_60^8447
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov rax, [locals + 0] ; _one_59^8446
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov rax, [locals + 40] ; _simple?_64^8451
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [locals + 32] ; _head_63^8450
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1077
 mov rax, [locals + 40] ; _simple?_64^8451
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 40] ; _simple?_64^8451
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2429
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, r10
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1014
f_2429:
; ((t1591 . rcx))
; _result_65^9317 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2430
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov SELF, [___delete_2dduplicates] ; delete-duplicates
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2430:
; ((t1592 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1077:
; ((_x_65^9148 . rdx) (k1550 . rcx))
; _v_66^9149 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1078
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9150 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1581
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^9295 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1093
 mov rax, ALLOC
 add ALLOC, 16
; _sk2_71^9299 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1094
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], r8
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^9300 = r10
 mov r10, rax
 mov rax, r8
 mov r11, L1583 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1584
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1093
L1584:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1094
L1585:
L1581:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1078
L1582:
f_1094:
; ((k1586 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1095
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^9301 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9313 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1586 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1587
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1093
L1587:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1095
L1588:
f_1095:
; ((k1587 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1096
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^9302 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9311 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1589 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1590
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1093
L1590:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1096
L1591:
f_1096:
; ((k1588 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1097
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^9303 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9309 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1592 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1593
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1093
L1593:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1097
L1594:
f_1097:
; ((k1589 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1098
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^9304 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9307 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1595 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1596
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1093
L1596:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1098
L1597:
f_1098:
; ((k1590 . rcx))
 mov rax, [SELF + 32]
; _x_44^9305 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L1598 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1599
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1093
L1599:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1078
L1600:
f_1093:
; ((k1585 . rcx))
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1078:
; ((k1551 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1079
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9151 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9293 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1601
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1601:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1079
L1602:
f_1079:
; ((k1552 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1080
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9152 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^9279 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1603
 mov rax, [SELF + 24]
; _x_44^9282 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^9280 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^9283 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^9281 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1605 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1606
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_73^9286 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1092
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r8
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t1581 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1092
L1606:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1080
L1607:
L1603:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1080
L1604:
f_1092:
; ((_ls_74^9287 . rdx) (k1583 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1608
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1608:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1610
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^9290 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2428
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1610:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1080
L1611:
L1609:
f_2428:
; ((t1584 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1612
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^9292 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1092
L1612:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1080
L1613:
f_1080:
; ((k1553 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1081
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9153 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9243 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1614
 mov rax, [SELF + 16]
; _x_44^9246 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^9244 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9247 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^9245 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1616 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1617
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1619
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^9251 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^9252 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_76^9255 = r10
 mov r10, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1090
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1573 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1090
L1619:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1620:
L1617:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1618:
L1614:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1615:
f_1090:
; ((_ls_77^9256 . rdx) (k1575 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1621
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_80^9258 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1091
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t1576 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1091
L1621:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1623
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^9266 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1625
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^9270 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1627
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9274 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1628
L1627:
 mov rax, FALSE
L1628:
 cmp rax, FALSE
 je L1629
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^9276 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2426
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r8
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1629:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1630:
L1625:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1626:
L1623:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1624:
L1622:
f_2426:
; ((t1580 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1631
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^9278 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1090
L1631:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1081
L1632:
f_1091:
; ((_ls_81^9259 . rdx) (k1578 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1633
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1633:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1635
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^9262 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2425
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1635:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1081
L1636:
L1634:
f_2425:
; ((t1579 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1637
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^9264 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1091
L1637:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1081
L1638:
f_1081:
; ((k1554 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1082
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9154 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^9224 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1639
 mov rax, [SELF + 24]
; _x_44^9227 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9225 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^9228 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9226 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1641 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1642
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1644
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^9233 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_76^9236 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1089
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r9
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t1569 = r10
 mov r10, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1089
L1644:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1082
L1645:
L1642:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1082
L1643:
L1639:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1082
L1640:
f_1089:
; ((_ls_77^9237 . rdx) (k1571 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1646
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1646:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1648
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^9240 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2422
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1648:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1082
L1649:
L1647:
f_2422:
; ((t1572 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1650
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^9242 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1089
L1650:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1082
L1651:
f_1082:
; ((k1555 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1083
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9155 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9200 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1652
 mov rax, [SELF + 16]
; _x_44^9203 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9201 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9204 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9202 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1654 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1655
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1657
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^9209 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1659
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^9214 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_79^9217 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1088
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r10
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1565 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1088
L1659:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1083
L1660:
L1657:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1083
L1658:
L1655:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1083
L1656:
L1652:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1083
L1653:
f_1088:
; ((_ls_80^9218 . rdx) (k1567 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1661
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1661:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1663
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^9221 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2420
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1663:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1083
L1664:
L1662:
f_2420:
; ((t1568 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1665
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^9223 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1088
L1665:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1083
L1666:
f_1083:
; ((k1556 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1084
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_67^9156 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^9176 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1667
 mov rax, [SELF + 24]
; _x_44^9179 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9177 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^9180 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9178 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1669 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1670
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1672
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^9185 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1674
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^9190 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_79^9193 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1087
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r10
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1561 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1087
L1674:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1084
L1675:
L1672:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1084
L1673:
L1670:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1084
L1671:
L1667:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1084
L1668:
f_1087:
; ((_ls_80^9194 . rdx) (k1563 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1676
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1676:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1678
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^9197 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2418
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1678:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1084
L1679:
L1677:
f_2418:
; ((t1564 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1680
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^9199 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1087
L1680:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1084
L1681:
f_1084:
; ((k1557 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1085
 mov rax, ALLOC
 add ALLOC, 16
; _failure_67^9157 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9159 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1682
 mov rax, [SELF + 16]
; _x_44^9162 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9160 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9163 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9161 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1684 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1685
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1687
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^9168 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1689
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9172 = r9
 mov r9, rax
 mov rax, r9
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1690
L1689:
 mov rax, FALSE
L1690:
 cmp rax, FALSE
 je L1691
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^9174 = r9
 mov r9, rax
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2416
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r9
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1691:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1085
L1692:
L1687:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1085
L1688:
L1685:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1085
L1686:
L1682:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1085
L1683:
f_2416:
; ((t1560 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1693
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L1693:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1085
L1694:
f_1085:
; ((k1558 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1086
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1086:
; ((k1559 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1695 ; 
 mov rsi, L1696 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1075:
; ((_wrap_66^9134 . rsi) (_xs_65^9133 . rdx) (k1536 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_67^9135 = rdi
 mov rdi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1076
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t1537 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1076
f_1076:
; ((_xs2_69^9137 . rsi) (_xs_68^9136 . rdx) (k1539 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1697
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2407
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1697:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9139 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2408
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1698:
f_2408:
; ((t1541 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1699
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2410
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L1699:
 sub rsp, 16
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2411
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L1700:
f_2411:
; ((t1544 . rcx))
; _t_71^9144 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2413
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1013
f_2413:
; ((t1546 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2414
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rdx, [SELF + 56]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2414:
; ((t1547 . rcx))
 sub rsp, 32
 mov rax, [SELF + 24]
; _x_45^9146 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^9147 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
; _x_44^9145 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2415
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1076
f_2415:
; ((t1548 . rcx))
 mov rdx, L1701 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2412
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2412:
; ((t1545 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_2410:
; ((t1543 . rcx))
 mov rax, [SELF + 40]
; _y_46^9143 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1542 = rsi
 mov rsi, rax
 sub rsp, 32
 mov [rsp + 0], rsi
 mov rax, [SELF + 32]
; _x_44^9141 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1076
f_2407:
; ((t1540 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_1074:
; ((_thunk_66^9119 . rsi) (_k_65^9118 . rdx) (k1529 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2401
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2401:
; ((t1530 . rcx))
 mov rax, [SELF + 32]
; _x_44^9121 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1702
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2402
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L1702:
 mov rax, [SELF + 32]
; _x_44^9123 = rdx
 mov rdx, rax
; _x_44^9127 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9126 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9125 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9124 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _v_68^9122 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2405
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L1703:
f_2405:
; ((t1534 . rcx))
 mov rdx, [SELF + 32]
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2404
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2404:
; ((t1533 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2403
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2403:
; ((t1532 . rcx))
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_44^9128 = rdx
 mov rdx, rax
; _x_44^9132 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9131 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9130 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9129 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rdx, L1704 ; 
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rdi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2402:
; ((t1531 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1073:
; ((_proc_66^9115 . rsi) (_k_65^9114 . rdx) (k1523 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1705
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rsi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L1705:
 sub rsp, 16
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2397
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L1706:
f_2397:
; ((t1524 . rcx))
; _t_67^9117 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2400
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rsi, [SELF + 32]
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2400:
; ((t1527 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2398
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2398:
; ((t1525 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2399
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2399:
; ((t1526 . rcx))
 mov rdx, L1707 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1054:
; ((_x_65^8870 . rdx) (k1474 . rcx))
; _v_66^8871 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1055
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_67^8872 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1708
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1708:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1055
L1709:
f_1055:
; ((k1475 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1056
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_67^8873 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9085 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1710
 mov rax, [SELF + 32]
; _x_44^9088 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9086 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^9089 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9087 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1712 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1713
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1715
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^9093 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^9094 = r9
 mov r9, rax
; _id_76^9097 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1717
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^9099 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^9100 = local #0
 mov [locals + 0], rax
; _llist_81^9103 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_79^9100
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1719
 mov rax, [locals + 0] ; _x_79^9100
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9105 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^9105
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1720
L1719:
 mov rax, FALSE
L1720:
 cmp rax, FALSE
 je L1721
 mov rax, [locals + 0] ; _x_79^9100
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^9107 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_82^9107
; _body_84^9109 = local #3
 mov [locals + 24], rax
 sub rsp, 16
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2395
 mov rax, [locals + 24] ; _body_84^9109
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [locals + 8] ; _llist_81^9103
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r10
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L1723 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L1721:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1056
L1722:
L1717:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1056
L1718:
L1715:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1056
L1716:
L1713:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1056
L1714:
L1710:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1056
L1711:
f_2395:
; ((t1520 . rcx))
; _k_85^9110 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2396
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2396:
; ((t1521 . rcx))
 mov rax, [SELF + 32]
; _x_45^9111 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _y_46^9112 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rdi, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rdi
 mov rdi, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 16]
 mov rdx, L1724 ; 
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1056:
; ((k1476 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1057
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8874 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9036 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1725
 mov rax, [SELF + 32]
; _x_44^9039 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9037 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^9040 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9038 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1727 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1728
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1730
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^9044 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^9045 = r9
 mov r9, rax
; _id_75^9048 = r10
 mov r10, r8
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_81^9049 = r12
 mov r12, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1071
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], rdx
 mov [ALLOC + 48], r12
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r12
 mov rax, [rax + 8]
; t1510 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; t1510
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1071
L1730:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1057
L1731:
L1728:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1057
L1729:
L1725:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1057
L1726:
f_1071:
; ((_p-ls_84^9052 . rdi) (_p-ls_83^9051 . rsi) (_ls_82^9050 . rdx) (k1512 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1732
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2389
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1732:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1734
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^9066 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1736
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^9069 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_88^9070 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1738
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^9075 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1739
L1738:
 mov rax, FALSE
L1739:
 cmp rax, FALSE
 je L1740
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_91^9077 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1071
L1740:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1057
L1741:
L1736:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1057
L1737:
L1734:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1057
L1735:
L1733:
f_2389:
; ((t1513 . rcx))
; _bodies_85^9054 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2390
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 48]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2390:
; ((t1514 . rcx))
 mov rax, [SELF + 48]
; _x_45^9058 = rdx
 mov rdx, rax
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2392
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1072
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rdi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1072:
; ((_body_88^9061 . rsi) (_llist_87^9060 . rdx) (k1517 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2393
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L1742 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
f_2393:
; ((t1518 . rcx))
; _k_89^9062 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2394
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2394:
; ((t1519 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^9063 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^9064 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2392:
; ((t1516 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1515 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L1743 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1057:
; ((k1477 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1058
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8875 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^9026 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1744
 mov rax, [SELF + 32]
; _x_44^9029 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9027 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^9030 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9028 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1746 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1747
; _xs_75^9033 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2386
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1747:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1058
L1748:
L1744:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1058
L1745:
f_2386:
; ((t1508 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1749
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2387
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1749:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1058
L1750:
f_2387:
; ((t1509 . rcx))
 sub rsp, 16
 mov rax, L1751 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1058:
; ((k1478 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1059
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8876 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^9008 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1752
 mov rax, [SELF + 16]
; _x_44^9011 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^9009 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^9012 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^9010 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1754 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1755
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1757
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^9016 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^9017 = r9
 mov r9, rax
; _name_76^9020 = r10
 mov r10, r8
; _xs_80^9021 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2383
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1757:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1059
L1758:
L1755:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1059
L1756:
L1752:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1059
L1753:
f_2383:
; ((t1505 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1759
 mov rax, [SELF + 16]
; _x_45^9024 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2385
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1759:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1059
L1760:
f_2385:
; ((t1507 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1506 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L1761 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1059:
; ((k1479 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1060
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8877 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8982 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1762
 mov rax, [SELF + 32]
; _x_44^8985 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^8983 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8986 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^8984 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1764 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1765
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1767
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8990 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^8991 = r9
 mov r9, rax
; _name_76^8994 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1769
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8996 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^8997 = local #0
 mov [locals + 0], rax
; _cnd_81^9000 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_79^8997
; _xs_85^9001 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2379
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [locals + 16] ; _xs_85^9001
 mov [ALLOC + 40], rax
 mov rax, [locals + 8] ; _cnd_81^9000
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_79^8997
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1769:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1060
L1770:
L1767:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1060
L1768:
L1765:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1060
L1766:
L1762:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1060
L1763:
f_2379:
; ((t1501 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1771
 mov rax, [SELF + 16]
; _x_45^9004 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_45^9006 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2382
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1771:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1060
L1772:
f_2382:
; ((t1504 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1503 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1502 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L1773 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1060:
; ((k1480 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1061
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8878 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8956 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1774
 mov rax, [SELF + 16]
; _x_44^8959 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^8957 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^8960 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^8958 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1776 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1777
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1779
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8964 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^8965 = r9
 mov r9, rax
; _t_76^8968 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1781
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8970 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^8971 = local #0
 mov [locals + 0], rax
; _s_81^8974 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_79^8971
; _xs_85^8975 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2375
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [locals + 16] ; _xs_85^8975
 mov [ALLOC + 40], rax
 mov rax, [locals + 8] ; _s_81^8974
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_79^8971
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1781:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1061
L1782:
L1779:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1061
L1780:
L1777:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1061
L1778:
L1774:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1061
L1775:
f_2375:
; ((t1497 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1783
 mov rax, [SELF + 16]
; _x_45^8978 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_45^8980 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2378
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1783:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1061
L1784:
f_2378:
; ((t1500 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1499 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1498 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L1785 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1061:
; ((k1481 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1062
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8879 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8937 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1786
 mov rax, [SELF + 32]
; _x_44^8940 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^8938 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8941 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^8939 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1788 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1789
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1791
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8945 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^8946 = r9
 mov r9, rax
; _v_76^8949 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1793
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8951 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1794
L1793:
 mov rax, FALSE
L1794:
 cmp rax, FALSE
 je L1795
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^8953 = r12
 mov r12, rax
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2374
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r12
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L1795:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1062
L1796:
L1791:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1062
L1792:
L1789:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1062
L1790:
L1786:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1062
L1787:
f_2374:
; ((t1496 . rcx))
 mov rdx, L1797 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1062:
; ((k1482 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1063
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8880 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8920 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1798
 mov rax, [SELF + 16]
; _x_44^8923 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^8921 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^8924 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1067
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_71^8925 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1068
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^8926 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, L1800 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1801
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1067
L1801:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1068
L1802:
L1798:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1063
L1799:
f_1068:
; ((k1493 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1069
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^8927 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8933 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1803 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1804
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1067
L1804:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1069
L1805:
f_1069:
; ((k1494 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1070
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_72^8928 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8931 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1806 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1807
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1067
L1807:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1070
L1808:
f_1070:
; ((k1495 . rcx))
 mov rax, [SELF + 32]
; _x_44^8929 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L1809 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1810
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1067
L1810:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1063
L1811:
f_1067:
; ((k1492 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1063:
; ((k1483 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1064
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_67^8881 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8885 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1812
 mov rax, [SELF + 32]
; _x_44^8888 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^8886 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8889 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^8887 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1814 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1815
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1817
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^8893 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^8894 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1819
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8898 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1820
L1819:
 mov rax, FALSE
L1820:
 cmp rax, FALSE
 je L1821
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8900 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1823
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^8903 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^8904 = local #0
 mov [locals + 0], rax
; _var_79^8907 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_77^8904
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1825
 mov rax, [locals + 0] ; _x_77^8904
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8909 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^8909
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1826
L1825:
 mov rax, FALSE
L1826:
 cmp rax, FALSE
 je L1827
 mov rax, [locals + 0] ; _x_77^8904
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^8911 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1829
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8915 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _x_44^8915
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1830
L1829:
 mov rax, FALSE
L1830:
 cmp rax, FALSE
 je L1831
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^8917 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _w_83^8917
; _y_85^8919 = local #4
 mov [locals + 32], rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2373
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [locals + 32] ; _y_85^8919
 mov [ALLOC + 32], rax
 mov rax, [locals + 8] ; _var_79^8907
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, [locals + 16] ; _w_80^8911
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L1831:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1832:
L1827:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1828:
L1823:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1824:
L1821:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1822:
L1817:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1818:
L1815:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1816:
L1812:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1064
L1813:
f_2373:
; ((t1491 . rcx))
 mov rdx, [SELF + 40]
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2372
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2372:
; ((t1490 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2370
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2370:
; ((t1488 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2371
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
f_2371:
; ((t1489 . rcx))
 mov rdx, L1833 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1064:
; ((k1484 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1065
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_67^8882 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _xs_71^8884 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2369
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2369:
; ((t1487 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1834
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L1834:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1065
L1835:
f_1065:
; ((k1485 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1066
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L1836 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1066:
; ((k1486 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L1837 ; 
 mov rsi, L1838 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1015:
; ((_k_66^8460 . rsi) (_x_65^8459 . rdx) (k1346 . rcx))
; _v_67^8461 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1016
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov [ALLOC + 64], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdi
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8462 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1839
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8855 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8856 = r10
 mov r10, rax
 mov rax, r9
 mov r11, L1841 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1842
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1844
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8862 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8863 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 jne L1846
 mov rax, [locals + 0] ; _x_75^8863
; _body_79^8867 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2368
 mov rax, [locals + 8] ; _body_79^8867
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], r8
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_75^8863
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1846:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1016
L1847:
L1844:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1016
L1845:
L1842:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1016
L1843:
L1839:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1016
L1840:
f_2368:
; ((t1472 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1848
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _y_46^8869 = rdx
 mov rdx, rax
 mov rax, L1850 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
L1848:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1016
L1849:
f_1016:
; ((k1347 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1017
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8463 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8814 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1851
 mov rax, [SELF + 80]
; _x_44^8817 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^8815 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _x_44^8818 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^8816 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1853 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1854
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1856
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8822 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^8823 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1858
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^8827 = r10
 mov r10, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^8828 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1860
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8832 = local #0
 mov [locals + 0], rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^8833 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _w_78^8832
; _v_81^8836 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, [locals + 8] ; _x_79^8833
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1862
 mov rax, [locals + 8] ; _x_79^8833
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8838 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _x_44^8838
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1863
L1862:
 mov rax, FALSE
L1863:
 cmp rax, FALSE
 je L1864
 mov rax, [locals + 8] ; _x_79^8833
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^8840 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _w_82^8840
; _x_84^8842 = local #4
 mov [locals + 32], rax
; _more_86^8843 = local #5
 mov [locals + 40], r12
; _body_90^8844 = local #6
 mov [locals + 48], r9
 sub rsp, 8
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2354
 mov rax, [locals + 48] ; _body_90^8844
 mov [ALLOC + 16], rax
 mov rax, [locals + 40] ; _more_86^8843
 mov [ALLOC + 24], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [locals + 16] ; _v_81^8836
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [locals + 32] ; _x_84^8842
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 96], rax
 mov [ALLOC + 104], rdx
 mov rax, ALLOC
 add ALLOC, 112
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1864:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1865:
L1860:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1861:
L1858:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1859:
L1856:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1857:
L1854:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1855:
L1851:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1852:
f_2354:
; ((t1458 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1866
 sub rsp, 24
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2355
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1866:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 104]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1017
L1867:
f_2355:
; ((t1459 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1868
 sub rsp, 24
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2359
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L1868:
 sub rsp, 16
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2360
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L1869:
f_2360:
; ((t1464 . rcx))
; _t_91^8849 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2362
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1013
f_2362:
; ((t1466 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2363
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rdx, [SELF + 72]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2363:
; ((t1467 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2367
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rdx, [SELF + 80]
 mov rsi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2367:
; ((t1471 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2365
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2365:
; ((t1469 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
; _x_45^8852 = rdx
 mov rdx, rax
 mov rax, [SELF + 72]
; _y_46^8853 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8851 = rdx
 mov rdx, rax
 mov rax, L1870 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2366
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2366:
; ((t1470 . rcx))
 mov rdx, L1871 ; 
 mov rsi, [SELF + 56]
 mov rdi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2364
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2364:
; ((t1468 . rcx))
 mov rdx, L1872 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2361
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2361:
; ((t1465 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_2359:
; ((t1463 . rcx))
 mov rdx, [SELF + 56]
 mov rsi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2358
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2358:
; ((t1462 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2356
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2356:
; ((t1460 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_45^8847 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _y_46^8848 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8846 = rdx
 mov rdx, rax
 mov rax, L1873 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2357
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2357:
; ((t1461 . rcx))
 mov rdx, L1874 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_1017:
; ((k1348 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1018
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8464 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8767 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1875
 mov rax, [SELF + 40]
; _x_44^8770 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^8768 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8771 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^8769 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1877 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1878
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1880
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8775 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^8776 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_80^8779 = r10
 mov r10, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1051
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1445 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1051
L1880:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1881:
L1878:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1879:
L1875:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1876:
f_1051:
; ((_p-ls_83^8782 . rdi) (_p-ls_82^8781 . rsi) (_ls_81^8780 . rdx) (k1447 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1882
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2346
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1882:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1884
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_84^8795 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1886
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_86^8798 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_87^8799 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1888
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8804 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1889
L1888:
 mov rax, FALSE
L1889:
 cmp rax, FALSE
 je L1890
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_90^8806 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1051
L1890:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1891:
L1886:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1887:
L1884:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1885:
L1883:
f_2346:
; ((t1448 . rcx))
; _vals_84^8784 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2347
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2347:
; ((t1449 . rcx))
; _vars_85^8785 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _body_89^8786 = rsi
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2348
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2348:
; ((t1450 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1892
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2351
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1052
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1892:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1018
L1893:
f_1052:
; ((_var_90^8791 . rdx) (k1457 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rsi, L1894 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2351:
; ((t1453 . rcx))
; _x_45^8789 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2353
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1053
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1053:
; ((_val_91^8793 . rsi) (_var_90^8792 . rdx) (k1456 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25list] ; %list
 mov rdi, rsi
 mov rsi, rdx
 mov rdx, L1895 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2353:
; ((t1455 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2352
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2352:
; ((t1454 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1452 = rdx
 mov rdx, rax
 mov rax, L1896 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1451 = rsi
 mov rsi, rax
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_1018:
; ((k1349 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1019
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8465 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8760 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1897
 mov rax, [SELF + 80]
; _x_44^8762 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8761 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1898
L1897:
 mov rax, FALSE
L1898:
 cmp rax, FALSE
 je L1899
 mov rax, [SELF + 80]
; _x_44^8764 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^8763 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L1901 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1902
 sub rsp, 24
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L1904 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
L1902:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1019
L1903:
L1899:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1019
L1900:
f_1019:
; ((k1350 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1020
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8466 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8747 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1905
 mov rax, [SELF + 40]
; _x_44^8750 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8748 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8751 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8749 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1907 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1908
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1910
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8755 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L1911
L1910:
 mov rax, FALSE
L1911:
 cmp rax, FALSE
 je L1912
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8757 = r8
 mov r8, rax
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
L1912:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1020
L1913:
L1908:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1020
L1909:
L1905:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1020
L1906:
f_1020:
; ((k1351 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1021
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8467 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8728 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1914
 mov rax, [SELF + 80]
; _x_44^8731 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8729 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _x_44^8732 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8730 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1916 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1917
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1919
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8736 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8737 = r9
 mov r9, rax
; _x1_77^8740 = r10
 mov r10, r8
; _body_81^8741 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2334
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r12
 mov rax, [SELF + 96]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1919:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1021
L1920:
L1917:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1021
L1918:
L1914:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1021
L1915:
f_2334:
; ((t1434 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1921
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2335
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1921:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1021
L1922:
f_2335:
; ((t1435 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1923
 sub rsp, 16
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2339
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L1923:
 sub rsp, 16
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2340
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L1924:
f_2340:
; ((t1440 . rcx))
; _t_82^8744 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2342
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1013
f_2342:
; ((t1442 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2343
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2343:
; ((t1443 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
; _y_46^8746 = rdx
 mov rdx, rax
 mov rax, L1925 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2344
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2344:
; ((t1444 . rcx))
 mov rdx, L1926 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2341
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2341:
; ((t1441 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_2339:
; ((t1439 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2338
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rsi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2338:
; ((t1438 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2337
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2337:
; ((t1437 . rcx))
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2336
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, [SELF + 16]
; _y_46^8743 = rdx
 mov rdx, rax
 mov rax, L1927 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rdi, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rdi
 mov rdi, ALLOC
 add ALLOC, 24
 mov SELF, [____25list] ; %list
 mov rdx, L1928 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2336:
; ((t1436 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_1021:
; ((k1352 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1022
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8468 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8709 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1929
 mov rax, [SELF + 40]
; _x_44^8712 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8710 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8713 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8711 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1931 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1932
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1934
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^8718 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_77^8721 = r9
 mov r9, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1049
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], r9
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t1429 = r10
 mov r10, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1049
L1934:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1022
L1935:
L1932:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1022
L1933:
L1929:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1022
L1930:
f_1049:
; ((_ls_78^8722 . rdx) (k1431 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1936
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1050
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1074
L1936:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1938
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^8725 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2333
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1938:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1022
L1939:
L1937:
f_2333:
; ((t1433 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1940
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^8727 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1049
L1940:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1022
L1941:
f_1050:
; ((k1432 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1022:
; ((k1353 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1023
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8469 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8689 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1942
 mov rax, [SELF + 80]
; _x_44^8692 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8690 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _x_44^8693 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8691 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1944 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1945
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1947
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8697 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8698 = r9
 mov r9, rax
; _name_77^8701 = r10
 mov r10, r8
; _xs_81^8702 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2328
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r12
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 96]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1947:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1023
L1948:
L1945:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1023
L1946:
L1942:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1023
L1943:
f_2328:
; ((t1424 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1949
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2329
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1048
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1949:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1023
L1950:
f_1048:
; ((k1428 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1012
f_2329:
; ((t1425 . rcx))
; _temps_82^8703 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2331
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [____25list] ; %list
 mov rdi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2331:
; ((t1427 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^8707 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^8708 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8706 = rdx
 mov rdx, rax
 mov rax, L1951 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, L1952 ; 
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2330
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rdi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2330:
; ((t1426 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_1023:
; ((k1354 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1024
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8470 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8665 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1953
 mov rax, [SELF + 40]
; _x_44^8668 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8666 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8669 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8667 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1955 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1956
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1958
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8674 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1960
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^8679 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_80^8682 = r10
 mov r10, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1046
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], r10
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1419 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1046
L1960:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1024
L1961:
L1958:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1024
L1959:
L1956:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1024
L1957:
L1953:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1024
L1954:
f_1046:
; ((_ls_81^8683 . rdx) (k1421 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1962
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1047
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1074
L1962:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1964
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^8686 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2327
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1964:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1024
L1965:
L1963:
f_2327:
; ((t1423 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1966
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^8688 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1046
L1966:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1024
L1967:
f_1047:
; ((k1422 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1024:
; ((k1355 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1025
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8471 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8637 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1968
 mov rax, [SELF + 80]
; _x_44^8640 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8638 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _x_44^8641 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8639 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1970 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1971
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1973
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8645 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8646 = r9
 mov r9, rax
; _name_77^8649 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1975
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^8651 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^8652 = local #0
 mov [locals + 0], rax
; _cnd_82^8655 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_80^8652
; _xs_86^8656 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2322
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [locals + 16] ; _xs_86^8656
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 96]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov rax, [locals + 8] ; _cnd_82^8655
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_80^8652
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1975:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1025
L1976:
L1973:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1025
L1974:
L1971:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1025
L1972:
L1968:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1025
L1969:
f_2322:
; ((t1414 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1977
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2323
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1045
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L1977:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1025
L1978:
f_1045:
; ((k1418 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1012
f_2323:
; ((t1415 . rcx))
; _temps_87^8657 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2325
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [____25list] ; %list
 mov rdi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2325:
; ((t1417 . rcx))
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^8661 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_45^8663 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _y_46^8664 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8662 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8660 = rdx
 mov rdx, rax
 mov rax, L1979 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, L1980 ; 
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2324
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rdi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2324:
; ((t1416 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_1025:
; ((k1356 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1026
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8472 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8613 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1981
 mov rax, [SELF + 40]
; _x_44^8616 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8614 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8617 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8615 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1983 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1984
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1986
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8622 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1988
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^8627 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_80^8630 = r10
 mov r10, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1043
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], r10
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1409 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1043
L1988:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1026
L1989:
L1986:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1026
L1987:
L1984:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1026
L1985:
L1981:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1026
L1982:
f_1043:
; ((_ls_81^8631 . rdx) (k1411 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L1990
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1044
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1074
L1990:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L1992
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^8634 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2321
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L1992:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1026
L1993:
L1991:
f_2321:
; ((t1413 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L1994
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^8636 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1043
L1994:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1026
L1995:
f_1044:
; ((k1412 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1026:
; ((k1357 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1027
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8473 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8585 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L1996
 mov rax, [SELF + 80]
; _x_44^8588 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8586 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _x_44^8589 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8587 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L1998 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L1999
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2001
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8593 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8594 = r9
 mov r9, rax
; _t_77^8597 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2003
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^8599 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^8600 = local #0
 mov [locals + 0], rax
; _s_82^8603 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_80^8600
; _xs_86^8604 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2316
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [locals + 16] ; _xs_86^8604
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 96]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov rax, [locals + 8] ; _s_82^8603
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_80^8600
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2003:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1027
L2004:
L2001:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1027
L2002:
L1999:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1027
L2000:
L1996:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1027
L1997:
f_2316:
; ((t1404 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2005
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2317
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1042
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2005:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1027
L2006:
f_1042:
; ((k1408 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1012
f_2317:
; ((t1405 . rcx))
; _temps_87^8605 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2319
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [____25list] ; %list
 mov rdi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2319:
; ((t1407 . rcx))
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^8609 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_45^8611 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _y_46^8612 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8610 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8608 = rdx
 mov rdx, rax
 mov rax, L2007 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, L2008 ; 
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2318
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rdi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2318:
; ((t1406 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_1027:
; ((k1358 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1028
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8474 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8572 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2009
 mov rax, [SELF + 40]
; _x_44^8575 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8573 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8576 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8574 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2011 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2012
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2014
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8580 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2015
L2014:
 mov rax, FALSE
L2015:
 cmp rax, FALSE
 je L2016
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8582 = r8
 mov r8, rax
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1041
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1074
L2016:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1028
L2017:
L2012:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1028
L2013:
L2009:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1028
L2010:
f_1041:
; ((k1403 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1028:
; ((k1359 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1029
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; _failure_68^8475 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2315
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
f_2315:
; ((t1401 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2018
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1040
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1074
L2018:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1029
L2019:
f_1040:
; ((k1402 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1029:
; ((k1360 . rcx))
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1030
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
; _failure_68^8476 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8552 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2020
 mov rax, [SELF + 40]
; _x_44^8555 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8553 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8556 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8554 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2022 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2023
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2025
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8560 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8561 = r9
 mov r9, rax
; _v_77^8564 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2027
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8566 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2028
L2027:
 mov rax, FALSE
L2028:
 cmp rax, FALSE
 je L2029
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8568 = r12
 mov r12, rax
; _y_80^8570 = local #0
 mov [locals + 0], r12
 sub rsp, 16
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2305
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [locals + 0] ; _y_80^8570
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r10
 mov rax, [SELF + 104]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, [SELF + 104]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L2029:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1030
L2030:
L2025:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1030
L2026:
L2023:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1030
L2024:
L2020:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1030
L2021:
f_2305:
; ((t1390 . rcx))
; _t_81^8571 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2307
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1013
f_2307:
; ((t1392 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2308
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rdx, [SELF + 72]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2308:
; ((t1393 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2313
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
f_2313:
; ((t1399 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2314
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rcx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rdx, L2031 ; 
 mov rsi, [SELF + 80]
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2314:
; ((t1400 . rcx))
 mov rdx, [SELF + 72]
 mov rsi, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2312
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2312:
; ((t1398 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2310
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2310:
; ((t1395 . rcx))
 sub rsp, 24
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2311
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1039
 mov rsi, ALLOC
 add ALLOC, 16
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1074
f_1039:
; ((k1397 . rcx))
 mov SELF, rcx
 mov rcx, L2032 ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2311:
; ((t1396 . rcx))
 mov rdx, L2033 ; 
 mov rsi, [SELF + 56]
 mov rdi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2309
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2309:
; ((t1394 . rcx))
 mov rdx, L2034 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2306
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2306:
; ((t1391 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_1030:
; ((k1361 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1031
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_68^8477 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^8525 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2035
 mov rax, [SELF + 80]
; _x_44^8528 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8526 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _x_44^8529 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8527 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2037 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2038
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2040
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8533 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8534 = r9
 mov r9, rax
; _x_77^8537 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2042
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^8539 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^8540 = local #0
 mov [locals + 0], rax
; _y_82^8543 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_80^8540
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2044
 mov rax, [locals + 0] ; _x_80^8540
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8545 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^8545
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2045
L2044:
 mov rax, FALSE
L2045:
 cmp rax, FALSE
 je L2046
 mov rax, [locals + 0] ; _x_80^8540
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^8547 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_83^8547
; _z_85^8549 = local #3
 mov [locals + 24], rax
 sub rsp, 32
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1038
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _y_82^8543
 mov [ALLOC + 56], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 64], rax
 mov rax, [locals + 24] ; _z_85^8549
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1073
L2046:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1031
L2047:
L2042:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1031
L2043:
L2040:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1031
L2041:
L2038:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1031
L2039:
L2035:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1031
L2036:
f_1038:
; ((_k_86^8550 . rdx) (k1378 . rcx))
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2294
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
f_2294:
; ((t1379 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2048
 sub rsp, 24
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2295
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L2048:
 sub rsp, 16
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2298
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
L2049:
f_2298:
; ((t1383 . rcx))
; _t_87^8551 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2300
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1013
f_2300:
; ((t1385 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2301
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rdx, [SELF + 56]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2301:
; ((t1386 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2303
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2303:
; ((t1388 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2304
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2304:
; ((t1389 . rcx))
 mov rdx, L2050 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 64]
 mov r8, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2302
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2302:
; ((t1387 . rcx))
 mov rdx, L2051 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2299
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2299:
; ((t1384 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_2295:
; ((t1380 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2296
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2296:
; ((t1381 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2297
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2297:
; ((t1382 . rcx))
 mov rdx, L2052 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_1031:
; ((k1362 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1032
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_68^8478 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8504 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2053
 mov rax, [SELF + 32]
; _x_44^8507 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8505 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8508 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8506 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2055 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2056
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2058
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8512 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8513 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2060
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8518 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2061
L2060:
 mov rax, FALSE
L2061:
 cmp rax, FALSE
 je L2062
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8520 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^8524 = r12
 mov r12, rax
 mov rax, r8
 mov r11, r12
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2293
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rdx, L2064 ; 
 mov rsi, r8
 mov rdi, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2062:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1032
L2063:
L2058:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1032
L2059:
L2056:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1032
L2057:
L2053:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1032
L2054:
f_2293:
; ((t1377 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_1015
f_1032:
; ((k1363 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1033
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_68^8479 = rdx
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_71^8491 = rsi
 mov rsi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1037
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], rsi
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t1369 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 56]
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1037
f_1037:
; ((_ls_72^8492 . rdx) (k1371 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2065
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^8496 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2289
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1054
L2065:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2067
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8501 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2292
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1077
L2067:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1033
L2068:
L2066:
f_2292:
; ((t1375 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2069
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^8503 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_1037
L2069:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1033
L2070:
f_2289:
; ((t1372 . rcx))
; _x_45^8494 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_45^8497 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2291
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov rax, [SELF + 24]
; _x_44^8499 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2291:
; ((t1374 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1373 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, [SELF + 24]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1033:
; ((k1364 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1034
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_68^8480 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _xs_72^8483 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2287
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2287:
; ((t1367 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2071
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1036
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1075
L2071:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1034
L2072:
f_1036:
; ((_xs2_73^8484 . rdx) (k1368 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^8485 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_45^8488 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^8489 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^8486 = rdi
 mov rdi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1034:
; ((k1365 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1035
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L2073 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1035:
; ((k1366 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2074 ; 
 mov rsi, L2075 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_1014:
; ((_x_65^8457 . rdx) (k1339 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2283
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L2076 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1012
f_2283:
; ((t1340 . rcx))
; _k_66^8458 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2284
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1013
f_2284:
; ((t1341 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2285
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2285:
; ((t1342 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2286
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1015
f_2286:
; ((t1343 . rcx))
 mov rdx, L2077 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_1013:
; ((k1335 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2282
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, [___lambda_2did_2dcounter] ; lambda-id-counter
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2282:
; ((t1336 . rcx))
 mov rax, rcx
 mov [___lambda_2did_2dcounter], rax ; (set! lambda-id-counter ...)
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1012:
; ((_prefix_65^8452 . rdx) (k1328 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2281
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2281:
; ((t1332 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2280
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov rdx, [rdx + 8]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2280:
; ((t1331 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^8454 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2078
 mov rax, [SELF + 24]
; _x_44^8455 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L2079
L2078:
 mov rax, L2080 ; 
L2079:
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2279
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2279:
; ((t1330 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_874:
; ((_vtlist_53^7283 . rsi) (_form_52^7282 . rdx) (k1593 . rcx))
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _fbcount_54^7284 = rdi
 mov rdi, rax
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _wbcount_55^7285 = r8
 mov r8, rax
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _bcount_56^7286 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _vartype_57^7287 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _unbox-op_58^7288 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _box-op_59^7289 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _box-set-op_60^7290 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _fixup!_61^7291 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _mapwalk_62^7292 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_63^7293 = local #4
 mov [locals + 32], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _index-walk_64^7294 = local #5
 mov [locals + 40], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _refs-vars_65^7295 = local #6
 mov [locals + 48], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_875
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_876
 mov [ALLOC + 16], r10
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_877
 mov [ALLOC + 16], r10
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 0] ; _box-op_59^7289
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_878
 mov [ALLOC + 16], r10
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 8] ; _box-set-op_60^7290
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_879
 mov rax, [locals + 8] ; _box-set-op_60^7290
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r12
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 16] ; _fixup!_61^7291
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_887
 mov rax, [locals + 32] ; _walk_63^7293
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 24] ; _mapwalk_62^7292
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_891
 mov rax, [locals + 8] ; _box-set-op_60^7290
 mov [ALLOC + 16], rax
 mov rax, [locals + 32] ; _walk_63^7293
 mov [ALLOC + 24], rax
 mov rax, [locals + 0] ; _box-op_59^7289
 mov [ALLOC + 32], rax
 mov rax, [locals + 16] ; _fixup!_61^7291
 mov [ALLOC + 40], rax
 mov rax, [locals + 24] ; _mapwalk_62^7292
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rsi
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, [locals + 32] ; _walk_63^7293
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_957
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov rax, [locals + 40] ; _index-walk_64^7294
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov rax, [locals + 48] ; _refs-vars_65^7295
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [locals + 40] ; _index-walk_64^7294
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_997
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 48] ; _refs-vars_65^7295
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1009
 mov rax, [locals + 32] ; _walk_63^7293
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1010
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], r9
 mov [ALLOC + 32], rdi
 mov rax, [locals + 40] ; _index-walk_64^7294
 mov [ALLOC + 40], rax
 mov rsi, ALLOC
 add ALLOC, 48
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1010:
; ((_t1_67^8435 . rsi) (_t1_66^8434 . rdx) (k1890 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2557
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2557:
; ((t1891 . rcx))
; _form_70^8438 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2559
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov rdi, [SELF + 40]
 mov rdi, [rdi + 8]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2559:
; ((t1893 . rcx))
 mov rax, undefined ; dropped: cc-box-counts
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1009:
; ((k1889 . rcx))
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_891
f_997:
; ((_refs_66^8374 . rdx) (k1877 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_998
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_998:
; ((_expr_67^8375 . rdx) (k1878 . rcx))
; _v_68^8376 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_999
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
; _failure_69^8377 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2081
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8418 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8419 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1007
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], r9
 mov rax, ALLOC
 add ALLOC, 32
; _sk2_74^8422 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1008
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], r8
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_75^8429 = r12
 mov r12, rax
 mov rax, r8
 mov r11, L2083 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2084
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1007
L2084:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1008
L2085:
L2081:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_999
L2082:
f_1008:
; ((k1888 . rcx))
 mov rax, [SELF + 32]
; _x_44^8430 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2086 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2087
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1007
L2087:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_999
L2088:
f_1007:
; ((k1887 . rcx))
 mov rax, [SELF + 24]
; _x_44^8423 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2089
 mov rax, [SELF + 24]
; _x_44^8425 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8424 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2090
L2089:
 mov rax, FALSE
L2090:
 cmp rax, FALSE
 je L2091
 mov rax, [SELF + 24]
; _x_44^8427 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8426 = rdx
 mov rdx, rax
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2091:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_999
L2092:
f_999:
; ((k1879 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1000
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_69^8378 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8381 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2093
 mov rax, [SELF + 16]
; _x_44^8384 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8382 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^8385 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8383 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1002
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov rax, ALLOC
 add ALLOC, 32
; _sk2_73^8386 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1005
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r8
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_74^8409 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L2095 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2096
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1002
L2096:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1005
L2097:
L2093:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1000
L2094:
f_1005:
; ((k1885 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1006
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_74^8410 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8413 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L2098 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2099
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1002
L2099:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1006
L2100:
f_1006:
; ((k1886 . rcx))
 mov rax, [SELF + 32]
; _x_44^8411 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2101 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2102
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1002
L2102:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1000
L2103:
f_1002:
; ((k1882 . rcx))
 mov rax, [SELF + 24]
; _x_44^8387 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2104
 mov rax, [SELF + 24]
; _x_44^8389 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8388 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2105
L2104:
 mov rax, FALSE
L2105:
 cmp rax, FALSE
 je L2106
 mov rax, [SELF + 24]
; _x_44^8391 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^8390 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2108
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^8393 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^8394 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1003
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, ALLOC
 add ALLOC, 32
; _sk2_78^8397 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1004
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_79^8404 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L2110 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2111
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1003
L2111:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1004
L2112:
L2108:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1000
L2109:
L2106:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_1000
L2107:
f_1004:
; ((k1884 . rcx))
 mov rax, [SELF + 32]
; _x_44^8405 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2113 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2114
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1003
L2114:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1000
L2115:
f_1003:
; ((k1883 . rcx))
 mov rax, [SELF + 24]
; _x_44^8398 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2116
 mov rax, [SELF + 24]
; _x_44^8400 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8399 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2117
L2116:
 mov rax, FALSE
L2117:
 cmp rax, FALSE
 je L2118
 mov rax, [SELF + 24]
; _x_44^8402 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8401 = rdx
 mov rdx, rax
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2118:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_1000
L2119:
f_1000:
; ((k1880 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_1001
 mov rax, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 16]
; _ref_71^8380 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L2120 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_1001:
; ((k1881 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2121 ; 
 mov rsi, L2122 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_957:
; ((_cap_67^8040 . rsi) (_x_66^8039 . rdx) (k1789 . rcx))
; _v_68^8041 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_958
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8042 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2123
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2123:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_958
L2124:
f_958:
; ((k1790 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_959
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8043 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8360 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2125
 mov rax, [SELF + 32]
; _x_44^8363 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8361 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8364 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8362 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2127 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2128
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2130
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8368 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2131
L2130:
 mov rax, FALSE
L2131:
 cmp rax, FALSE
 je L2132
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8370 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2556
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, r8
 mov rsi, [SELF + 48]
 mov SELF, [___posq] ; posq
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2132:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_959
L2133:
L2128:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_959
L2129:
L2125:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_959
L2126:
f_2556:
; ((t1875 . rcx))
 mov rdx, L2134 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_959:
; ((k1791 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_960
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8044 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^8340 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2135
 mov rax, [SELF + 56]
; _x_44^8343 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8341 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^8344 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_992
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_73^8345 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_993
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_74^8346 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, L2137 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2138
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_992
L2138:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_993
L2139:
L2135:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_960
L2136:
f_993:
; ((k1871 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_994
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_74^8347 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8356 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L2140 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2141
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_992
L2141:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_994
L2142:
f_994:
; ((k1872 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_995
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_74^8348 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8354 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L2143 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2144
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_992
L2144:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_995
L2145:
f_995:
; ((k1873 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_996
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_74^8349 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8352 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L2146 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2147
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_992
L2147:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_996
L2148:
f_996:
; ((k1874 . rcx))
 mov rax, [SELF + 32]
; _x_44^8350 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2149 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2150
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_992
L2150:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_960
L2151:
f_992:
; ((k1870 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_960:
; ((k1792 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_961
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8045 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8317 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2152
 mov rax, [SELF + 32]
; _x_44^8320 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8318 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8321 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8319 = rdi
 mov rdi, rax
; _head_75^8322 = r8
 mov r8, rsi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_988
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], rdx
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
; _sk2_77^8323 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_990
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_78^8332 = r10
 mov r10, rax
 mov rax, rsi
 mov r11, L2154 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2155
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_988
L2155:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_990
L2156:
L2152:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_961
L2153:
f_990:
; ((k1868 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_991
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_78^8333 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8336 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L2157 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2158
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_988
L2158:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_991
L2159:
f_991:
; ((k1869 . rcx))
 mov rax, [SELF + 32]
; _x_44^8334 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2160 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2161
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_988
L2161:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_961
L2162:
f_988:
; ((k1864 . rcx))
 mov rax, [SELF + 48]
; _x_44^8324 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2163
 mov rax, [SELF + 48]
; _x_44^8327 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^8325 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^8328 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^8326 = rsi
 mov rsi, rax
; _n_81^8329 = rdi
 mov rdi, rdx
; _xs_85^8330 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2554
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2163:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_961
L2164:
f_2554:
; ((t1865 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2165
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2555
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_989
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2165:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_961
L2166:
f_989:
; ((_x_86^8331 . rdx) (k1867 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_957
f_2555:
; ((t1866 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___cons_2a] ; cons*
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_961:
; ((k1793 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_962
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8046 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^8290 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2167
 mov rax, [SELF + 56]
; _x_44^8293 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8291 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^8294 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8292 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2169 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2170
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2172
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^8298 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^8299 = r9
 mov r9, rax
; _n_78^8302 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2174
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^8304 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^8305 = local #0
 mov [locals + 0], rax
; _c_83^8308 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_81^8305
; _xs_87^8309 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2550
 mov [ALLOC + 16], r10
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 16] ; _xs_87^8309
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _c_83^8308
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_81^8305
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2174:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_962
L2175:
L2172:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_962
L2173:
L2170:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_962
L2171:
L2167:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_962
L2168:
f_2550:
; ((t1859 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2176
 mov rax, [SELF + 16]
; _x_45^8312 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^8314 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2553
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_987
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2176:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_962
L2177:
f_987:
; ((_x_88^8316 . rdx) (k1863 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_957
f_2553:
; ((t1862 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1861 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1860 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L2178 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_962:
; ((k1794 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_963
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8047 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8279 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2179
 mov rax, [SELF + 32]
; _x_44^8282 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8280 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8283 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8281 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2181 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2182
; _xs_77^8286 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2548
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2182:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_963
L2183:
L2179:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_963
L2180:
f_2548:
; ((t1856 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2184
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2549
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_986
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2184:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_963
L2185:
f_986:
; ((_x_78^8289 . rdx) (k1858 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_957
f_2549:
; ((t1857 . rcx))
 sub rsp, 16
 mov rax, L2186 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_963:
; ((k1795 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_964
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8048 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^8232 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2187
 mov rax, [SELF + 56]
; _x_44^8235 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^8233 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^8236 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^8234 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2189 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2190
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2192
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8240 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^8241 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_81^8244 = r10
 mov r10, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_984
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], r10
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1847 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_984
L2192:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2193:
L2190:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2191:
L2187:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2188:
f_984:
; ((_p-ls_84^8247 . rdi) (_p-ls_83^8246 . rsi) (_ls_82^8245 . rdx) (k1849 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2194
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2543
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2194:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2196
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^8260 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2198
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^8263 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_88^8264 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2200
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8269 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2201
L2200:
 mov rax, FALSE
L2201:
 cmp rax, FALSE
 je L2202
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_91^8271 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_984
L2202:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2203:
L2198:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2199:
L2196:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2197:
L2195:
f_2543:
; ((t1850 . rcx))
; _vals_85^8249 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2544
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2544:
; ((t1851 . rcx))
 mov rax, [SELF + 56]
; _x_44^8251 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2204
 mov rax, [SELF + 56]
; _x_44^8253 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8252 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2205
L2204:
 mov rax, FALSE
L2205:
 cmp rax, FALSE
 je L2206
 mov rax, [SELF + 56]
; _x_44^8255 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^8254 = rdx
 mov rdx, rax
; _body_89^8256 = rsi
 mov rsi, rdx
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2545
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_985
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rdi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2206:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_964
L2207:
f_985:
; ((_val_91^8258 . rsi) (_var_90^8257 . rdx) (k1854 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2547
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2547:
; ((t1855 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2545:
; ((t1852 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2546
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2546:
; ((t1853 . rcx))
 mov rdx, L2208 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_964:
; ((k1796 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_965
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^8049 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8205 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2209
 mov rax, [SELF + 32]
; _x_44^8208 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8206 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8209 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8207 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2211 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2212
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2214
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^8213 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^8214 = r9
 mov r9, rax
; _t_78^8217 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2216
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^8219 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^8220 = local #0
 mov [locals + 0], rax
; _s_83^8223 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_81^8220
; _args_87^8224 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2538
 mov [ALLOC + 16], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 16] ; _args_87^8224
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _s_83^8223
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_81^8220
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2216:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_965
L2217:
L2214:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_965
L2215:
L2212:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_965
L2213:
L2209:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_965
L2210:
f_2538:
; ((t1842 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2218
 mov rax, [SELF + 16]
; _x_45^8227 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^8229 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2541
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_983
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2218:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_965
L2219:
f_983:
; ((_x_88^8231 . rdx) (k1846 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_957
f_2541:
; ((t1845 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1844 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1843 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L2220 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_965:
; ((k1797 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_966
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_69^8050 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^8126 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2221
 mov rax, [SELF + 56]
; _x_44^8129 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8127 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^8130 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8128 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2223 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2224
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2226
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^8134 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^8135 = r9
 mov r9, rax
; _n_78^8138 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2228
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^8140 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^8141 = local #0
 mov [locals + 0], rax
; _fv_82^8144 = local #1
 mov [locals + 8], r12
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_88^8145 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_975
 mov [ALLOC + 16], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [locals + 8] ; _fv_82^8144
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [locals + 16] ; _loop_88^8145
 mov [ALLOC + 64], rax
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, [locals + 16] ; _loop_88^8145
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 16] ; _loop_88^8145
 mov rax, [rax + 8]
; t1823 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 24] ; t1823
 mov rdx, [locals + 0] ; _x_80^8141
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_975
L2228:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2229:
L2226:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2227:
L2224:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2225:
L2221:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2222:
f_975:
; ((_p-ls_91^8148 . rdi) (_p-ls_90^8147 . rsi) (_ls_89^8146 . rdx) (k1825 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2230
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2529
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2230:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2232
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_92^8186 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2234
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_94^8189 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_95^8190 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2236
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8195 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2237
L2236:
 mov rax, FALSE
L2237:
 cmp rax, FALSE
 je L2238
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_98^8197 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_975
L2238:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2239:
L2234:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2235:
L2232:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_966
L2233:
L2231:
f_2529:
; ((t1826 . rcx))
; _bodies_92^8150 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2530
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 64]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2530:
; ((t1827 . rcx))
; _llists_93^8151 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_45^8154 = rsi
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2533
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_976
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_976:
; ((_v_94^8158 . rdx) (k1835 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2537
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2537:
; ((t1836 . rcx))
; _v_95^8159 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_977
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
; _failure_96^8160 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2240
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_98^8164 = rdi
 mov rdi, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_99^8165 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_979
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; _sk2_101^8168 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_980
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_102^8175 = r10
 mov r10, rax
 mov rax, rdi
 mov r11, L2242 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2243
 mov rcx, [SELF + 16]
 mov SELF, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_979
L2243:
 mov rcx, [SELF + 16]
 mov SELF, r10
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_980
L2244:
L2240:
 mov rcx, [SELF + 16]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_977
L2241:
f_980:
; ((k1840 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_981
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_102^8176 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8179 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, L2245 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2246
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_979
L2246:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_981
L2247:
f_981:
; ((k1841 . rcx))
 mov rax, [SELF + 32]
; _x_44^8177 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2248 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2249
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_979
L2249:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_977
L2250:
f_979:
; ((k1839 . rcx))
 mov rax, [SELF + 24]
; _x_44^8169 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2251
 mov rax, [SELF + 24]
; _x_44^8171 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8170 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2252
L2251:
 mov rax, FALSE
L2252:
 cmp rax, FALSE
 je L2253
 mov rax, [SELF + 24]
; _x_44^8173 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_101^8172 = rdx
 mov rdx, rax
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2253:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_977
L2254:
f_977:
; ((k1837 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_978
 mov rax, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 16]
; _x_98^8162 = rdx
 mov rdx, rax
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_978:
; ((k1838 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2255 ; 
 mov rsi, L2256 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2533:
; ((t1830 . rcx))
; _x_45^8156 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2534
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_982
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 64]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_982:
; ((_body_95^8184 . rsi) (_llist_94^8183 . rdx) (k1832 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2536
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_997
f_2536:
; ((t1834 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2535
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2535:
; ((t1833 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2534:
; ((t1831 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1829 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1828 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L2257 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_966:
; ((k1798 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_967
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_69^8051 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^8112 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2258
 mov rax, [SELF + 32]
; _x_44^8115 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8113 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^8116 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8114 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2260 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2261
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2263
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8120 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2264
L2263:
 mov rax, FALSE
L2264:
 cmp rax, FALSE
 je L2265
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8122 = r8
 mov r8, rax
; _x_76^8124 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2527
 mov [ALLOC + 16], r9
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2265:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_967
L2266:
L2261:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_967
L2262:
L2258:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_967
L2259:
f_2527:
; ((t1821 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2526
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2526:
; ((t1820 . rcx))
 mov rdx, L2267 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_967:
; ((k1799 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_968
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_69^8052 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^8098 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2268
 mov rax, [SELF + 48]
; _x_44^8101 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8099 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^8102 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8100 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2270 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2271
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2273
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8106 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2274
L2273:
 mov rax, FALSE
L2274:
 cmp rax, FALSE
 je L2275
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8108 = r8
 mov r8, rax
; _x_76^8110 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2524
 mov [ALLOC + 16], r9
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2275:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_968
L2276:
L2271:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_968
L2272:
L2268:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_968
L2269:
f_2524:
; ((t1817 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2523
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2523:
; ((t1816 . rcx))
 mov rdx, L2277 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_968:
; ((k1800 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_969
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_69^8053 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^8084 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2278
 mov rax, [SELF + 24]
; _x_44^8087 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8085 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^8088 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8086 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2280 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2281
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2283
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8092 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2284
L2283:
 mov rax, FALSE
L2284:
 cmp rax, FALSE
 je L2285
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^8094 = r8
 mov r8, rax
; _x_76^8096 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2521
 mov [ALLOC + 16], r9
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2285:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_969
L2286:
L2281:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_969
L2282:
L2278:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_969
L2279:
f_2521:
; ((t1813 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2520
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_957
f_2520:
; ((t1812 . rcx))
 mov rdx, L2287 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_969:
; ((k1801 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_970
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_69^8054 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^8065 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2288
 mov rax, [SELF + 40]
; _x_44^8068 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8066 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^8069 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8067 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2290 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2291
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2293
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^8073 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^8074 = r9
 mov r9, rax
; _id_78^8077 = r10
 mov r10, r8
; _args_82^8078 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2516
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2293:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_970
L2294:
L2291:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_970
L2292:
L2288:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_970
L2289:
f_2516:
; ((t1807 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2295
 mov rax, [SELF + 16]
; _x_45^8081 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2518
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_974
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2295:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_970
L2296:
f_974:
; ((_x_83^8083 . rdx) (k1810 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_957
f_2518:
; ((t1809 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1808 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L2297 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_970:
; ((k1802 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_971
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_69^8055 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^8057 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2298
 mov rax, [SELF + 16]
; _x_44^8060 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^8058 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^8061 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^8059 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2515
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2298:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_971
L2299:
f_2515:
; ((t1805 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2300
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_973
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2300:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_971
L2301:
f_973:
; ((_x_79^8064 . rdx) (k1806 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_957
f_971:
; ((k1803 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_972
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L2302 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_972:
; ((k1804 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2303 ; 
 mov rsi, L2304 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_891:
; ((_e_67^7425 . rsi) (_x_66^7424 . rdx) (k1634 . rcx))
; _v_68^7426 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_892
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov [ALLOC + 56], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7427 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2305
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2307
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _lst_46^8000 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, r9
 CALL assoc_eq
 jmp L2308
L2307:
 mov rax, FALSE
L2308:
; _tmp_71^7997 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L2309
; _a_72^8002 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2510
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rsi, rdx
 mov rdx, L2311 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2309:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2511
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
; t1786 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2312
 sub rsp, 16
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_956
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [___any] ; any
 mov rcx, r10
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2312:
 mov SELF, r10
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2511
L2313:
L2310:
L2305:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_892
L2306:
f_956:
; ((_x_72^8017 . rdx) (k1787 . rcx))
 mov rax, [SELF + 16]
; _x_45^8018 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdx
 CALL assoc_eq
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2511:
; ((t1780 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2314
; _a_73^8021 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2512
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, L2316 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2314:
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2514
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, L2317 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2315:
f_2514:
; ((t1785 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rsi, null ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2512:
; ((t1781 . rcx))
; _x2_74^8022 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^8025 = rsi
 mov rsi, rax
; _x_44^8027 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8026 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8023 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 SET_T r15
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^8030 = rsi
 mov rsi, rax
; _x_44^8032 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8031 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8028 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^8035 = rdi
 mov rdi, rax
; _x_44^8038 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8037 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8036 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^8034 = rdi
 mov rdi, rax
 mov rax, rcx
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_45^8029 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2513
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2513:
; ((t1784 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2510:
; ((t1778 . rcx))
 mov rax, [SELF + 24]
; _x_44^8006 = rdx
 mov rdx, rax
; _x_44^8008 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8007 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8004 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^8011 = rsi
 mov rsi, rax
; _x_44^8014 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8013 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^8012 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^8010 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_45^8005 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rsi, null ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_892:
; ((k1635 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_893
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7428 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7984 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2318
 mov rax, [SELF + 48]
; _x_44^7987 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7985 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7988 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7986 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2320 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2321
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2323
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7992 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2324
L2323:
 mov rax, FALSE
L2324:
 cmp rax, FALSE
 je L2325
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 72]
 mov SELF, [___values] ; values
 mov rsi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2325:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_893
L2326:
L2321:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_893
L2322:
L2318:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_893
L2319:
f_893:
; ((k1636 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_894
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7429 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7973 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2327
 mov rax, [SELF + 48]
; _x_44^7975 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7974 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2328
L2327:
 mov rax, FALSE
L2328:
 cmp rax, FALSE
 je L2329
 mov rax, [SELF + 48]
; _x_44^7977 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^7976 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_954
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_72^7978 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_955
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_73^7979 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, L2331 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2332
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_954
L2332:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_955
L2333:
L2329:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_894
L2330:
f_955:
; ((k1777 . rcx))
 mov rax, [SELF + 32]
; _x_44^7980 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2334 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2335
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_954
L2335:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_894
L2336:
f_954:
; ((k1776 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rsi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_894:
; ((k1637 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_895
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7430 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7951 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2337
 mov rax, [SELF + 48]
; _x_44^7954 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7952 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7955 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7953 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2339 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2340
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2342
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7959 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7960 = r9
 mov r9, rax
; _n_78^7963 = r10
 mov r10, r8
; _xs_82^7964 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2509
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r10
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2342:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_895
L2343:
L2340:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_895
L2341:
L2337:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_895
L2338:
f_2509:
; ((t1773 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2344
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_952
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_953
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rsi, ALLOC
 add ALLOC, 24
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2344:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_895
L2345:
f_953:
; ((_t1_84^7966 . rsi) (_t1_83^7965 . rdx) (k1775 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, [SELF + 16]
; _x_45^7971 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7970 = rdi
 mov rdi, rax
 mov rax, L2346 ; 
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___values] ; values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_952:
; ((k1774 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_895:
; ((k1638 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_896
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7431 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7921 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2347
 mov rax, [SELF + 48]
; _x_44^7924 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7922 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7925 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7923 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2349 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2350
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2352
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7929 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7930 = r9
 mov r9, rax
; _n_78^7933 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2354
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^7935 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^7936 = local #0
 mov [locals + 0], rax
; _cnd_83^7939 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_81^7936
; _xs_87^7940 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2508
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _xs_87^7940
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 8] ; _cnd_83^7939
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_81^7936
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2354:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_896
L2355:
L2352:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_896
L2353:
L2350:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_896
L2351:
L2347:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_896
L2348:
f_2508:
; ((t1770 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2356
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_950
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_951
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rsi, ALLOC
 add ALLOC, 32
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2356:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_896
L2357:
f_951:
; ((_t1_89^7942 . rsi) (_t1_88^7941 . rdx) (k1772 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, [SELF + 16]
; _x_45^7947 = rdi
 mov rdi, rax
 mov rax, [SELF + 24]
; _x_45^7949 = r8
 mov r8, rax
 mov rax, r8
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7948 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7946 = rdi
 mov rdi, rax
 mov rax, L2358 ; 
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___values] ; values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_950:
; ((k1771 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_896:
; ((k1639 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_897
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7432 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7891 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2359
 mov rax, [SELF + 48]
; _x_44^7894 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7892 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7895 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7893 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2361 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2362
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2364
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7899 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7900 = r9
 mov r9, rax
; _t_78^7903 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2366
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^7905 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^7906 = local #0
 mov [locals + 0], rax
; _s_83^7909 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_81^7906
; _xs_87^7910 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2507
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _xs_87^7910
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 8] ; _s_83^7909
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_81^7906
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2366:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_897
L2367:
L2364:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_897
L2365:
L2362:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_897
L2363:
L2359:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_897
L2360:
f_2507:
; ((t1767 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2368
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_948
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_949
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rsi, ALLOC
 add ALLOC, 32
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2368:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_897
L2369:
f_949:
; ((_t1_89^7912 . rsi) (_t1_88^7911 . rdx) (k1769 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, [SELF + 16]
; _x_45^7917 = rdi
 mov rdi, rax
 mov rax, [SELF + 24]
; _x_45^7919 = r8
 mov r8, rax
 mov rax, r8
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7918 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7916 = rdi
 mov rdi, rax
 mov rax, L2370 ; 
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___values] ; values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_948:
; ((k1768 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_897:
; ((k1640 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_898
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7433 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7878 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2371
 mov rax, [SELF + 48]
; _x_44^7881 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7879 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7882 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7880 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2373 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2374
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2376
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7886 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2377
L2376:
 mov rax, FALSE
L2377:
 cmp rax, FALSE
 je L2378
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^7888 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 24]
 mov SELF, [___values] ; values
 mov rsi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2378:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_898
L2379:
L2374:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_898
L2375:
L2371:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_898
L2372:
f_898:
; ((k1641 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_899
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_69^7434 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7852 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2380
 mov rax, [SELF + 48]
; _x_44^7855 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7853 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7856 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7854 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2382 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2383
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2385
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7860 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7861 = r9
 mov r9, rax
; _x1_78^7864 = r10
 mov r10, r8
; _xs_82^7865 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2505
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r12
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2385:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_899
L2386:
L2383:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_899
L2384:
L2380:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_899
L2381:
f_2505:
; ((t1761 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2387
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_944
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_945
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rsi, ALLOC
 add ALLOC, 40
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2387:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_899
L2388:
f_945:
; ((_t1_84^7867 . rsi) (_t1_83^7866 . rdx) (k1763 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_947
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_946
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_946:
; ((k1764 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_947:
; ((_t1_86^7869 . rsi) (_t1_85^7868 . rdx) (k1765 . rcx))
 mov rax, [SELF + 24]
; _x1_87^7870 = rdi
 mov rdi, rax
 mov rax, [SELF + 16]
; _fv1_88^7871 = r8
 mov r8, rax
; _xs_89^7872 = r9
 mov r9, rdx
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2506
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___union] ; union
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2506:
; ((t1766 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^7876 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^7877 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7875 = rdx
 mov rdx, rax
 mov rax, L2389 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_944:
; ((k1762 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_899:
; ((k1642 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_900
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_69^7435 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7718 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2390
 mov rax, [SELF + 48]
; _x_44^7721 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^7719 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7722 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^7720 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2392 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2393
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2395
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^7726 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^7727 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_81^7730 = r10
 mov r10, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_934
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], r10
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t1726 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_934
L2395:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2396:
L2393:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2394:
L2390:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2391:
f_934:
; ((_p-ls_84^7733 . rdi) (_p-ls_83^7732 . rsi) (_ls_82^7731 . rdx) (k1728 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2397
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2486
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdi
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2397:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2399
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^7833 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2401
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^7836 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_88^7837 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2403
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7842 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2404
L2403:
 mov rax, FALSE
L2404:
 cmp rax, FALSE
 je L2405
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_91^7844 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_934
L2405:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2406:
L2401:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2402:
L2399:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2400:
L2398:
f_2486:
; ((t1729 . rcx))
; _vals_85^7735 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2487
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov rdx, [SELF + 80]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2487:
; ((t1730 . rcx))
; _vars_86^7736 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^7737 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2407
 mov rax, [SELF + 16]
; _x_44^7739 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7738 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2408
L2407:
 mov rax, FALSE
L2408:
 cmp rax, FALSE
 je L2409
 mov rax, [SELF + 16]
; _x_44^7741 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^7740 = rsi
 mov rsi, rax
; _body_89^7742 = rdi
 mov rdi, rsi
 mov rax, [SELF + 80]
; _x_44^7744 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _e0_90^7743 = r8
 mov r8, rax
 mov rsi, rcx
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2504
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rcx, ALLOC
 add ALLOC, 96
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_935
 mov rdx, ALLOC
 add ALLOC, 16
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2409:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_900
L2410:
f_935:
; ((_x_91^7748 . rdx) (k1760 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rsi, FALSE
 mov rdi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2504:
; ((t1759 . rcx))
 mov rax, [SELF + 88]
; _x_44^7749 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov rdx, rcx
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2503
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rcx, ALLOC
 add ALLOC, 96
 mov SELF, [___append_21] ; append!
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2503:
; ((t1758 . rcx))
 mov rax, [SELF + 88]
; _x_44^7750 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^7747 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1731 = rsi
 mov rsi, rax
; _e2_91^7745 = rdi
 mov rdi, rsi
 mov rax, [SELF + 88]
; _ev_92^7751 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop1_93^7752 = r9
 mov r9, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_936
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], r9
 mov [ALLOC + 88], r8
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t1732 = r10
 mov r10, rax
 mov rcx, [SELF + 80]
 mov rdx, [SELF + 72]
 mov rsi, [SELF + 56]
 mov SELF, r10
 mov rdi, null ; 
 mov r8, null ; 
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_936
f_936:
; ((_fv_97^7756 . r8) (_vals2_96^7755 . rdi) (_vrs_95^7754 . rsi) (_vls_94^7753 . rdx) (k1734 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2411
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_937
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_938
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rsi, ALLOC
 add ALLOC, 80
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2411:
 sub rsp, 24
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_943
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_942
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2412:
f_942:
; ((k1755 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_44^7823 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_943:
; ((_t1_99^7825 . rsi) (_t1_98^7824 . rdx) (k1756 . rcx))
; _val_100^7826 = rdi
 mov rdi, rdx
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2502
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rdx, [SELF + 16]
 mov SELF, [___union] ; union
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2502:
; ((t1757 . rcx))
 sub rsp, 48
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
; _x_45^7830 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _y_46^7831 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^7829 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
; _x_44^7828 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_936
f_938:
; ((_t1_99^7759 . rsi) (_t1_98^7758 . rdx) (k1736 . rcx))
; _body_100^7760 = rdi
 mov rdi, rdx
; _fv2_101^7761 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2501
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_45^7762 = r9
 mov r9, rax
 mov rax, r9
 CALL list_length
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^7763 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___take] ; take
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2501:
; ((t1754 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2490
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_879
f_2490:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop2_102^7764 = rcx
 mov rcx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_939
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t1742 = rdx
 mov rdx, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2496
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 88]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2496:
; ((t1743 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
; _x_44^7822 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2494
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_939
f_2494:
; ((t1741 . rcx))
 mov rdx, L2413 ; 
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2491
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2491:
; ((t1738 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2493
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 16]
 mov SELF, [___union] ; union
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2493:
; ((t1740 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2492
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 16]
 mov SELF, [___difference] ; difference
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2492:
; ((t1739 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_939:
; ((_vals_104^7766 . rsi) (_e2_103^7765 . rdx) (k1745 . rcx))
 mov rax, [SELF + 40]
; _y_45^7768 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, rdi
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2414
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2414:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _v_105^7771 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_940
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
; _failure_106^7773 = r8
 mov r8, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2497
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
; t1750 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2416
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_108^7793 = r10
 mov r10, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_109^7794 = r12
 mov r12, rax
; _v_111^7797 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2418
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_113^7799 = local #1
 mov [locals + 8], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_114^7800 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 8] ; _w_113^7799
 SET_T r11
 CALL recursively_equal
 cmp rax, FALSE
 je L2420
 sub rsp, 8
 mov rax, [locals + 16] ; _x_114^7800
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2422
 mov rax, [locals + 16] ; _x_114^7800
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_116^7806 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 16] ; _x_114^7800
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [locals + 24] ; _w_116^7806
 SET_T r11
 CALL recursively_equal
 cmp rax, FALSE
 je L2424
 sub rsp, 16
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2499
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rsi
 mov rax, [locals + 0] ; _v_111^7797
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r10
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_877
L2424:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_940
L2425:
L2422:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_940
L2423:
L2420:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_940
L2421:
L2418:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_940
L2419:
L2416:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_940
L2417:
L2415:
f_2499:
; ((t1751 . rcx))
 mov rax, [SELF + 32]
; _x_45^7814 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _lst_46^7815 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_120^7813 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L2426
 mov rax, rdx
 mov r11, 3 ; '1
 mov r15, L2428 ; 
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 jmp L2427
L2426:
 mov rax, FALSE
L2427:
 mov rax, [SELF + 24]
; _x_44^7819 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2500
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2500:
; ((t1753 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2497:
; ((t1746 . rcx))
; _x_45^7769 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 40]
; _x_44^7821 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^7820 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2498
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_939
f_2498:
; ((t1747 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_940:
; ((k1748 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_941
 mov rax, ALLOC
 add ALLOC, 16
; _failure_106^7774 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^7775 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2429
 mov rax, [SELF + 16]
; _x_44^7778 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_108^7776 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^7779 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_109^7777 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2431
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_114^7783 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2433
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, rsi
 mov rax, [SELF + 24]
; _x_44^7791 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2433:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_941
L2434:
L2431:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_941
L2432:
L2429:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_941
L2430:
f_941:
; ((k1749 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2435 ; 
 mov rsi, L2436 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_937:
; ((k1735 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_900:
; ((k1643 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_901
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_69^7436 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^7647 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2437
 mov rax, [SELF + 48]
; _x_44^7650 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7648 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7651 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7649 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2439 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2440
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2442
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7655 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7656 = r9
 mov r9, rax
; _v_78^7659 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2444
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7661 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2445
L2444:
 mov rax, FALSE
L2445:
 cmp rax, FALSE
 je L2446
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^7663 = r12
 mov r12, rax
; _x_81^7665 = local #0
 mov [locals + 0], r12
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_931
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [locals + 0] ; _x_81^7665
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_932
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rsi, ALLOC
 add ALLOC, 40
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2446:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_901
L2447:
L2442:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_901
L2443:
L2440:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_901
L2441:
L2437:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_901
L2438:
f_932:
; ((_t1_83^7667 . rsi) (_t1_82^7666 . rdx) (k1711 . rcx))
; _x_84^7668 = rdi
 mov rdi, rdx
; _fv_85^7669 = r8
 mov r8, rsi
 mov rax, [SELF + 32]
; _x_44^7671 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2448
 mov rax, [SELF + 24]
; _x_45^7672 = r9
 mov r9, rax
 mov rax, [SELF + 32]
; _x_44^7674 = r10
 mov r10, rax
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _lst_46^7673 = r10
 mov r10, rax
 mov rax, r9
 mov r11, r10
 CALL assoc_eq
 jmp L2449
L2448:
 mov rax, FALSE
L2449:
; _tmp_86^7670 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L2450
; _a_87^7675 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2478
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rdi, rdx
 mov rdx, L2452 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2450:
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2479
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
; t1724 = r10
 mov r10, rax
 mov rax, [SELF + 32]
; _x_44^7692 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2453
 mov rcx, r10
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_933
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 32]
; _x_44^7696 = r12
 mov r12, rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___any] ; any
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2453:
 mov SELF, r10
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2479
L2454:
L2451:
f_933:
; ((_x_87^7693 . rdx) (k1725 . rcx))
 mov rax, [SELF + 16]
; _x_45^7694 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdx
 CALL assoc_eq
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2479:
; ((t1715 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2455
; _a_88^7697 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2482
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_878
L2455:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2484
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L2457 ; 
 mov rsi, [SELF + 24]
 mov rdi, [SELF + 48]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2456:
f_2484:
; ((t1723 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2482:
; ((t1721 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2483
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rdx, L2458 ; 
 mov rsi, [SELF + 40]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2483:
; ((t1722 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2480
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2480:
; ((t1716 . rcx))
; _x2_89^7698 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^7701 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7699 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 SET_T r15
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^7704 = rsi
 mov rsi, rax
; _x_44^7706 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7705 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7702 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 SET_T r15
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^7709 = rsi
 mov rsi, rax
; _x_44^7711 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7710 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7707 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^7714 = rdi
 mov rdi, rax
; _x_44^7717 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7716 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7715 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^7713 = rdi
 mov rdi, rax
 mov rax, rcx
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_45^7708 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2481
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 24]
 mov SELF, [___adjoin] ; adjoin
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2481:
; ((t1720 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2478:
; ((t1712 . rcx))
 mov rax, [SELF + 32]
; _x_44^7679 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7677 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 SET_T r15
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 32]
; _x_44^7682 = rdx
 mov rdx, rax
; _x_44^7684 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7683 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7680 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^7687 = rsi
 mov rsi, rax
; _x_44^7690 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7689 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7688 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^7686 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_45^7681 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_931:
; ((k1710 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_901:
; ((k1644 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_902
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_69^7437 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7572 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2459
 mov rax, [SELF + 40]
; _x_44^7575 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7573 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7576 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7574 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2461 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2462
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2464
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7580 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7581 = r9
 mov r9, rax
; _id_78^7584 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2466
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^7586 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^7587 = local #0
 mov [locals + 0], rax
; _llist_83^7590 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_81^7587
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2468
 mov rax, [locals + 0] ; _x_81^7587
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7592 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^7592
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2469
L2468:
 mov rax, FALSE
L2469:
 cmp rax, FALSE
 je L2470
 mov rax, [locals + 0] ; _x_81^7587
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_84^7594 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_84^7594
; _body_86^7596 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_921
 mov rax, [locals + 8] ; _llist_83^7590
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_922
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov rax, [locals + 8] ; _llist_83^7590
 mov [ALLOC + 56], rax
 mov rax, [locals + 24] ; _body_86^7596
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rsi, ALLOC
 add ALLOC, 80
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2470:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_902
L2471:
L2466:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_902
L2467:
L2464:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_902
L2465:
L2462:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_902
L2463:
L2459:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_902
L2460:
f_922:
; ((_t1_89^7599 . rdi) (_t1_88^7598 . rsi) (_t1_87^7597 . rdx) (k1688 . rcx))
; _vars_90^7600 = r8
 mov r8, rdx
 sub rsp, 8
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2477
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 0], rax
 mov SELF, [___filter_2dmap] ; filter-map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_923
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_923:
; ((_var_93^7606 . rdx) (k1709 . rcx))
 mov rax, rdx
 mov r11, L2472 ; 
 cmp rax, r11
 jne L2473
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2473:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rsi, FALSE
 mov rdi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L2474:
f_2477:
; ((t1708 . rcx))
 mov rax, [SELF + 88]
; _y_46^7605 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1689 = rsi
 mov rsi, rax
; _e2_93^7603 = rdi
 mov rdi, rsi
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_924
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_925
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rsi, ALLOC
 add ALLOC, 80
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_925:
; ((_t1_95^7611 . rsi) (_t1_94^7610 . rdx) (k1691 . rcx))
; _body_96^7612 = rdi
 mov rdi, rdx
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2467
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rdx, rsi
 mov rsi, [SELF + 72]
 mov SELF, [___difference] ; difference
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2467:
; ((t1692 . rcx))
; _fv_98^7614 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^7615 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2468
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_879
f_2468:
; ()
 mov rcx, [SELF + 56]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_926
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_927
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rsi, ALLOC
 add ALLOC, 64
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_927:
; ((_t1_100^7617 . rsi) (_t1_99^7616 . rdx) (k1695 . rcx))
; _fvrefs_101^7618 = rdi
 mov rdi, rdx
; _fv2_102^7619 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2469
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov [ALLOC + 56], r8
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_928
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 16]
; _x_44^7645 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___filter_2dmap] ; filter-map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_928:
; ((_expr_101^7621 . rdx) (k1702 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_929
 mov rax, ALLOC
 add ALLOC, 16
; _failure_103^7623 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2475
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_105^7626 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_106^7627 = r8
 mov r8, rax
; _v_108^7630 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2477
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_110^7632 = r10
 mov r10, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_111^7633 = r12
 mov r12, rax
 mov rax, r10
 SET_T r11
 CALL recursively_equal
 cmp rax, FALSE
 je L2479
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2481
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_113^7639 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [locals + 0] ; _w_113^7639
 SET_T r11
 CALL recursively_equal
 cmp rax, FALSE
 je L2483
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2475
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r9
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_877
L2483:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_929
L2484:
L2481:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_929
L2482:
L2479:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_929
L2480:
L2477:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_929
L2478:
L2475:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_929
L2476:
f_2475:
; ((t1706 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2476
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, L2485 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2476:
; ((t1707 . rcx))
 mov rdx, [SELF + 32]
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2474
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2474:
; ((t1705 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_929:
; ((k1703 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_930
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_930:
; ((k1704 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2486 ; 
 mov rsi, L2487 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2469:
; ((t1696 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2473
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t1701 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, null ; 
 cmp rax, r11
 jne L2488
 mov rcx, [SELF + 16]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2473
L2488:
 mov rsi, rcx
 mov rcx, rdx
 mov rdx, L2490 ; 
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2489:
f_2473:
; ((t1700 . rcx))
 mov rdx, [SELF + 56]
 mov rsi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2472
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2472:
; ((t1699 . rcx))
 mov rdx, L2491 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2470
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2470:
; ((t1697 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2471
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___union] ; union
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2471:
; ((t1698 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_926:
; ((k1694 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_924:
; ((k1690 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_921:
; ((k1687 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_902:
; ((k1645 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_903
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_69^7438 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7471 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2492
 mov rax, [SELF + 40]
; _x_44^7474 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7472 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7475 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7473 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2494 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2495
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2497
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^7479 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_75^7480 = r9
 mov r9, rax
; _id_77^7483 = r10
 mov r10, r8
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_83^7484 = r12
 mov r12, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_909
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov [ALLOC + 64], rdx
 mov [ALLOC + 72], r12
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r12
 mov rax, [rax + 8]
; t1654 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; t1654
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_909
L2497:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_903
L2498:
L2495:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_903
L2496:
L2492:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_903
L2493:
f_909:
; ((_p-ls_86^7487 . rdi) (_p-ls_85^7486 . rsi) (_ls_84^7485 . rdx) (k1656 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2499
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2450
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov [ALLOC + 72], rdi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2499:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2501
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^7553 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2503
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_89^7556 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_90^7557 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2505
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7562 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2506
L2505:
 mov rax, FALSE
L2506:
 cmp rax, FALSE
 je L2507
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_93^7564 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_909
L2507:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_903
L2508:
L2503:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_903
L2504:
L2501:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_903
L2502:
L2500:
f_2450:
; ((t1657 . rcx))
; _bodies_87^7489 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2451
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 72]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2451:
; ((t1658 . rcx))
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _total-fv_89^7491 = rdx
 mov rdx, rax
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _total-fvrefs_90^7492 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_910
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2452
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rdi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2452:
; ((t1659 . rcx))
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^7548 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _x_45^7550 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7549 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7547 = rdx
 mov rdx, rax
 mov rax, L2509 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov SELF, [___values] ; values
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_910:
; ((_body_92^7495 . rsi) (_llist_91^7494 . rdx) (k1660 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_912
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rsi
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_911
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_911:
; ((k1661 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_912:
; ((_t1_95^7498 . rdi) (_t1_94^7497 . rsi) (_t1_93^7496 . rdx) (k1662 . rcx))
; _vars_96^7499 = r8
 mov r8, rdx
 sub rsp, 8
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2465
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 0], rax
 mov SELF, [___filter_2dmap] ; filter-map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_913
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_913:
; ((_var_99^7505 . rdx) (k1686 . rcx))
 mov rax, rdx
 mov r11, L2510 ; 
 cmp rax, r11
 jne L2511
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2511:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rsi, FALSE
 mov rdi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L2512:
f_2465:
; ((t1685 . rcx))
 mov rax, [SELF + 96]
; _y_46^7504 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1663 = rsi
 mov rsi, rax
; _e2_99^7502 = rdi
 mov rdi, rsi
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_914
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_915
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rsi, ALLOC
 add ALLOC, 88
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_915:
; ((_t1_101^7510 . rsi) (_t1_100^7509 . rdx) (k1665 . rcx))
; _body_102^7511 = rdi
 mov rdi, rdx
 sub rsp, 8
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2454
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 0], rax
 mov rdx, rsi
 mov rsi, [SELF + 80]
 mov SELF, [___difference] ; difference
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2454:
; ((t1666 . rcx))
; _fv_104^7513 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^7514 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2455
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_879
f_2455:
; ()
 mov rcx, [SELF + 64]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_916
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_917
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rsi, ALLOC
 add ALLOC, 72
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_917:
; ((_t1_106^7516 . rsi) (_t1_105^7515 . rdx) (k1669 . rcx))
; _fvrefs_107^7517 = rdi
 mov rdi, rdx
; _fv2_108^7518 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2456
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov [ALLOC + 56], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], r8
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_918
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 16]
; _x_44^7544 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___filter_2dmap] ; filter-map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_918:
; ((_expr_107^7520 . rdx) (k1679 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_919
 mov rax, ALLOC
 add ALLOC, 16
; _failure_109^7522 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2513
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_111^7525 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_112^7526 = r8
 mov r8, rax
; _v_114^7529 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2515
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_116^7531 = r10
 mov r10, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_117^7532 = r12
 mov r12, rax
 mov rax, r10
 SET_T r11
 CALL recursively_equal
 cmp rax, FALSE
 je L2517
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2519
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_119^7538 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [locals + 0] ; _w_119^7538
 SET_T r11
 CALL recursively_equal
 cmp rax, FALSE
 je L2521
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2463
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r9
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_877
L2521:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_919
L2522:
L2519:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_919
L2520:
L2517:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_919
L2518:
L2515:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_919
L2516:
L2513:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_919
L2514:
f_2463:
; ((t1683 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2464
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, L2523 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2464:
; ((t1684 . rcx))
 mov rdx, [SELF + 32]
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2462
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2462:
; ((t1682 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_919:
; ((k1680 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_920
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_920:
; ((k1681 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2524 ; 
 mov rsi, L2525 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2456:
; ((t1670 . rcx))
; _ubs_109^7519 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2461
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 64]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 72]
 mov SELF, [___union] ; union
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2461:
; ((t1677 . rcx))
 mov rax, [SELF + 64]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2460
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 56]
 mov SELF, [___union] ; union
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2460:
; ((t1675 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2459
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t1674 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7545 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2526
 mov rcx, [SELF + 32]
 mov SELF, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2459
L2526:
 mov rcx, rdx
 mov rdx, L2528 ; 
 mov rsi, [SELF + 40]
 mov rdi, [SELF + 32]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2527:
f_2459:
; ((t1673 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_916:
; ((k1668 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_914:
; ((k1664 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_903:
; ((k1646 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_904
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_69^7439 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7449 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2529
 mov rax, [SELF + 40]
; _x_44^7452 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7450 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7453 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7451 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2531 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2532
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2534
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7457 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_76^7458 = r9
 mov r9, rax
; _id_78^7461 = r10
 mov r10, r8
; _args_82^7462 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2448
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r10
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2534:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_904
L2535:
L2532:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_904
L2533:
L2529:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_904
L2530:
f_2448:
; ((t1651 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2536
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_907
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_908
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rsi, ALLOC
 add ALLOC, 24
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2536:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_904
L2537:
f_908:
; ((_t1_84^7464 . rsi) (_t1_83^7463 . rdx) (k1653 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, [SELF + 16]
; _x_45^7469 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^7468 = rdi
 mov rdi, rax
 mov rax, L2538 ; 
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___values] ; values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_907:
; ((k1652 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
f_904:
; ((k1647 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_905
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_69^7440 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^7442 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2539
 mov rax, [SELF + 16]
; _x_44^7445 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7443 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^7446 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7444 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2447
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2539:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_905
L2540:
f_2447:
; ((t1650 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2541
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_887
L2541:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_905
L2542:
f_905:
; ((k1648 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_906
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L2543 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_906:
; ((k1649 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2544 ; 
 mov rsi, L2545 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_887:
; ((_e_67^7410 . rsi) (_xs_66^7409 . rdx) (k1625 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_68^7411 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_888
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t1626 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_888
f_888:
; ((_fv_71^7414 . rdi) (_xs2_70^7413 . rsi) (_xs_69^7412 . rdx) (k1628 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2546
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2445
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2546:
 sub rsp, 24
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_890
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_889
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2547:
f_889:
; ((k1630 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_44^7416 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_891
f_890:
; ((_t1_73^7418 . rsi) (_t1_72^7417 . rdx) (k1631 . rcx))
; _x2_74^7419 = rdi
 mov rdi, rdx
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2446
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rdx, [SELF + 16]
 mov SELF, [___union] ; union
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2446:
; ((t1632 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _x_45^7422 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _y_46^7423 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^7421 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_888
f_2445:
; ((t1629 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_879:
; ((_e_66^7319 . rdx) (k1606 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rsi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_880
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov SELF, [___for_2deach] ; for-each
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_880:
; ((_expr_67^7320 . rdx) (k1607 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_881
 mov rax, ALLOC
 add ALLOC, 16
; _failure_69^7322 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2548
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7324 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7325 = r8
 mov r8, rax
; _v_74^7328 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2550
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^7330 = r10
 mov r10, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^7331 = r12
 mov r12, rax
; _assigned_79^7334 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2552
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^7336 = local #1
 mov [locals + 8], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_82^7337 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 8] ; _w_81^7336
; _shared_84^7340 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 16] ; _x_82^7337
; _refs_88^7341 = local #4
 mov [locals + 32], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2434
 mov rax, [locals + 0] ; _assigned_79^7334
 mov [ALLOC + 16], rax
 mov rax, [locals + 24] ; _shared_84^7340
 mov [ALLOC + 24], rax
 mov rax, [locals + 32] ; _refs_88^7341
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rsi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 16] ; _x_82^7337
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2552:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_881
L2553:
L2550:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_881
L2551:
L2548:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_881
L2549:
f_2434:
; ((t1609 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2554
 mov rax, [SELF + 16]
 mov r11, [SELF + 24]
 mov r15, FALSE
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; _boxed_89^7342 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_882
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rcx, [SELF + 40]
 mov rsi, [SELF + 32]
 mov SELF, [___for_2deach] ; for-each
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2554:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_881
L2555:
f_882:
; ((_expr_90^7343 . rdx) (k1610 . rcx))
; _v_91^7344 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_883
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
; _failure_92^7345 = rdi
 mov rdi, rax
; _ref_95^7391 = r8
 mov r8, rdx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2556
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_97^7393 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_98^7394 = r10
 mov r10, rax
 mov rax, r9
 mov r11, L2558 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2559
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2561
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7400 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2562
L2561:
 mov rax, FALSE
L2562:
 cmp rax, FALSE
 je L2563
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [SELF + 40]
 cmp rax, FALSE
 je L2565
; _x_44^7404 = r12
 mov r12, rdx
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2443
 mov [ALLOC + 16], r8
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r12
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_876
L2565:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2566:
L2563:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_883
L2564:
L2559:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_883
L2560:
L2556:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_883
L2557:
f_2443:
; ((t1623 . rcx))
 mov rax, [SELF + 40]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^7408 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7406 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2442
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L2567 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2442:
; ((t1622 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_883:
; ((k1611 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_884
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_92^7346 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _ref_95^7373 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^7374 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2568
 mov rax, [SELF + 48]
; _x_44^7377 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_97^7375 = rdi
 mov rdi, rax
 mov rax, [SELF + 48]
; _x_44^7378 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_98^7376 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L2570 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2571
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2573
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7382 = r9
 mov r9, rax
 mov rax, r9
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2574
L2573:
 mov rax, FALSE
L2574:
 cmp rax, FALSE
 je L2575
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [SELF + 40]
 cmp rax, FALSE
 je L2577
; _x_44^7386 = r9
 mov r9, rsi
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2440
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r9
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_876
L2577:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2578:
L2575:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_884
L2576:
L2571:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_884
L2572:
L2568:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_884
L2569:
f_2440:
; ((t1620 . rcx))
 mov rax, [SELF + 40]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^7390 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7388 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2439
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L2579 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2439:
; ((t1619 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_884:
; ((k1612 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_885
 mov rax, ALLOC
 add ALLOC, 16
; _failure_92^7347 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _ref_95^7349 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^7350 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2580
 mov rax, [SELF + 16]
; _x_44^7353 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_97^7351 = rdi
 mov rdi, rax
 mov rax, [SELF + 16]
; _x_44^7354 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_98^7352 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L2582 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2583
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2585
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_102^7359 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2587
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7363 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2588
L2587:
 mov rax, FALSE
L2588:
 cmp rax, FALSE
 je L2589
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_103^7365 = r10
 mov r10, rax
 mov rax, [SELF + 24]
 cmp rax, FALSE
 je L2591
; _x_44^7368 = r12
 mov r12, rsi
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2437
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r12
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_878
L2591:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2592:
L2589:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_885
L2590:
L2585:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_885
L2586:
L2583:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_885
L2584:
L2580:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_885
L2581:
f_2437:
; ((t1617 . rcx))
 mov rax, [SELF + 40]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^7372 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7370 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2436
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L2593 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2436:
; ((t1616 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_885:
; ((k1613 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_886
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_886:
; ((k1614 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2594 ; 
 mov rsi, L2595 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_881:
; ((k1608 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2596 ; 
 mov rsi, L2597 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_878:
; ((_var_66^7313 . rdx) (k1603 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2433
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_875
f_2433:
; ((t1604 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, L2598 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L2599
 mov rax, L2601 ; 
 jmp L2600
L2599:
 sub rsp, 8
 mov rax, rcx
 mov r11, L2602 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, L2603 ; 
 mov r15, L2604 ; 
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L2600:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_877:
; ((_var_66^7307 . rdx) (k1600 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2432
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_875
f_2432:
; ((t1601 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, L2605 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L2606
 mov rax, L2608 ; 
 jmp L2607
L2606:
 sub rsp, 8
 mov rax, rcx
 mov r11, L2609 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, L2610 ; 
 mov r15, L2611 ; 
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L2607:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_876:
; ((_var_66^7301 . rdx) (k1597 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2431
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_875
f_2431:
; ((t1598 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, L2612 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L2613
 mov rax, L2615 ; 
 jmp L2614
L2613:
 sub rsp, 8
 mov rax, rcx
 mov r11, L2616 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, L2617 ; 
 mov r15, L2618 ; 
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L2614:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_875:
; ((_var_66^7296 . rdx) (k1595 . rcx))
 mov rax, [SELF + 16]
; _lst_46^7299 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_67^7297 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rcx, rsi
 cmp rcx, FALSE
 je L2619
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L2620
L2619:
 mov rcx, FALSE
L2620:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_827:
; ((_form_52^6790 . rdx) (k1895 . rcx))
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _globals_53^6791 = rsi
 mov rsi, rax
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _dcount_54^6792 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _used_55^6793 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _defglobal_56^6794 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _used?_57^6795 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _destination_58^6796 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_59^6797 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_828
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_829
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_830
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_831
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_832
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r12
 mov rax, [locals + 0] ; _walk_59^6797
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], r10
 mov [ALLOC + 56], rdi
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, [locals + 0] ; _walk_59^6797
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2631
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov rax, [locals + 0] ; _walk_59^6797
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, r8
 mov SELF, [SELF + 8]
 mov rdx, L2621 ; 
 mov rsi, null ; 
 mov rdi, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_828
f_2631:
; ()
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2632
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, null ; 
 mov rdi, FALSE
 mov r8, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2632:
; ((t2026 . rcx))
; _form_60^7260 = rdx
 mov rdx, rcx
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ucount_61^7261 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_62^7262 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_871
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t2027 = r8
 mov r8, rax
 mov rcx, [SELF + 32]
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov SELF, r8
 mov rsi, null ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_871
f_871:
; ((_unused_64^7264 . rsi) (_globals_63^7263 . rdx) (k2029 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2634
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___filter_2dmap] ; filter-map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_872
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_872:
; ((_global_65^7266 . rdx) (k2040 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7267 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 cmp rcx, FALSE
 je L2622
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L2623
L2622:
 mov rcx, FALSE
L2623:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2634:
; ((t2030 . rcx))
; _ulist_65^7265 = rdx
 mov rdx, rcx
 mov rax, rcx
 CALL list_length
 mov rsi, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2641
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2641:
; ((t2038 . rcx))
 mov rax, [SELF + 72]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 16]
; _x_44^7272 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2624
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2636
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, L2626 ; 
 mov rsi, [SELF + 72]
 mov rsi, [rsi + 8]
 mov SELF, [____4e_42] ; NB
 mov rdi, L2627 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2624:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2638
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_873
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 32]
 mov SELF, [___filter_2dmap] ; filter-map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2625:
f_873:
; ((_global_66^7273 . rdx) (k2036 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^7275 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _lst_46^7276 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL member_eq
; _x_44^7274 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L2628
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^7278 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2640
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [___difference] ; difference
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2628:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2629:
f_2640:
; ((t2037 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2638:
; ((t2034 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2639
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2639:
; ((t2035 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_871
f_2636:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2637
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, L2630 ; 
 mov rsi, [SELF + 40]
 mov rsi, [rsi + 8]
 mov SELF, [____4e_42] ; NB
 mov rdi, L2631 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2637:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_832:
; ((_dest_63^6839 . r8) (_here_62^6838 . rdi) (_env_61^6837 . rsi) (_x_60^6836 . rdx) (k1914 . rcx))
; _v_64^6840 = r9
 mov r9, rdx
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_833
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov [ALLOC + 72], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
; _failure_65^6841 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2632
 sub rsp, 40
 mov [rsp + 0], rdi
 mov [rsp + 8], rsi
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_828
L2632:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_833
L2633:
f_833:
; ((k1915 . rcx))
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_834
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
; _failure_65^6842 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7247 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2634
 mov rax, [SELF + 40]
; _x_44^7250 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^7248 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7251 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^7249 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2636 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2637
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2639
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7255 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2640
L2639:
 mov rax, FALSE
L2640:
 cmp rax, FALSE
 je L2641
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2641:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_834
L2642:
L2637:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_834
L2638:
L2634:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_834
L2635:
f_834:
; ((k1916 . rcx))
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_835
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; _failure_65^6843 = rdx
 mov rdx, rax
 mov rax, [SELF + 72]
; _x_44^7163 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2643
 mov rax, [SELF + 72]
; _x_44^7166 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^7164 = rsi
 mov rsi, rax
 mov rax, [SELF + 72]
; _x_44^7167 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^7165 = rdi
 mov rdi, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_865
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov [ALLOC + 80], rdi
 mov rax, ALLOC
 add ALLOC, 88
; _sk2_69^7168 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_870
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_70^7242 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L2645 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2646
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_865
L2646:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_870
L2647:
L2643:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_835
L2644:
f_870:
; ((k2024 . rcx))
 mov rax, [SELF + 32]
; _x_44^7243 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L2648 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2649
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_865
L2649:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_835
L2650:
f_865:
; ((k1999 . rcx))
 mov rax, [SELF + 80]
; _x_44^7169 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2651
 mov rax, [SELF + 80]
; _x_44^7172 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^7170 = rdx
 mov rdx, rax
 mov rax, [SELF + 80]
; _x_44^7173 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^7171 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_77^7174 = rdi
 mov rdi, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_866
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rdi
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t2000 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_866
L2651:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_835
L2652:
f_866:
; ((_p-ls_80^7177 . rdi) (_p-ls_79^7176 . rsi) (_ls_78^7175 . rdx) (k2002 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2653
 sub rsp, 8
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2615
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rdi
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2653:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2655
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^7223 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2657
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^7226 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_84^7227 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2659
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7232 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2660
L2659:
 mov rax, FALSE
L2660:
 cmp rax, FALSE
 je L2661
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^7234 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_866
L2661:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_835
L2662:
L2657:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_835
L2658:
L2655:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_835
L2656:
L2654:
f_2615:
; ((t2003 . rcx))
; _vals_81^7179 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2616
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 96], rax
 mov rcx, ALLOC
 add ALLOC, 104
 mov rdx, [SELF + 96]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2616:
; ((t2004 . rcx))
; _vars_82^7180 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^7181 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2663
 mov rax, [SELF + 16]
; _x_44^7183 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7182 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2664
L2663:
 mov rax, FALSE
L2664:
 cmp rax, FALSE
 je L2665
 mov rax, [SELF + 16]
; _x_44^7185 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^7184 = rsi
 mov rsi, rax
; _body_85^7186 = rdi
 mov rdi, rsi
 mov rsi, rcx
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2630
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rcx, ALLOC
 add ALLOC, 104
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_867
 mov rdx, ALLOC
 add ALLOC, 16
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2665:
 sub rsp, 16
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_835
L2666:
f_867:
; ((_x_86^7188 . rdx) (k2023 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, FALSE
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2630:
; ((t2022 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2617
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rcx, ALLOC
 add ALLOC, 104
 mov rsi, [SELF + 80]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2617:
; ((t2005 . rcx))
; _env2_86^7187 = rdx
 mov rdx, rcx
 sub rsp, 48
 mov rax, [SELF + 96]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2618
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 32], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2618:
; ((t2006 . rcx))
; _body_87^7191 = rdx
 mov rdx, rcx
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_44^7195 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^7194 = rsi
 mov rsi, rax
 mov rax, L2667 ; 
 mov r11, rsi
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 mov [rsp + 0], rax
 mov r11, [SELF + 32]
 mov r15, [SELF + 24]
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; _eenv_88^7192 = rsi
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2619
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_868
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 88]
 mov rdi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_868:
; ((_x_90^7198 . rsi) (_x_89^7197 . rdx) (k2021 . rcx))
 sub rsp, 48
 mov [rsp + 0], rsi
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_832
f_2619:
; ((t2007 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_90^7199 = rdx
 mov rdx, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_869
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t2008 = rsi
 mov rsi, rax
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov [rsp + 16], rax
 mov [rsp + 24], rsi
 mov rdi, null ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_869
f_869:
; ((_new_93^7202 . rdi) (_vals_92^7201 . rsi) (_vars_91^7200 . rdx) (k2010 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2668
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L2670
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2670:
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2621
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2671:
L2668:
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2622
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_830
L2669:
f_2622:
; ((t2012 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2672
 sub rsp, 16
 mov rax, [SELF + 24]
; _x_44^7212 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_44^7211 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2624
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2672:
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^7213 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2625
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [___pure_2dexpression_3f] ; pure-expression?
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2673:
f_2625:
; ((t2015 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2674
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2627
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2674:
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2629
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, [SELF + 56]
; _x_44^7221 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [____25list] ; %list
 mov rdx, L2676 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2675:
f_2629:
; ((t2020 . rcx))
 mov rax, [SELF + 48]
; _y_46^7220 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2019 = rsi
 mov rsi, rax
 sub rsp, 40
 mov [rsp + 0], rsi
 mov rax, [SELF + 40]
; _x_44^7218 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^7217 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_869
f_2627:
; ((t2017 . rcx))
 mov rax, [SELF + 56]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^7216 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
; _x_44^7215 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_869
f_2624:
; ((t2014 . rcx))
 mov rax, [SELF + 48]
; _y_46^7210 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2013 = rsi
 mov rsi, rax
 sub rsp, 40
 mov [rsp + 0], rsi
 mov rax, [SELF + 40]
; _x_44^7208 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^7207 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_869
f_2621:
; ((t2011 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^7205 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rcx, [SELF + 32]
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_835:
; ((k1917 . rcx))
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_836
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; _failure_65^6844 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7150 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2677
 mov rax, [SELF + 40]
; _x_44^7153 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^7151 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7154 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^7152 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2679 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2680
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2682
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7158 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2683
L2682:
 mov rax, FALSE
L2683:
 cmp rax, FALSE
 je L2684
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^7160 = r8
 mov r8, rax
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov [rsp + 16], rax
 mov [rsp + 24], r8
 mov [rsp + 32], rcx
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
L2684:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_836
L2685:
L2680:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_836
L2681:
L2677:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_836
L2678:
f_836:
; ((k1918 . rcx))
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_837
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; _failure_65^6845 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _x_44^7134 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2686
 mov rax, [SELF + 64]
; _x_44^7137 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^7135 = rsi
 mov rsi, rax
 mov rax, [SELF + 64]
; _x_44^7138 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^7136 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2688 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2689
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2691
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7142 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7143 = r9
 mov r9, rax
; _x1_74^7146 = r10
 mov r10, r8
; _xs_78^7147 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2611
 mov [ALLOC + 16], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2691:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_837
L2692:
L2689:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_837
L2690:
L2686:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_837
L2687:
f_2611:
; ((t1996 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2693
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2612
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
L2693:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_837
L2694:
f_2612:
; ((t1997 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
; _y_46^7149 = rdx
 mov rdx, rax
 mov rax, L2695 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 24], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2613
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2613:
; ((t1998 . rcx))
 mov rdx, L2696 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_837:
; ((k1919 . rcx))
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_838
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; _failure_65^6846 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7096 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2697
 mov rax, [SELF + 40]
; _x_44^7099 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^7097 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7100 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^7098 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2699 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2700
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2702
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7104 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7105 = r9
 mov r9, rax
; _id_74^7108 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2704
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^7110 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^7111 = local #0
 mov [locals + 0], rax
; _llist_79^7114 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_77^7111
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2706
 mov rax, [locals + 0] ; _x_77^7111
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7116 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^7116
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2707
L2706:
 mov rax, FALSE
L2707:
 cmp rax, FALSE
 je L2708
 mov rax, [locals + 0] ; _x_77^7111
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^7118 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_80^7118
; _body_82^7120 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_861
 mov rax, [locals + 8] ; _llist_79^7114
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_862
 mov [ALLOC + 16], r10
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [locals + 24] ; _body_82^7120
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rsi, ALLOC
 add ALLOC, 72
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2708:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_838
L2709:
L2704:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_838
L2705:
L2702:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_838
L2703:
L2700:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_838
L2701:
L2697:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_838
L2698:
f_862:
; ((_t1_85^7123 . rdi) (_t1_84^7122 . rsi) (_t1_83^7121 . rdx) (k1984 . rcx))
; _vars_86^7124 = r8
 mov r8, rdx
; _argc_87^7125 = r9
 mov r9, rsi
; _rest_88^7126 = r10
 mov r10, rdi
 sub rsp, 8
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2610
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov [ALLOC + 64], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], r9
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rcx
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_863
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_863:
; ((_x_89^7128 . rdx) (k1995 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, FALSE
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2610:
; ((t1994 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2603
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov rcx, ALLOC
 add ALLOC, 96
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2603:
; ((t1985 . rcx))
; _env2_89^7127 = rdx
 mov rdx, rcx
 sub rsp, 40
 mov rax, [SELF + 16]
; _x_90^7132 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rsi
 mov r15, [SELF + 24]
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2604
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2604:
; ((t1986 . rcx))
; _body_90^7131 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2606
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_864
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 64]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_864:
; ((_var_91^7133 . rdx) (k1992 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2609
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_830
f_2609:
; ((t1993 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2710
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2710:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L2712 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2711:
f_2606:
; ((t1988 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2607
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t1990 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L2713
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2608
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_830
L2713:
 mov SELF, rdx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2607
L2714:
f_2608:
; ((t1991 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2715
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2607
L2715:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L2717 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_2607
L2716:
f_2607:
; ((t1989 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 48]
 mov rdi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2605
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___build_2dlambda_2dlist] ; build-lambda-list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2605:
; ((t1987 . rcx))
 mov rdx, L2718 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 32]
 mov r8, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_861:
; ((k1983 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_838:
; ((k1920 . rcx))
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_839
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; _failure_65^6847 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _x_44^7037 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2719
 mov rax, [SELF + 64]
; _x_44^7040 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^7038 = rsi
 mov rsi, rax
 mov rax, [SELF + 64]
; _x_44^7041 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^7039 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2721 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2722
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2724
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^7045 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^7046 = r9
 mov r9, rax
; _id_73^7049 = r10
 mov r10, r8
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_79^7050 = r12
 mov r12, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_855
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov [ALLOC + 64], rdx
 mov [ALLOC + 72], r12
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r12
 mov rax, [rax + 8]
; t1962 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; t1962
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_855
L2724:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_839
L2725:
L2722:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_839
L2723:
L2719:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_839
L2720:
f_855:
; ((_p-ls_82^7053 . rdi) (_p-ls_81^7052 . rsi) (_ls_80^7051 . rdx) (k1964 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2726
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2591
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2726:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2728
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^7077 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2730
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^7080 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_86^7081 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2732
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7086 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2733
L2732:
 mov rax, FALSE
L2733:
 cmp rax, FALSE
 je L2734
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_89^7088 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_855
L2734:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_839
L2735:
L2730:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_839
L2731:
L2728:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_839
L2729:
L2727:
f_2591:
; ((t1965 . rcx))
; _bodies_83^7055 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2592
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 72]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2592:
; ((t1966 . rcx))
 mov rax, [SELF + 72]
; _x_45^7059 = rdx
 mov rdx, rax
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2594
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_856
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rdx, ALLOC
 add ALLOC, 56
 mov rdi, [SELF + 64]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_856:
; ((_body_86^7062 . rsi) (_llist_85^7061 . rdx) (k1969 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_858
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_857
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_857:
; ((k1970 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_858:
; ((_t1_89^7065 . rdi) (_t1_88^7064 . rsi) (_t1_87^7063 . rdx) (k1971 . rcx))
; _vars_90^7066 = r8
 mov r8, rdx
; _argc_91^7067 = r9
 mov r9, rsi
; _rest_92^7068 = r10
 mov r10, rdi
 sub rsp, 8
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2602
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov [ALLOC + 64], r10
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], r9
 mov [ALLOC + 88], rcx
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_859
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_859:
; ((_x_93^7070 . rdx) (k1982 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, FALSE
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2602:
; ((t1981 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2595
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2595:
; ((t1972 . rcx))
; _env2_93^7069 = rdx
 mov rdx, rcx
 sub rsp, 40
 mov rax, [SELF + 16]
; _x_94^7074 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rsi
 mov r15, [SELF + 24]
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2596
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2596:
; ((t1973 . rcx))
; _body_94^7073 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2598
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_860
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_860:
; ((_var_95^7075 . rdx) (k1979 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2601
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_830
f_2601:
; ((t1980 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2736
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2736:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L2738 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2737:
f_2598:
; ((t1975 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2599
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t1977 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L2739
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2600
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_830
L2739:
 mov SELF, rdx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2599
L2740:
f_2600:
; ((t1978 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2741
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2599
L2741:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L2743 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_2599
L2742:
f_2599:
; ((t1976 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 40]
 mov rdi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2597
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___build_2dlambda_2dlist] ; build-lambda-list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2597:
; ((t1974 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2594:
; ((t1968 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1967 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L2744 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_839:
; ((k1921 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_840
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_65^6848 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^7012 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2745
 mov rax, [SELF + 40]
; _x_44^7015 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^7013 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^7016 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^7014 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2747 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2748
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2750
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^7020 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^7021 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2752
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^7026 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^7027 = r12
 mov r12, rax
; _y_79^7030 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2754
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7032 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^7032
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2755
L2754:
 mov rax, FALSE
L2755:
 cmp rax, FALSE
 je L2756
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^7034 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _w_80^7034
; _z_82^7036 = local #2
 mov [locals + 16], rax
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2587
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [locals + 16] ; _z_82^7036
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [locals + 0] ; _y_79^7030
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, r8
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
L2756:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_840
L2757:
L2752:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_840
L2753:
L2750:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_840
L2751:
L2748:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_840
L2749:
L2745:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_840
L2746:
f_2587:
; ((t1959 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov [rsp + 24], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2588
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 32], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2588:
; ((t1960 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov [rsp + 24], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2589
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 32], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2589:
; ((t1961 . rcx))
 mov rdx, L2758 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_840:
; ((k1922 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_841
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_65^6849 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^6990 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2759
 mov rax, [SELF + 56]
; _x_44^6993 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6991 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^6994 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6992 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2761 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2762
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2764
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6998 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6999 = r9
 mov r9, rax
; _var_74^7002 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2766
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^7004 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2767
L2766:
 mov rax, FALSE
L2767:
 cmp rax, FALSE
 je L2768
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^7006 = r12
 mov r12, rax
; _x_77^7008 = local #0
 mov [locals + 0], r12
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2584
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [locals + 0] ; _x_77^7008
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; t1958 = local #1
 mov [locals + 8], rax
 mov rax, [SELF + 32]
; _lst_46^7010 = local #2
 mov [locals + 16], rax
 mov rax, r8
 mov r11, [locals + 16] ; _lst_46^7010
 CALL assoc_eq
 cmp rax, FALSE
 je L2770
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rcx, [locals + 8] ; t1958
 mov rdx, r8
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_828
L2770:
 sub rsp, 8
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rcx, [locals + 8] ; t1958
 mov rdx, r8
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_829
L2771:
L2768:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_841
L2769:
L2764:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_841
L2765:
L2762:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_841
L2763:
L2759:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_841
L2760:
f_2584:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2586
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_831
f_2586:
; ((t1957 . rcx))
 sub rsp, 48
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov [rsp + 24], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2585
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2585:
; ((t1956 . rcx))
 mov rdx, L2772 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_841:
; ((k1923 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_842
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_65^6850 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^6971 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2773
 mov rax, [SELF + 32]
; _x_44^6974 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6972 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^6975 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6973 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2775 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2776
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2778
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6979 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6980 = r9
 mov r9, rax
; _var_74^6983 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2780
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6985 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2781
L2780:
 mov rax, FALSE
L2781:
 cmp rax, FALSE
 je L2782
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^6987 = r12
 mov r12, rax
; _x_77^6989 = local #0
 mov [locals + 0], r12
 sub rsp, 16
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2581
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [locals + 0] ; _x_77^6989
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r8
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_829
L2782:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_842
L2783:
L2778:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_842
L2779:
L2776:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_842
L2777:
L2773:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_842
L2774:
f_2581:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2583
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_831
f_2583:
; ((t1954 . rcx))
 sub rsp, 48
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov [rsp + 24], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2582
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_832
f_2582:
; ((t1953 . rcx))
 mov rdx, L2784 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_842:
; ((k1924 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_843
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_65^6851 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^6958 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2785
 mov rax, [SELF + 48]
; _x_44^6961 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6959 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^6962 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6960 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2787 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2788
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2790
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6966 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2791
L2790:
 mov rax, FALSE
L2791:
 cmp rax, FALSE
 je L2792
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^6968 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2792:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_843
L2793:
L2788:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_843
L2789:
L2785:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_843
L2786:
f_843:
; ((k1925 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_844
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_65^6852 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6939 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2794
 mov rax, [SELF + 16]
; _x_44^6942 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6940 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6943 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6941 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2796 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2797
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2799
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6947 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6948 = r9
 mov r9, rax
; _n_74^6951 = r10
 mov r10, r8
; _xs_78^6952 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2578
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2799:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_844
L2800:
L2797:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_844
L2798:
L2794:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_844
L2795:
f_2578:
; ((t1948 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2801
 mov rax, [SELF + 16]
; _x_45^6955 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2580
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_854
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2801:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_844
L2802:
f_854:
; ((_x_79^6957 . rdx) (k1951 . rcx))
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 6 ; 
 jmp f_832
f_2580:
; ((t1950 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1949 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L2803 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_844:
; ((k1926 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_845
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_65^6853 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^6912 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2804
 mov rax, [SELF + 48]
; _x_44^6915 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6913 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^6916 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6914 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2806 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2807
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2809
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6920 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6921 = r9
 mov r9, rax
; _n_74^6924 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2811
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^6926 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^6927 = local #0
 mov [locals + 0], rax
; _cnd_79^6930 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_77^6927
; _xs_83^6931 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2574
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [locals + 16] ; _xs_83^6931
 mov [ALLOC + 56], rax
 mov rax, [locals + 8] ; _cnd_79^6930
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_77^6927
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2811:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_845
L2812:
L2809:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_845
L2810:
L2807:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_845
L2808:
L2804:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_845
L2805:
f_2574:
; ((t1943 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2813
 mov rax, [SELF + 16]
; _x_45^6934 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _x_45^6936 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2577
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_853
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2813:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_845
L2814:
f_853:
; ((_x_84^6938 . rdx) (k1947 . rcx))
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 6 ; 
 jmp f_832
f_2577:
; ((t1946 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1945 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1944 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L2815 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_845:
; ((k1927 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_846
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_65^6854 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6885 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2816
 mov rax, [SELF + 16]
; _x_44^6888 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6886 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6889 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6887 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2818 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2819
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2821
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6893 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6894 = r9
 mov r9, rax
; _t_74^6897 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2823
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^6899 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^6900 = local #0
 mov [locals + 0], rax
; _s_79^6903 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_77^6900
; _xs_83^6904 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2570
 mov [ALLOC + 16], r10
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [locals + 16] ; _xs_83^6904
 mov [ALLOC + 56], rax
 mov rax, [locals + 8] ; _s_79^6903
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_77^6900
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2823:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_846
L2824:
L2821:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_846
L2822:
L2819:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_846
L2820:
L2816:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_846
L2817:
f_2570:
; ((t1938 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2825
 mov rax, [SELF + 16]
; _x_45^6907 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _x_45^6909 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2573
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_852
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2825:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_846
L2826:
f_852:
; ((_x_84^6911 . rdx) (k1942 . rcx))
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 6 ; 
 jmp f_832
f_2573:
; ((t1941 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1940 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1939 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L2827 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_846:
; ((k1928 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_847
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_65^6855 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^6866 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2828
 mov rax, [SELF + 48]
; _x_44^6869 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6867 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^6870 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6868 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2830 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2831
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2833
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6874 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6875 = r9
 mov r9, rax
; _id_74^6878 = r10
 mov r10, r8
; _xs_78^6879 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2567
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2833:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_847
L2834:
L2831:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_847
L2832:
L2828:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_847
L2829:
f_2567:
; ((t1934 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2835
 mov rax, [SELF + 16]
; _x_45^6882 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2569
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_851
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2835:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_847
L2836:
f_851:
; ((_x_79^6884 . rdx) (k1937 . rcx))
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 6 ; 
 jmp f_832
f_2569:
; ((t1936 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1935 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L2837 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_847:
; ((k1929 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_848
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_65^6856 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6858 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2838
 mov rax, [SELF + 16]
; _x_44^6861 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6859 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6862 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6860 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2566
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2838:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_848
L2839:
f_2566:
; ((t1932 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2840
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_850
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2840:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_848
L2841:
f_850:
; ((_x_75^6865 . rdx) (k1933 . rcx))
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov r8, FALSE
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 6 ; 
 jmp f_832
f_848:
; ((k1930 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_849
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L2842 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_849:
; ((k1931 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2843 ; 
 mov rsi, L2844 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_831:
; ((_env_61^6832 . rsi) (_var_60^6831 . rdx) (k1912 . rcx))
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _x_44^6833 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov r11, rdx
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 mov rcx, r11
 cmp rax, FALSE
 cmove rcx, r15
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_830:
; ((_env_61^6826 . rsi) (_var_60^6825 . rdx) (k1910 . rcx))
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_62^6827 = rdi
 mov rdi, rax
 mov SELF, rcx
 mov rcx, rdi
 cmp rcx, FALSE
 je L2845
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L2846
L2845:
 mov rcx, FALSE
L2846:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_829:
; ((_var_60^6819 . rdx) (k1905 . rcx))
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _lst_46^6822 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _x_61^6820 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L2847
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L2847:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2565
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2848:
f_2565:
; ((t1908 . rcx))
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^6824 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1906 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
 mov r11, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_828:
; ((_where_62^6800 . rdi) (_env_61^6799 . rsi) (_var_60^6798 . rdx) (k1897 . rcx))
 mov rax, rdx
 mov r11, rdi
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_63^6801 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2560
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t1899 = r9
 mov r9, rax
 mov rax, r8
 cmp rax, FALSE
 je L2849
 mov SELF, r9
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2560
L2849:
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_64^6804 = r10
 mov r10, rax
 mov rax, r10
 cmp rax, FALSE
 je L2851
 mov SELF, r9
 mov rax, r10
 mov r11, 3 ; '1
 SET_T r15
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2560
L2851:
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _lst_46^6812 = r12
 mov r12, rax
 mov rax, rdx
 mov r11, r12
 CALL assoc_eq
; _tmp_65^6810 = r12
 mov r12, rax
 mov rax, r12
 cmp rax, FALSE
 je L2853
; _x_44^6814 = local #0
 mov [locals + 0], r12
 mov SELF, [___adjoin] ; adjoin
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2561
 mov rax, [locals + 0] ; _x_44^6814
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rsi, rdi
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2853:
 sub rsp, 8
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2563
 mov [ALLOC + 16], r9
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rsi, rdi
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2854:
L2852:
L2850:
f_2563:
; ((t1903 . rcx))
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^6818 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t1901 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
 mov r11, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2560
f_2561:
; ((t1900 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, 3 ; '1
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2560
f_2560:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_780:
; ((_form_52^6239 . rdx) (k2041 . rcx))
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _scount_53^6240 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _add-env_54^6241 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _assigned!_55^6242 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _used!_56^6243 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _use-count_57^6244 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_58^6245 = r12
 mov r12, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_781
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_783
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_784
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_785
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_786
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], r10
 mov [ALLOC + 56], r9
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2700
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, r12
 mov SELF, [SELF + 8]
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2700:
; ((t2161 . rcx))
; _form_59^6789 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2701
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L2855 ; 
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov SELF, [____4e_42] ; NB
 mov rdi, L2856 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2701:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_786:
; ((_e_60^6272 . rsi) (_x_59^6271 . rdx) (k2054 . rcx))
; _v_61^6273 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_787
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_62^6274 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2857
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_64^6786 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2699
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t2160 = r10
 mov r10, rax
 mov rax, r9
 cmp rax, FALSE
 je L2859
 sub rsp, 8
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rcx, r10
 mov rdx, r9
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_784
L2859:
 mov SELF, r10
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2699
L2860:
L2857:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_787
L2858:
f_2699:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_787:
; ((k2055 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_788
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; _failure_62^6275 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^6773 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2861
 mov rax, [SELF + 32]
; _x_44^6776 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6774 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^6777 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6775 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2863 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2864
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2866
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6781 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2867
L2866:
 mov rax, FALSE
L2867:
 cmp rax, FALSE
 je L2868
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2868:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_788
L2869:
L2864:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_788
L2865:
L2861:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_788
L2862:
f_788:
; ((k2056 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_789
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_62^6276 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^6676 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2870
 mov rax, [SELF + 56]
; _x_44^6679 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^6677 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^6680 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^6678 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2872 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2873
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2875
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6684 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6685 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_74^6688 = r10
 mov r10, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_820
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], r10
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2136 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_820
L2875:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2876:
L2873:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2874:
L2870:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2871:
f_820:
; ((_p-ls_77^6691 . rdi) (_p-ls_76^6690 . rsi) (_ls_75^6689 . rdx) (k2138 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2877
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2688
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdi
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2877:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2879
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^6754 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2881
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^6757 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^6758 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2883
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6763 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2884
L2883:
 mov rax, FALSE
L2884:
 cmp rax, FALSE
 je L2885
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_84^6765 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_820
L2885:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2886:
L2881:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2882:
L2879:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2880:
L2878:
f_2688:
; ((t2139 . rcx))
; _vals_78^6693 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2689
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov rdx, [SELF + 80]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2689:
; ((t2140 . rcx))
; _vars_79^6694 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^6695 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2887
 mov rax, [SELF + 16]
; _x_44^6697 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6696 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2888
L2887:
 mov rax, FALSE
L2888:
 cmp rax, FALSE
 je L2889
 mov rax, [SELF + 16]
; _x_44^6699 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^6698 = rsi
 mov rsi, rax
; _body_82^6700 = rdi
 mov rdi, rsi
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2690
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_821
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2889:
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_789
L2890:
f_821:
; ((_x_83^6702 . rdx) (k2158 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_786
f_2690:
; ((t2141 . rcx))
; _vals_83^6701 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2691
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_781
f_2691:
; ((t2142 . rcx))
; _e2_84^6703 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2692
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2692:
; ((t2143 . rcx))
; _body_85^6704 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2693
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2150 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _v_86^6705 = rdi
 mov rdi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_822
 mov rax, ALLOC
 add ALLOC, 16
; _failure_87^6706 = r8
 mov r8, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2697
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2157 = r9
 mov r9, rax
; _x_44^6708 = r10
 mov r10, rdi
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2891
; _x_44^6710 = r10
 mov r10, rdi
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6709 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2892
L2891:
 mov rax, FALSE
L2892:
 cmp rax, FALSE
 je L2893
; _x_44^6712 = r10
 mov r10, rdi
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_88^6711 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2895
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_89^6714 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r12
 mov r11, L2897 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2898
 mov SELF, r9
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2697
L2898:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_822
L2899:
L2895:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_822
L2896:
L2893:
 mov SELF, r8
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_822
L2894:
f_2697:
; ((t2151 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2900
 mov rax, [SELF + 16]
; _v_86^6720 = rdx
 mov rdx, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_824
 mov rax, ALLOC
 add ALLOC, 16
; _failure_87^6721 = rsi
 mov rsi, rax
; _x_44^6723 = rdi
 mov rdi, rdx
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2902
; _x_44^6726 = rdi
 mov rdi, rdx
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_88^6724 = rdi
 mov rdi, rax
; _x_44^6727 = r8
 mov r8, rdx
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_89^6725 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L2904 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2905
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2907
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_91^6731 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2909
 mov rax, [SELF + 24]
; _x_44^6739 = r10
 mov r10, rax
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^6738 = r10
 mov r10, rax
 mov rax, r9
 mov r11, r10
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2911
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2698
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r9
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_785
L2911:
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2693
L2912:
L2909:
 mov rcx, [SELF + 40]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_824
L2910:
L2907:
 mov rcx, [SELF + 40]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_824
L2908:
L2905:
 mov rcx, [SELF + 40]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_824
L2906:
L2902:
 mov rcx, [SELF + 40]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_824
L2903:
L2900:
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2693
L2901:
f_2698:
; ((t2154 . rcx))
 sub rsp, 16
 mov rax, 3 ; '1
 mov r11, rcx
 CALL structurally_equal
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2693
f_824:
; ((k2152 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_825
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_825:
; ((k2153 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2913 ; 
 mov rsi, L2914 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_822:
; ((k2155 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_823
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_823:
; ((k2156 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L2915 ; 
 mov rsi, L2916 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2693:
; ((t2144 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L2917
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2695
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2917:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2696
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_826
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 48]
 mov rdi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2918:
f_826:
; ((_val_87^6752 . rsi) (_var_86^6751 . rdx) (k2149 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, [____25list] ; %list
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2696:
; ((t2148 . rcx))
 mov rdx, L2919 ; 
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2695:
; ((t2146 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 24]
; _x_44^6747 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^6745 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6748 = rsi
 mov rsi, rax
; _x_44^6750 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6749 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^6746 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^6744 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, L2920 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_789:
; ((k2057 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_790
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_62^6277 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^6628 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2921
 mov rax, [SELF + 32]
; _x_44^6631 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^6629 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^6632 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^6630 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2923 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2924
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2926
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6636 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6637 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_74^6640 = r10
 mov r10, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_818
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2126 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_818
L2926:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2927:
L2924:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2925:
L2921:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2922:
f_818:
; ((_p-ls_77^6643 . rdi) (_p-ls_76^6642 . rsi) (_ls_75^6641 . rdx) (k2128 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L2928
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2681
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2928:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2930
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^6657 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2932
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^6660 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^6661 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2934
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6666 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2935
L2934:
 mov rax, FALSE
L2935:
 cmp rax, FALSE
 je L2936
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_84^6668 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_818
L2936:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2937:
L2932:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2933:
L2930:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2931:
L2929:
f_2681:
; ((t2129 . rcx))
; _vals_78^6645 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2682
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 64]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2682:
; ((t2130 . rcx))
; _vars_79^6646 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^6647 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2938
 mov rax, [SELF + 16]
; _x_44^6649 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6648 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2939
L2938:
 mov rax, FALSE
L2939:
 cmp rax, FALSE
 je L2940
 mov rax, [SELF + 16]
; _x_44^6651 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^6650 = rsi
 mov rsi, rax
; _body_82^6652 = rdi
 mov rdi, rsi
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2683
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_781
L2940:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_790
L2941:
f_2683:
; ((t2131 . rcx))
; _e_83^6653 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_819
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2684
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2684:
; ((t2132 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2685
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2685:
; ((t2133 . rcx))
 mov rdx, L2942 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_819:
; ((_val_85^6655 . rsi) (_var_84^6654 . rdx) (k2134 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2686
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2686:
; ((t2135 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_790:
; ((k2058 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_791
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; _failure_62^6278 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^6609 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2943
 mov rax, [SELF + 48]
; _x_44^6612 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6610 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^6613 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6611 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2945 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2946
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2948
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6617 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6618 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2950
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6623 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2951
L2950:
 mov rax, FALSE
L2951:
 cmp rax, FALSE
 je L2952
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^6625 = r10
 mov r10, rax
; _y_74^6627 = r12
 mov r12, r10
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2678
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
L2952:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_791
L2953:
L2948:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_791
L2949:
L2946:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_791
L2947:
L2943:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_791
L2944:
f_2678:
; ((t2124 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2679
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2679:
; ((t2125 . rcx))
 mov rdx, L2954 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_791:
; ((k2059 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_792
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_62^6279 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^6521 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2955
 mov rax, [SELF + 32]
; _x_44^6524 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6522 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^6525 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6523 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2957 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2958
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2960
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6529 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6530 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2962
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^6535 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^6536 = r12
 mov r12, rax
; _y_76^6539 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2964
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6541 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^6541
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2965
L2964:
 mov rax, FALSE
L2965:
 cmp rax, FALSE
 je L2966
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^6543 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _w_77^6543
; _z_79^6545 = local #2
 mov [locals + 16], rax
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2671
 mov rax, [locals + 0] ; _y_76^6539
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [locals + 16] ; _z_79^6545
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
L2966:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_792
L2967:
L2962:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_792
L2963:
L2960:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_792
L2961:
L2958:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_792
L2959:
L2955:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_792
L2956:
f_2671:
; ((t2112 . rcx))
; _x_80^6546 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2672
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2672:
; ((t2113 . rcx))
; _y_81^6547 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2673
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2673:
; ((t2114 . rcx))
; _z_82^6548 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _v_83^6549 = rsi
 mov rsi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_815
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_84^6550 = rdi
 mov rdi, rax
; _x_44^6581 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2968
; _x_44^6584 = r8
 mov r8, rsi
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_86^6582 = r8
 mov r8, rax
; _x_44^6585 = r9
 mov r9, rsi
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_87^6583 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L2970 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2971
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2973
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_89^6589 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_90^6590 = r12
 mov r12, rax
; _x1_92^6593 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2975
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_93^6595 = local #1
 mov [locals + 8], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_94^6596 = local #2
 mov [locals + 16], rax
 mov rax, L2977 ; 
; _y_45^6600 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 8] ; _w_93^6595
 mov r11, [locals + 24] ; _y_45^6600
 CALL recursively_equal
 cmp rax, FALSE
 je L2978
 sub rsp, 8
 mov rax, [locals + 16] ; _x_94^6596
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2980
 mov rax, [locals + 16] ; _x_94^6596
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6602 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _x_44^6602
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L2981
L2980:
 mov rax, FALSE
L2981:
 cmp rax, FALSE
 je L2982
 mov rax, [locals + 16] ; _x_94^6596
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_95^6604 = local #3
 mov [locals + 24], rax
 mov rax, L2984 ; 
; _y_45^6607 = local #4
 mov [locals + 32], rax
 mov rax, [locals + 24] ; _w_95^6604
 mov r11, [locals + 32] ; _y_45^6607
 CALL recursively_equal
 cmp rax, FALSE
 je L2985
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2677
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [locals + 0] ; _x1_92^6593
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L2985:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2986:
L2982:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2983:
L2978:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2979:
L2975:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2976:
L2973:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2974:
L2971:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2972:
L2968:
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_815
L2969:
f_2677:
; ((t2122 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rcx, [SELF + 24]
 mov rdx, L2987 ; 
 mov rsi, [SELF + 32]
 mov rdi, [SELF + 16]
 mov r8, [SELF + 40]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_815:
; ((k2115 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_816
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_84^6551 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6553 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L2988
 mov rax, [SELF + 16]
; _x_44^6556 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_86^6554 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6557 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_87^6555 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L2990 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L2991
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2993
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_89^6561 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_90^6562 = r9
 mov r9, rax
; _x1_92^6565 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L2995
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_93^6567 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_94^6568 = local #0
 mov [locals + 0], rax
 mov rax, L2997 ; 
; _y_45^6572 = local #1
 mov [locals + 8], rax
 mov rax, r12
 mov r11, [locals + 8] ; _y_45^6572
 CALL recursively_equal
 cmp rax, FALSE
 je L2998
 sub rsp, 8
 mov rax, [locals + 0] ; _x_94^6568
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3000
 mov rax, [locals + 0] ; _x_94^6568
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6574 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^6574
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3001
L3000:
 mov rax, FALSE
L3001:
 cmp rax, FALSE
 je L3002
 mov rax, [locals + 0] ; _x_94^6568
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_95^6576 = local #1
 mov [locals + 8], rax
 mov rax, L3004 ; 
; _y_45^6579 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 8] ; _w_95^6576
 mov r11, [locals + 16] ; _y_45^6579
 CALL recursively_equal
 cmp rax, FALSE
 je L3005
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2675
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3005:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L3006:
L3002:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L3003:
L2998:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L2999:
L2995:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L2996:
L2993:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L2994:
L2991:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L2992:
L2988:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_816
L2989:
f_2675:
; ((t2119 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rcx, [SELF + 24]
 mov rdx, L3007 ; 
 mov rsi, [SELF + 32]
 mov rdi, [SELF + 16]
 mov r8, [SELF + 40]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_816:
; ((k2116 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_817
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3008 ; 
 mov rsi, [SELF + 24]
 mov rdi, [SELF + 16]
 mov r8, [SELF + 32]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_817:
; ((k2117 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3009 ; 
 mov rsi, L3010 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_792:
; ((k2060 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_793
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_62^6280 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^6490 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3011
 mov rax, [SELF + 48]
; _x_44^6493 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6491 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^6494 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6492 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3013 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3014
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3016
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6498 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6499 = r9
 mov r9, rax
; _id_71^6502 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3018
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^6504 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^6505 = local #0
 mov [locals + 0], rax
; _llist_76^6508 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_74^6505
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3020
 mov rax, [locals + 0] ; _x_74^6505
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6510 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^6510
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3021
L3020:
 mov rax, FALSE
L3021:
 cmp rax, FALSE
 je L3022
 mov rax, [locals + 0] ; _x_74^6505
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^6512 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_77^6512
; _body_79^6514 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_813
 mov rax, [locals + 8] ; _llist_76^6508
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_814
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [locals + 8] ; _llist_76^6508
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [locals + 24] ; _body_79^6514
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rsi, ALLOC
 add ALLOC, 64
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3022:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_793
L3023:
L3018:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_793
L3019:
L3016:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_793
L3017:
L3014:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_793
L3015:
L3011:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_793
L3012:
f_814:
; ((_t1_82^6517 . rdi) (_t1_81^6516 . rsi) (_t1_80^6515 . rdx) (k2109 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2670
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_781
f_2670:
; ((t2111 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2669
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2669:
; ((t2110 . rcx))
 mov rdx, L3024 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_813:
; ((k2108 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_793:
; ((k2061 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_794
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^6281 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^6438 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3025
 mov rax, [SELF + 24]
; _x_44^6441 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6439 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^6442 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6440 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3027 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3028
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3030
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^6446 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6447 = r9
 mov r9, rax
; _id_70^6450 = r10
 mov r10, r8
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_76^6451 = r12
 mov r12, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_809
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], r12
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r12
 mov rax, [rax + 8]
; t2096 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; t2096
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_809
L3030:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_794
L3031:
L3028:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_794
L3029:
L3025:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_794
L3026:
f_809:
; ((_p-ls_79^6454 . rdi) (_p-ls_78^6453 . rsi) (_ls_77^6452 . rdx) (k2098 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3032
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2663
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3032:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3034
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^6471 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3036
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^6474 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_83^6475 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3038
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6480 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3039
L3038:
 mov rax, FALSE
L3039:
 cmp rax, FALSE
 je L3040
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_86^6482 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_809
L3040:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_794
L3041:
L3036:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_794
L3037:
L3034:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_794
L3035:
L3033:
f_2663:
; ((t2099 . rcx))
; _bodies_80^6456 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2664
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2664:
; ((t2100 . rcx))
 mov rax, [SELF + 56]
; _x_45^6460 = rdx
 mov rdx, rax
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2666
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_810
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rdi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_810:
; ((_body_83^6463 . rsi) (_llist_82^6462 . rdx) (k2103 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_812
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_811
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_811:
; ((k2104 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_812:
; ((_t1_86^6466 . rdi) (_t1_85^6465 . rsi) (_t1_84^6464 . rdx) (k2105 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2668
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_781
f_2668:
; ((t2107 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2667
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2667:
; ((t2106 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2666:
; ((t2102 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2101 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L3042 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_794:
; ((k2062 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_795
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6282 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _x_44^6416 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3043
 mov rax, [SELF + 48]
; _x_44^6419 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6417 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _x_44^6420 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6418 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3045 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3046
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3048
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6424 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6425 = r9
 mov r9, rax
; _var_71^6428 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3050
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6430 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3051
L3050:
 mov rax, FALSE
L3051:
 cmp rax, FALSE
 je L3052
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^6432 = r12
 mov r12, rax
; _x_74^6434 = local #0
 mov [locals + 0], r12
 mov rax, [SELF + 32]
; _lst_46^6437 = local #1
 mov [locals + 8], rax
 mov rax, r8
 mov r11, [locals + 8] ; _lst_46^6437
 CALL assoc_eq
; _tmp_75^6435 = local #1
 mov [locals + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2660
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [locals + 0] ; _x_74^6434
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2095 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 8] ; _tmp_75^6435
 cmp rax, FALSE
 je L3054
 sub rsp, 8
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rcx, [locals + 16] ; t2095
 mov rdx, [locals + 8] ; _tmp_75^6435
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_783
L3054:
 mov SELF, [locals + 16] ; t2095
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2660
L3055:
L3052:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_795
L3053:
L3048:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_795
L3049:
L3046:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_795
L3047:
L3043:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_795
L3044:
f_2660:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2661
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
f_2661:
; ((t2094 . rcx))
 mov rdx, L3056 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_795:
; ((k2063 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_796
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6283 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6397 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3057
 mov rax, [SELF + 16]
; _x_44^6400 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6398 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6401 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6399 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3059 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3060
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3062
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6405 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6406 = r9
 mov r9, rax
; _var_71^6409 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3064
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6411 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3065
L3064:
 mov rax, FALSE
L3065:
 cmp rax, FALSE
 je L3066
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^6413 = r12
 mov r12, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2659
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r12
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_786
L3066:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_796
L3067:
L3062:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_796
L3063:
L3060:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_796
L3061:
L3057:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_796
L3058:
f_2659:
; ((t2092 . rcx))
 mov rdx, L3068 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_796:
; ((k2064 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_797
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6284 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^6385 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3069
 mov rax, [SELF + 40]
; _x_44^6388 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6386 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^6389 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6387 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3071 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3072
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3074
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6393 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3075
L3074:
 mov rax, FALSE
L3075:
 cmp rax, FALSE
 je L3076
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3076:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_797
L3077:
L3072:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_797
L3073:
L3069:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_797
L3070:
f_797:
; ((k2065 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_798
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6285 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6366 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3078
 mov rax, [SELF + 16]
; _x_44^6369 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6367 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6370 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6368 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3080 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3081
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3083
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6374 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6375 = r9
 mov r9, rax
; _name_71^6378 = r10
 mov r10, r8
; _xs_75^6379 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2656
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3083:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_798
L3084:
L3081:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_798
L3082:
L3078:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_798
L3079:
f_2656:
; ((t2088 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3085
 mov rax, [SELF + 16]
; _x_45^6382 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2658
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_808
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3085:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_798
L3086:
f_808:
; ((_x_76^6384 . rdx) (k2091 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_786
f_2658:
; ((t2090 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2089 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L3087 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_798:
; ((k2066 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_799
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6286 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^6339 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3088
 mov rax, [SELF + 40]
; _x_44^6342 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6340 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^6343 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6341 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3090 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3091
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3093
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6347 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6348 = r9
 mov r9, rax
; _name_71^6351 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3095
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^6353 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^6354 = local #0
 mov [locals + 0], rax
; _cnd_76^6357 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_74^6354
; _xs_80^6358 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2652
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 16] ; _xs_80^6358
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _cnd_76^6357
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_74^6354
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3095:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_799
L3096:
L3093:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_799
L3094:
L3091:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_799
L3092:
L3088:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_799
L3089:
f_2652:
; ((t2083 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3097
 mov rax, [SELF + 16]
; _x_45^6361 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^6363 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2655
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_807
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3097:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_799
L3098:
f_807:
; ((_x_81^6365 . rdx) (k2087 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_786
f_2655:
; ((t2086 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2085 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2084 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L3099 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_799:
; ((k2067 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_800
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6287 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6312 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3100
 mov rax, [SELF + 16]
; _x_44^6315 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6313 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6316 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6314 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3102 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3103
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3105
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6320 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6321 = r9
 mov r9, rax
; _t_71^6324 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3107
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^6326 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^6327 = local #0
 mov [locals + 0], rax
; _s_76^6330 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_74^6327
; _xs_80^6331 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2648
 mov [ALLOC + 16], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 16] ; _xs_80^6331
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _s_76^6330
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_74^6327
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3107:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_800
L3108:
L3105:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_800
L3106:
L3103:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_800
L3104:
L3100:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_800
L3101:
f_2648:
; ((t2078 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3109
 mov rax, [SELF + 16]
; _x_45^6334 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^6336 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2651
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_806
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3109:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_800
L3110:
f_806:
; ((_x_81^6338 . rdx) (k2082 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_786
f_2651:
; ((t2081 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2080 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2079 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L3111 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_800:
; ((k2068 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_801
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^6288 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^6293 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3112
 mov rax, [SELF + 40]
; _x_44^6296 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^6294 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^6297 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^6295 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3114 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3115
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3117
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^6301 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^6302 = r9
 mov r9, rax
; _id_71^6305 = r10
 mov r10, r8
; _xs_75^6306 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2645
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3117:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_801
L3118:
L3115:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_801
L3116:
L3112:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_801
L3113:
f_2645:
; ((t2074 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3119
 mov rax, [SELF + 16]
; _x_45^6309 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2647
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_805
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3119:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_801
L3120:
f_805:
; ((_x_76^6311 . rdx) (k2077 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_786
f_2647:
; ((t2076 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2075 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L3121 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_801:
; ((k2069 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_802
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_62^6289 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _xs_66^6291 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2644
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2644:
; ((t2072 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3122
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_804
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3122:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_802
L3123:
f_804:
; ((_x_67^6292 . rdx) (k2073 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_786
f_802:
; ((k2070 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_803
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3124 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_803:
; ((k2071 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3125 ; 
 mov rsi, L3126 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_785:
; ((_e_60^6264 . rsi) (_v_59^6263 . rdx) (k2052 . rcx))
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_61^6265 = rdi
 mov rdi, rax
 mov SELF, rcx
 mov rcx, rdi
 cmp rcx, FALSE
 je L3127
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6269 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L3128
L3127:
 mov rcx, FALSE
L3128:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_784:
; ((_v_59^6255 . rdx) (k2049 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6256 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6261 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_60^6259 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rdi
 mov r15, 1 ; '0
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2643
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___add1] ; add1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2643:
; ((t2050 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, 1 ; '0
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_783:
; ((_v_59^6249 . rdx) (k2047 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6253 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6250 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 SET_T r15
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_781:
; ((_e_60^6247 . rsi) (_vars_59^6246 . rdx) (k2043 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2642
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_782
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_782:
; ((_x_61^6248 . rdx) (k2045 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rsi, FALSE
 mov rdi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2642:
; ((t2044 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_744:
; ((_exp_52^5854 . rdx) (k2163 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2702
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___cp1] ; cp1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2702:
; ((t2164 . rcx))
; _vars_53^5855 = rdx
 mov rdx, rcx
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ccount_54^5856 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_55^5857 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_745
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2743
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, rdi
 mov SELF, [SELF + 8]
 mov rsi, null ; 
 mov rdi, null ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
f_2743:
; ((t2246 . rcx))
; _exp_56^6238 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2744
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L3129 ; 
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov SELF, [____4e_42] ; NB
 mov rdi, L3130 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2744:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_745:
; ((_env_58^5860 . rdi) (_lenv_57^5859 . rsi) (_x_56^5858 . rdx) (k2166 . rcx))
; _v_59^5861 = r8
 mov r8, rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_746
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5862 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3131
 mov rax, rdx
 mov r11, rdi
 CALL member_eq
 cmp rax, FALSE
 je L3133
 mov rax, [SELF + 24]
; _lst_46^6203 = r10
 mov r10, rax
 mov rax, rdx
 mov r11, r10
 CALL assoc_eq
 jmp L3134
L3133:
 mov rax, FALSE
L3134:
; _tmp_62^6199 = r10
 mov r10, rax
 mov rax, r10
 cmp rax, FALSE
 je L3135
; _v_64^6205 = r12
 mov r12, r10
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_777
 mov [ALLOC + 16], r12
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
; _failure_65^6206 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3137
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6230 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov rax, [locals + 8] ; _x_68^6230
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3139
 mov rax, [locals + 8] ; _x_68^6230
; _var_72^6234 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 8] ; _x_68^6230
 mov r11, rsi
 CALL member_eq
 cmp rax, FALSE
 je L3141
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2742
 mov [ALLOC + 16], rcx
 mov rax, [locals + 16] ; _var_72^6234
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 32]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3141:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3142:
L3139:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; _failure_65^6206
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_777
L3140:
L3137:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; _failure_65^6206
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_777
L3138:
L3135:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3136:
L3131:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_746
L3132:
f_2742:
; ((t2244 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_777:
; ((k2237 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_778
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_65^6207 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6209 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3143
 mov rax, [SELF + 16]
; _x_44^6212 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [SELF + 16]
; _x_44^6213 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^6211 = rsi
 mov rsi, rax
; _y_71^6214 = rdi
 mov rdi, rsi
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3145
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^6216 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^6217 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L3147 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3148
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3150
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6223 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3151
L3150:
 mov rax, FALSE
L3151:
 cmp rax, FALSE
 je L3152
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2740
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3152:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_778
L3153:
L3148:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_778
L3149:
L3145:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_778
L3146:
L3143:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_778
L3144:
f_2740:
; ((t2241 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_778:
; ((k2238 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_779
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_779:
; ((k2239 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3154 ; 
 mov rsi, L3155 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_746:
; ((k2167 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_747
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5863 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6186 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3156
 mov rax, [SELF + 16]
; _x_44^6189 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^6187 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6190 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^6188 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3158 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3159
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3161
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6194 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3162
L3161:
 mov rax, FALSE
L3162:
 cmp rax, FALSE
 je L3163
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3163:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_747
L3164:
L3159:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_747
L3160:
L3156:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_747
L3157:
f_747:
; ((k2168 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_748
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5864 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^6129 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3165
 mov rax, [SELF + 56]
; _x_44^6132 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^6130 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^6133 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^6131 = rdi
 mov rdi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_773
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
; _sk2_64^6134 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_776
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_65^6181 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L3167 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3168
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_773
L3168:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_776
L3169:
L3165:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_748
L3166:
f_776:
; ((k2236 . rcx))
 mov rax, [SELF + 32]
; _x_44^6182 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L3170 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3171
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_773
L3171:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_748
L3172:
f_773:
; ((k2223 . rcx))
 mov rax, [SELF + 56]
; _x_44^6135 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3173
 mov rax, [SELF + 56]
; _x_44^6138 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^6136 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^6139 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^6137 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_72^6140 = rdi
 mov rdi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_774
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t2224 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_774
L3173:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_748
L3174:
f_774:
; ((_p-ls_75^6143 . rdi) (_p-ls_74^6142 . rsi) (_ls_73^6141 . rdx) (k2226 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3175
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2732
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3175:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3177
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^6162 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3179
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^6165 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^6166 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3181
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6171 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3182
L3181:
 mov rax, FALSE
L3182:
 cmp rax, FALSE
 je L3183
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_82^6173 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_774
L3183:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_748
L3184:
L3179:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_748
L3180:
L3177:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_748
L3178:
L3176:
f_2732:
; ((t2227 . rcx))
; _vals_76^6145 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2733
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 72]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2733:
; ((t2228 . rcx))
; _vars_77^6146 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^6147 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3185
 mov rax, [SELF + 16]
; _x_44^6149 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6148 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3186
L3185:
 mov rax, FALSE
L3186:
 cmp rax, FALSE
 je L3187
 mov rax, [SELF + 16]
; _x_44^6151 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^6150 = rsi
 mov rsi, rax
; _body_80^6152 = rdi
 mov rdi, rsi
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2734
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rsi, [SELF + 48]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3187:
 sub rsp, 16
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_748
L3188:
f_2734:
; ((t2229 . rcx))
; _env2_81^6153 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2735
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov rdx, [SELF + 72]
 mov rsi, [SELF + 24]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2735:
; ((t2230 . rcx))
; _lenv2_82^6154 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_775
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2736
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 80]
 mov SELF, [___map] ; map
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2736:
; ((t2231 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2737
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
f_2737:
; ((t2232 . rcx))
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_44^6155 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_775:
; ((_val_84^6157 . rsi) (_var_83^6156 . rdx) (k2233 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2738
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
; t2235 = rdi
 mov rdi, rax
 mov rax, [SELF + 16]
; _x_44^6160 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^6159 = r8
 mov r8, rax
 mov rax, L3189 ; 
 mov r11, r8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3190
 sub rsp, 40
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov [rsp + 16], rsi
 mov [rsp + 24], rdi
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
L3190:
 sub rsp, 40
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rsi
 mov [rsp + 24], rdi
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
L3191:
f_2738:
; ((t2234 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_748:
; ((k2169 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_749
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5865 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6118 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3192
 mov rax, [SELF + 16]
; _x_44^6121 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^6119 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6122 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^6120 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3194 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3195
; _xs_68^6125 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2729
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r8
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3195:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_749
L3196:
L3192:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_749
L3193:
f_2729:
; ((t2220 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3197
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2730
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_772
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3197:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_749
L3198:
f_772:
; ((_x_69^6128 . rdx) (k2222 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_745
f_2730:
; ((t2221 . rcx))
 sub rsp, 16
 mov rax, L3199 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_749:
; ((k2170 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_750
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5866 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^6086 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3200
 mov rax, [SELF + 56]
; _x_44^6089 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^6087 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^6090 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^6088 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3202 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3203
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3205
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^6094 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^6095 = r9
 mov r9, rax
; _id_69^6098 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3207
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^6100 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^6101 = local #0
 mov [locals + 0], rax
; _llist_74^6104 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, [locals + 0] ; _x_72^6101
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3209
 mov rax, [locals + 0] ; _x_72^6101
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6106 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_44^6106
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3210
L3209:
 mov rax, FALSE
L3210:
 cmp rax, FALSE
 je L3211
 mov rax, [locals + 0] ; _x_72^6101
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^6108 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _w_75^6108
; _body_77^6110 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_770
 mov rax, [locals + 8] ; _llist_74^6104
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_771
 mov [ALLOC + 16], r10
 mov rax, [locals + 8] ; _llist_74^6104
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [locals + 24] ; _body_77^6110
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rsi, ALLOC
 add ALLOC, 56
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3211:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_750
L3212:
L3207:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_750
L3208:
L3205:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_750
L3206:
L3203:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_750
L3204:
L3200:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_750
L3201:
f_771:
; ((_t1_80^6113 . rdi) (_t1_79^6112 . rsi) (_t1_78^6111 . rdx) (k2217 . rcx))
; _vars_81^6114 = r8
 mov r8, rdx
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2727
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rsi, [SELF + 48]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2727:
; ((t2218 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2728
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
f_2728:
; ((t2219 . rcx))
 mov rdx, L3213 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_770:
; ((k2216 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_750:
; ((k2171 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_751
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5867 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6033 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3214
 mov rax, [SELF + 16]
; _x_44^6036 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^6034 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6037 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^6035 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3216 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3217
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3219
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^6041 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^6042 = r9
 mov r9, rax
; _id_68^6045 = r10
 mov r10, r8
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_74^6046 = r12
 mov r12, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_766
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], rdx
 mov [ALLOC + 48], r12
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r12
 mov rax, [rax + 8]
; t2204 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; t2204
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_766
L3219:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_751
L3220:
L3217:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_751
L3218:
L3214:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_751
L3215:
f_766:
; ((_p-ls_77^6049 . rdi) (_p-ls_76^6048 . rsi) (_ls_75^6047 . rdx) (k2206 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3221
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2721
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3221:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3223
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^6067 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3225
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_80^6070 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_81^6071 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3227
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6076 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3228
L3227:
 mov rax, FALSE
L3228:
 cmp rax, FALSE
 je L3229
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_84^6078 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_766
L3229:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_751
L3230:
L3225:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_751
L3226:
L3223:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_751
L3224:
L3222:
f_2721:
; ((t2207 . rcx))
; _bodies_78^6051 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2722
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 48]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2722:
; ((t2208 . rcx))
 mov rax, [SELF + 48]
; _x_45^6055 = rdx
 mov rdx, rax
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2724
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_767
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rdi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_767:
; ((_body_81^6058 . rsi) (_llist_80^6057 . rdx) (k2211 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_769
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_768
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_768:
; ((k2212 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_769:
; ((_t1_84^6061 . rdi) (_t1_83^6060 . rsi) (_t1_82^6059 . rdx) (k2213 . rcx))
; _vars_85^6062 = r8
 mov r8, rdx
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2725
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r8
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rsi, [SELF + 40]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2725:
; ((t2214 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2726
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
f_2726:
; ((t2215 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2724:
; ((t2210 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2209 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L3231 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_751:
; ((k2172 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_752
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5868 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^6022 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3232
 mov rax, [SELF + 56]
; _x_44^6025 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^6023 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^6026 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^6024 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3234 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3235
; _xs_68^6029 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2718
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r8
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3235:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_752
L3236:
L3232:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_752
L3233:
f_2718:
; ((t2201 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3237
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2719
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_765
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3237:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_752
L3238:
f_765:
; ((_x_69^6032 . rdx) (k2203 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_745
f_2719:
; ((t2202 . rcx))
 sub rsp, 16
 mov rax, L3239 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_752:
; ((k2173 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_753
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5869 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^6003 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3240
 mov rax, [SELF + 16]
; _x_44^6006 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^6004 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^6007 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^6005 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3242 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3243
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3245
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^6011 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^6012 = r9
 mov r9, rax
; _var_69^6015 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3247
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^6017 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3248
L3247:
 mov rax, FALSE
L3248:
 cmp rax, FALSE
 je L3249
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^6019 = r12
 mov r12, rax
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2717
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, r12
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
L3249:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_753
L3250:
L3245:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_753
L3246:
L3243:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_753
L3244:
L3240:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_753
L3241:
f_2717:
; ((t2200 . rcx))
 mov rdx, L3251 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_753:
; ((k2174 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_754
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5870 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^5984 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3252
 mov rax, [SELF + 56]
; _x_44^5987 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5985 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^5988 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5986 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3254 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3255
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3257
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5992 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5993 = r9
 mov r9, rax
; _var_69^5996 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3259
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5998 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3260
L3259:
 mov rax, FALSE
L3260:
 cmp rax, FALSE
 je L3261
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^6000 = r12
 mov r12, rax
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2716
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, r12
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_745
L3261:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_754
L3262:
L3257:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_754
L3258:
L3255:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_754
L3256:
L3252:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_754
L3253:
f_2716:
; ((t2199 . rcx))
 mov rdx, L3263 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_754:
; ((k2175 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_755
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5871 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5972 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3264
 mov rax, [SELF + 16]
; _x_44^5975 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5973 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5976 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5974 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3266 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3267
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3269
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5980 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3270
L3269:
 mov rax, FALSE
L3270:
 cmp rax, FALSE
 je L3271
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3271:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_755
L3272:
L3267:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_755
L3268:
L3264:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_755
L3265:
f_755:
; ((k2176 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_756
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5872 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^5953 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3273
 mov rax, [SELF + 56]
; _x_44^5956 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5954 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^5957 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5955 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3275 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3276
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3278
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5961 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5962 = r9
 mov r9, rax
; _n_69^5965 = r10
 mov r10, r8
; _xs_73^5966 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2713
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3278:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_756
L3279:
L3276:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_756
L3277:
L3273:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_756
L3274:
f_2713:
; ((t2195 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3280
 mov rax, [SELF + 16]
; _x_45^5969 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2715
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_764
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3280:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_756
L3281:
f_764:
; ((_x_74^5971 . rdx) (k2198 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_745
f_2715:
; ((t2197 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2196 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L3282 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_756:
; ((k2177 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_757
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5873 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5926 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3283
 mov rax, [SELF + 16]
; _x_44^5929 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5927 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5930 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5928 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3285 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3286
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3288
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5934 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5935 = r9
 mov r9, rax
; _n_69^5938 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3290
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^5940 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^5941 = local #0
 mov [locals + 0], rax
; _c_74^5944 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_72^5941
; _xs_78^5945 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2709
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [locals + 16] ; _xs_78^5945
 mov [ALLOC + 56], rax
 mov rax, [locals + 8] ; _c_74^5944
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_72^5941
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3290:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_757
L3291:
L3288:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_757
L3289:
L3286:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_757
L3287:
L3283:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_757
L3284:
f_2709:
; ((t2190 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3292
 mov rax, [SELF + 16]
; _x_45^5948 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _x_45^5950 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2712
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_763
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3292:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_757
L3293:
f_763:
; ((_x_79^5952 . rdx) (k2194 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_745
f_2712:
; ((t2193 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2192 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2191 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L3294 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_757:
; ((k2178 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_758
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_60^5874 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^5899 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3295
 mov rax, [SELF + 56]
; _x_44^5902 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5900 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _x_44^5903 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5901 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3297 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3298
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3300
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5907 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5908 = r9
 mov r9, rax
; _t_69^5911 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3302
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^5913 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_72^5914 = local #0
 mov [locals + 0], rax
; _s_74^5917 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_72^5914
; _xs_78^5918 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2705
 mov [ALLOC + 16], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [locals + 16] ; _xs_78^5918
 mov [ALLOC + 56], rax
 mov rax, [locals + 8] ; _s_74^5917
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_72^5914
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3302:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_758
L3303:
L3300:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_758
L3301:
L3298:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_758
L3299:
L3295:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_758
L3296:
f_2705:
; ((t2185 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3304
 mov rax, [SELF + 16]
; _x_45^5921 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _x_45^5923 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2708
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_762
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3304:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_758
L3305:
f_762:
; ((_x_79^5925 . rdx) (k2189 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_745
f_2708:
; ((t2188 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2187 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2186 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L3306 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_758:
; ((k2179 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_759
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_60^5875 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5877 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3307
 mov rax, [SELF + 16]
; _x_44^5880 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5878 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5881 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5879 = rdi
 mov rdi, rax
; _op_65^5882 = r8
 mov r8, rsi
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2703
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3307:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_759
L3308:
f_2703:
; ((t2182 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3309
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2704
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_761
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 64]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3309:
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_759
L3310:
f_761:
; ((_x_70^5885 . rdx) (k2184 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_745
f_2704:
; ((t2183 . rcx))
 mov rax, [SELF + 32]
; _x_44^5887 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3311
 mov rax, [SELF + 32]
; _x_45^5888 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _lst_46^5889 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
 jmp L3312
L3311:
 mov rax, FALSE
L3312:
; _tmp_71^5886 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rdx
 cmp rax, FALSE
 je L3313
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5891 = rsi
 mov rsi, rax
 mov rax, rsi
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^5893 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L3315
 mov rax, rdi
 jmp L3316
L3315:
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L3316:
 cmp rax, FALSE
 je L3317
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^5896 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^5895 = rsi
 mov rsi, rax
 mov rax, L3319 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L3318
L3317:
 mov rax, rcx
L3318:
 jmp L3314
L3313:
 mov rax, rcx
L3314:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_759:
; ((k2180 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_760
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3320 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_760:
; ((k2181 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3321 ; 
 mov rsi, L3322 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_694:
; ((_exp_52^5357 . rdx) (k2248 . rcx))
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _vars_53^5358 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _atomic?_54^5359 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _assign_55^5360 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_56^5361 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _follow_57^5362 = r10
 mov r10, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_695
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_696
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_703
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r9
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_738
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], rsi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2767
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, r9
 mov SELF, [SELF + 8]
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_703
f_2767:
; ()
 mov rcx, [SELF + 24]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_739
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov SELF, [___filter_2dmap] ; filter-map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_739:
; ((_a_58^5803 . rdx) (k2328 . rcx))
; _v_59^5804 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_740
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
; _failure_60^5805 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3323
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^5847 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^5848 = r9
 mov r9, rax
 mov rax, r9
 mov r11, FALSE
 CALL recursively_equal
 cmp rax, FALSE
 je L3325
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3325:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_740
L3326:
L3323:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_740
L3324:
f_740:
; ((k2329 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_741
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_60^5806 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5838 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3327
 mov rax, [SELF + 16]
; _x_44^5841 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5839 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5842 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5840 = rdi
 mov rdi, rax
 mov rax, L3329 ; 
; _y_45^5845 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 CALL recursively_equal
 cmp rax, FALSE
 je L3330
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3330:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_741
L3331:
L3327:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_741
L3328:
f_741:
; ((k2330 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_742
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_60^5807 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5820 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3332
 mov rax, [SELF + 32]
; _x_44^5823 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^5821 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5824 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^5822 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3334
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5827 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5828 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L3336 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3337
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3339
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5834 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3340
L3339:
 mov rax, FALSE
L3340:
 cmp rax, FALSE
 je L3341
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3341:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_742
L3342:
L3337:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_742
L3338:
L3334:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_742
L3335:
L3332:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_742
L3333:
f_742:
; ((k2331 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_743
 mov rax, ALLOC
 add ALLOC, 16
; _failure_60^5808 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5809 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3343
 mov rax, [SELF + 16]
; _x_44^5812 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^5810 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5813 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^5811 = rdi
 mov rdi, rax
; _var_64^5814 = r8
 mov r8, rsi
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2768
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_738
L3343:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_743
L3344:
f_2768:
; ((t2333 . rcx))
 sub rsp, 16
 mov rax, rcx
 cmp rax, FALSE
 je L3345
 mov rax, [SELF + 16]
; _x_45^5818 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L3346
L3345:
 mov rax, FALSE
L3346:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_743:
; ((k2332 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3347 ; 
 mov rsi, L3348 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_738:
; ((_var_58^5796 . rdx) (k2326 . rcx))
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _lst_46^5799 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_59^5797 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L3349
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 cmp rax, FALSE
 je L3351
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_738
L3351:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L3352:
L3349:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L3350:
f_703:
; ((_env_59^5458 . rsi) (_x_58^5457 . rdx) (k2266 . rcx))
; _v_60^5459 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_704
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5460 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3353
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3353:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_704
L3354:
f_704:
; ((k2267 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_705
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5461 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5783 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3355
 mov rax, [SELF + 32]
; _x_44^5786 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5784 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5787 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5785 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3357 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3358
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3360
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5791 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3361
L3360:
 mov rax, FALSE
L3361:
 cmp rax, FALSE
 je L3362
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3362:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_705
L3363:
L3358:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_705
L3359:
L3355:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_705
L3356:
f_705:
; ((k2268 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_706
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5462 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5727 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3364
 mov rax, [SELF + 40]
; _x_44^5730 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5728 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5731 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5729 = rdi
 mov rdi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_734
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
; _sk2_65^5732 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_737
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_66^5778 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L3366 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3367
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_734
L3367:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_737
L3368:
L3364:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_706
L3365:
f_737:
; ((k2324 . rcx))
 mov rax, [SELF + 32]
; _x_44^5779 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L3369 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3370
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_734
L3370:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_706
L3371:
f_734:
; ((k2314 . rcx))
 mov rax, [SELF + 56]
; _x_44^5733 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3372
 mov rax, [SELF + 56]
; _x_44^5736 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5734 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_44^5737 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5735 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_73^5738 = rdi
 mov rdi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_735
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t2315 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_735
L3372:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_706
L3373:
f_735:
; ((_p-ls_76^5741 . rdi) (_p-ls_75^5740 . rsi) (_ls_74^5739 . rdx) (k2317 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3374
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2762
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov [ALLOC + 72], rdi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3374:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3376
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^5759 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3378
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5762 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5763 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3380
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5768 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3381
L3380:
 mov rax, FALSE
L3381:
 cmp rax, FALSE
 je L3382
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_83^5770 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_735
L3382:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_706
L3383:
L3378:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_706
L3379:
L3376:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_706
L3377:
L3375:
f_2762:
; ((t2318 . rcx))
; _vals_77^5743 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2763
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 72]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2763:
; ((t2319 . rcx))
; _vrs_78^5744 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^5745 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3384
 mov rax, [SELF + 16]
; _x_44^5747 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5746 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3385
L3384:
 mov rax, FALSE
L3385:
 cmp rax, FALSE
 je L3386
 mov rax, [SELF + 16]
; _x_44^5749 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5748 = rsi
 mov rsi, rax
; _body_81^5750 = rdi
 mov rdi, rsi
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2764
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rsi, [SELF + 40]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3386:
 sub rsp, 16
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_706
L3387:
f_2764:
; ((t2320 . rcx))
; _env2_82^5751 = rdx
 mov rdx, rcx
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_44^5755 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^5754 = rsi
 mov rsi, rax
 mov rax, L3388 ; 
 mov r11, rsi
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 mov [rsp + 0], rax
 mov r11, rcx
 mov r15, [SELF + 24]
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; _eenv_83^5752 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2765
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_736
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rdx, ALLOC
 add ALLOC, 48
 mov rsi, [SELF + 72]
 mov rdi, [SELF + 32]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_736:
; ((_val_85^5757 . rsi) (_var_84^5756 . rdx) (k2322 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2766
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_703
f_2766:
; ()
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_696
f_2765:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_706:
; ((k2269 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_707
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5463 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5718 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3389
 mov rax, [SELF + 32]
; _x_44^5721 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5719 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5722 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5720 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3391 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3392
; _xs_69^5725 = r8
 mov r8, rdi
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2760
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3392:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_707
L3393:
L3389:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_707
L3390:
f_2760:
; ((t2312 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3394
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_733
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3394:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_707
L3395:
f_733:
; ((_x_70^5726 . rdx) (k2313 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_707:
; ((k2270 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_708
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5464 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5686 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3396
 mov rax, [SELF + 40]
; _x_44^5689 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5687 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5690 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5688 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3398 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3399
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3401
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^5694 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5695 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3403
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^5700 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^5701 = r12
 mov r12, rax
; _llist_75^5704 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3405
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5706 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^5706
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3406
L3405:
 mov rax, FALSE
L3406:
 cmp rax, FALSE
 je L3407
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^5708 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _w_76^5708
; _body_78^5710 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_731
 mov rax, [locals + 0] ; _llist_75^5704
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_732
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _body_78^5710
 mov [ALLOC + 32], rax
 mov rsi, ALLOC
 add ALLOC, 40
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3407:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_708
L3408:
L3403:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_708
L3404:
L3401:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_708
L3402:
L3399:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_708
L3400:
L3396:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_708
L3397:
f_732:
; ((_t1_81^5713 . rdi) (_t1_80^5712 . rsi) (_t1_79^5711 . rdx) (k2310 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2759
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2759:
; ((t2311 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_731:
; ((k2309 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_708:
; ((k2271 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_709
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5465 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5637 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3409
 mov rax, [SELF + 32]
; _x_44^5640 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5638 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5641 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5639 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3411 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3412
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3414
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5645 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_67^5646 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_75^5650 = r10
 mov r10, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_727
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], r10
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2300 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_727
L3414:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_709
L3415:
L3412:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_709
L3413:
L3409:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_709
L3410:
f_727:
; ((_p-ls_78^5653 . rdi) (_p-ls_77^5652 . rsi) (_ls_76^5651 . rdx) (k2302 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3416
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2756
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3416:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3418
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5667 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3420
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^5670 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_82^5671 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3422
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5676 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3423
L3422:
 mov rax, FALSE
L3423:
 cmp rax, FALSE
 je L3424
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^5678 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_727
L3424:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_709
L3425:
L3420:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_709
L3421:
L3418:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_709
L3419:
L3417:
f_2756:
; ((t2303 . rcx))
; _bodies_79^5655 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2757
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2757:
; ((t2304 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_728
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, rcx
 mov rcx, [SELF + 40]
 mov rdi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_728:
; ((_body_82^5658 . rsi) (_llist_81^5657 . rdx) (k2305 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_730
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_729
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_729:
; ((k2306 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_730:
; ((_t1_85^5661 . rdi) (_t1_84^5660 . rsi) (_t1_83^5659 . rdx) (k2307 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2758
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2758:
; ((t2308 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_709:
; ((k2272 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_710
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_61^5466 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5612 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3426
 mov rax, [SELF + 40]
; _x_44^5615 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5613 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5616 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5614 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3428 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3429
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3431
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^5620 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5621 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3433
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^5626 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^5627 = r12
 mov r12, rax
; _y_75^5630 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3435
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5632 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^5632
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3436
L3435:
 mov rax, FALSE
L3436:
 cmp rax, FALSE
 je L3437
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^5634 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _w_76^5634
; _z_78^5636 = local #2
 mov [locals + 16], rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2753
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [locals + 16] ; _z_78^5636
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [locals + 0] ; _y_75^5630
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_703
L3437:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_710
L3438:
L3433:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_710
L3434:
L3431:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_710
L3432:
L3429:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_710
L3430:
L3426:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_710
L3427:
f_2753:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2754
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_703
f_2754:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_710:
; ((k2273 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_711
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_61^5467 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5565 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3439
 mov rax, [SELF + 32]
; _x_44^5568 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5566 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5569 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5567 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3441 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3442
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3444
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^5573 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5574 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3446
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5579 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3447
L3446:
 mov rax, FALSE
L3447:
 cmp rax, FALSE
 je L3448
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^5581 = r10
 mov r10, rax
; _x_73^5583 = r12
 mov r12, r10
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _lst_46^5586 = local #0
 mov [locals + 0], rax
 mov rax, r8
 mov r11, [locals + 0] ; _lst_46^5586
 CALL assoc_eq
; _tmp_74^5584 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2750
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov rax, ALLOC
 add ALLOC, 48
; t2291 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 0] ; _tmp_74^5584
 cmp rax, FALSE
 je L3450
 mov rax, [locals + 0] ; _tmp_74^5584
; _v_76^5588 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_723
 mov rax, [locals + 16] ; _v_76^5588
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_77^5589 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov rax, [locals + 0] ; _tmp_74^5584
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3452
 mov rax, [locals + 0] ; _tmp_74^5584
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [locals + 0] ; _tmp_74^5584
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5602 = local #4
 mov [locals + 32], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_726
 mov rax, [locals + 16] ; _v_76^5588
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _set-val_82^5605 = local #5
 mov [locals + 40], rax
 mov rax, L3454 ; 
; _y_45^5610 = local #6
 mov [locals + 48], rax
 mov rax, [locals + 32] ; _x_80^5602
 mov r11, [locals + 48] ; _y_45^5610
 CALL recursively_equal
 cmp rax, FALSE
 je L3455
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2752
 mov rax, [locals + 40] ; _set-val_82^5605
 mov [ALLOC + 16], rax
 mov rax, [locals + 8] ; t2291
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, r8
 mov rsi, r10
 mov rdi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_696
L3455:
 mov SELF, [locals + 24] ; _failure_77^5589
 mov rcx, [locals + 8] ; t2291
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_723
L3456:
L3452:
 mov SELF, [locals + 24] ; _failure_77^5589
 mov rcx, [locals + 8] ; t2291
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_723
L3453:
L3450:
 mov SELF, [locals + 8] ; t2291
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2750
L3451:
L3448:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_711
L3449:
L3444:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_711
L3445:
L3442:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_711
L3443:
L3439:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_711
L3440:
f_2752:
; ((t2297 . rcx))
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t2296 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L3457
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_726
L3457:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_2750
L3458:
f_726:
; ((_x_82^5606 . rdx) (k2295 . rcx))
 mov rax, [SELF + 16]
; _x_44^5607 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 3 ; '1
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_723:
; ((k2292 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_724
 mov rax, ALLOC
 add ALLOC, 16
; _failure_77^5590 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5591 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3459
 mov rax, [SELF + 16]
; _x_44^5594 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, [SELF + 16]
; _x_44^5595 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_725
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _set-val_82^5596 = rsi
 mov rsi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_725
L3459:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_724
L3460:
f_725:
; ((_x_82^5597 . rdx) (k2294 . rcx))
 mov rax, [SELF + 16]
; _x_44^5598 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 3 ; '1
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_724:
; ((k2293 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3461 ; 
 mov rsi, L3462 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2750:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_711:
; ((k2274 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_712
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_61^5468 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5547 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3463
 mov rax, [SELF + 40]
; _x_44^5550 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5548 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5551 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5549 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3465 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3466
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3468
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5556 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3470
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5560 = r9
 mov r9, rax
 mov rax, r9
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3471
L3470:
 mov rax, FALSE
L3471:
 cmp rax, FALSE
 je L3472
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^5562 = r9
 mov r9, rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r9
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_703
L3472:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_712
L3473:
L3468:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_712
L3469:
L3466:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_712
L3467:
L3463:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_712
L3464:
f_712:
; ((k2275 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_713
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_61^5469 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5535 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3474
 mov rax, [SELF + 16]
; _x_44^5538 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5536 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5539 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5537 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3476 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3477
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3479
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5543 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3480
L3479:
 mov rax, FALSE
L3480:
 cmp rax, FALSE
 je L3481
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3481:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_713
L3482:
L3477:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_713
L3478:
L3474:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_713
L3475:
f_713:
; ((k2276 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_714
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_61^5470 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5521 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3483
 mov rax, [SELF + 40]
; _x_44^5524 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5522 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5525 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5523 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3485 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3486
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3488
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5530 = r8
 mov r8, rax
; _xs_72^5533 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2749
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3488:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_714
L3489:
L3486:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_714
L3487:
L3483:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_714
L3484:
f_2749:
; ((t2288 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3490
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_722
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3490:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_714
L3491:
f_722:
; ((_x_73^5534 . rdx) (k2289 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_714:
; ((k2277 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_715
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_61^5471 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5502 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3492
 mov rax, [SELF + 16]
; _x_44^5505 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5503 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5506 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5504 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3494 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3495
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3497
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5511 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3499
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^5516 = r9
 mov r9, rax
; _xs_75^5519 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2748
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r10
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3499:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_715
L3500:
L3497:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_715
L3498:
L3495:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_715
L3496:
L3492:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_715
L3493:
f_2748:
; ((t2286 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3501
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_721
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3501:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_715
L3502:
f_721:
; ((_x_76^5520 . rdx) (k2287 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_715:
; ((k2278 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_716
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_61^5472 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5483 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3503
 mov rax, [SELF + 40]
; _x_44^5486 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5484 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5487 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5485 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3505 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3506
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3508
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5492 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3510
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^5497 = r9
 mov r9, rax
; _xs_75^5500 = r10
 mov r10, r9
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2747
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r10
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3510:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_716
L3511:
L3508:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_716
L3509:
L3506:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_716
L3507:
L3503:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_716
L3504:
f_2747:
; ((t2284 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3512
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_720
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3512:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_716
L3513:
f_720:
; ((_x_76^5501 . rdx) (k2285 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_716:
; ((k2279 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_717
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_61^5473 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5475 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3514
 mov rax, [SELF + 16]
; _x_44^5478 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5476 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5479 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5477 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2746
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3514:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_717
L3515:
f_2746:
; ((t2282 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3516
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_719
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3516:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_717
L3517:
f_719:
; ((_x_71^5482 . rdx) (k2283 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_703
f_717:
; ((k2280 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_718
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3518 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_718:
; ((k2281 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3519 ; 
 mov rsi, L3520 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_696:
; ((_env_60^5376 . rdi) (_val_59^5375 . rsi) (_var_58^5374 . rdx) (k2252 . rcx))
; _v_61^5377 = r8
 mov r8, rsi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_697
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
; _failure_62^5378 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3521
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^5442 = r10
 mov r10, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^5443 = r12
 mov r12, rax
 mov rax, r10
 mov r11, L3523 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3524
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3526
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5449 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^5449
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3527
L3526:
 mov rax, FALSE
L3527:
 cmp rax, FALSE
 je L3528
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_66^5451 = local #0
 mov [locals + 0], rax
 sub rsp, 16
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2745
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], r9
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, [locals + 0] ; _w_66^5451
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_695
L3528:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_697
L3529:
L3524:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_697
L3525:
L3521:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_697
L3522:
f_2745:
; ((t2263 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3530
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^5455 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^5456 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^5453 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^5454 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3530:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_697
L3531:
f_697:
; ((k2253 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_698
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_62^5379 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5434 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3532
 mov rax, [SELF + 48]
; _x_45^5435 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _lst_46^5436 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL member_eq
 cmp rax, FALSE
 je L3534
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^5439 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
; _y_46^5440 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^5437 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^5438 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3534:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3535:
L3532:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_698
L3533:
f_698:
; ((k2254 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_699
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_62^5380 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^5428 = rsi
 mov rsi, rax
 mov rax, L3536 ; 
; _y_45^5429 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL recursively_equal
 cmp rax, FALSE
 je L3537
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^5432 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _y_46^5433 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^5430 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _y_46^5431 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3537:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_699
L3538:
f_699:
; ((k2255 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_700
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_62^5381 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5401 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3539
 mov rax, [SELF + 32]
; _x_44^5404 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^5402 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5405 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^5403 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3541 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3542
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3544
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^5409 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^5410 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3546
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^5416 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3548
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5420 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3549
L3548:
 mov rax, FALSE
L3549:
 cmp rax, FALSE
 je L3550
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^5426 = r12
 mov r12, rax
 mov rax, r12
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^5424 = r12
 mov r12, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^5425 = local #0
 mov [locals + 0], rax
 mov rax, r12
 mov r11, [locals + 0] ; _y_46^5425
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3550:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_700
L3551:
L3546:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_700
L3547:
L3544:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_700
L3545:
L3542:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_700
L3543:
L3539:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_700
L3540:
f_700:
; ((k2256 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_701
 mov rax, ALLOC
 add ALLOC, 16
; _failure_62^5382 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5384 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3552
 mov rax, [SELF + 16]
; _x_44^5387 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^5385 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5388 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^5386 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3554 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3555
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3557
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^5392 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^5399 = r9
 mov r9, rax
 mov rax, r9
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^5397 = r9
 mov r9, rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
; _y_46^5398 = r10
 mov r10, rax
 mov rax, r9
 mov r11, r10
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3557:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_701
L3558:
L3555:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_701
L3556:
L3552:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_701
L3553:
f_701:
; ((k2257 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_702
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_702:
; ((k2258 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3559 ; 
 mov rsi, L3560 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_695:
; ((_x_58^5363 . rdx) (k2250 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_59^5364 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rcx, rsi
 cmp rcx, FALSE
 je L3561
 mov rcx, rsi
 jmp L3562
L3561:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_60^5366 = rdi
 mov rdi, rax
 mov rcx, rdi
 cmp rcx, FALSE
 je L3563
 mov rcx, rdi
 jmp L3564
L3563:
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^5370 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L3565
 mov rax, r8
 jmp L3566
L3565:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L3566:
; _x_61^5368 = r8
 mov r8, rax
 mov rcx, r8
 cmp rcx, FALSE
 je L3567
 mov rcx, r8
 jmp L3568
L3567:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_62^5371 = r9
 mov r9, rax
 mov rcx, r9
 cmp rcx, FALSE
 je L3569
 mov rcx, r9
 jmp L3570
L3569:
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
L3570:
L3568:
L3564:
L3562:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_679:
; ((_exp_52^5230 . rdx) (k2334 . rcx))
; _v_53^5231 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_680
 mov rax, ALLOC
 add ALLOC, 16
; _failure_54^5232 = rdi
 mov rdi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_682
 mov rax, ALLOC
 add ALLOC, 16
; _sk2_76^5234 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_683
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5235 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3571
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_682
L3571:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_683
L3572:
f_683:
; ((k2338 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_684
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5236 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5344 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3573
 mov rax, [SELF + 32]
; _x_44^5347 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5345 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5348 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5346 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3575 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3576
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3578
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5352 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3579
L3578:
 mov rax, FALSE
L3579:
 cmp rax, FALSE
 je L3580
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_682
L3580:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_684
L3581:
L3576:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_684
L3577:
L3573:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_684
L3574:
f_684:
; ((k2339 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_685
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5237 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5320 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3582
 mov rax, [SELF + 16]
; _x_44^5323 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5321 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5324 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5322 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3584 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3585
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3587
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_83^5329 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3589
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_84^5333 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_88^5337 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_693
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r10
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2352 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_693
L3589:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_685
L3590:
L3587:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_685
L3588:
L3585:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_685
L3586:
L3582:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_685
L3583:
f_693:
; ((_ls_89^5338 . rdx) (k2354 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3591
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_682
L3591:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3593
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_90^5341 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2773
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___pure_2dexpression_3f] ; pure-expression?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3593:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_685
L3594:
L3592:
f_2773:
; ((t2355 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3595
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^5343 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_693
L3595:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_685
L3596:
f_685:
; ((k2340 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_686
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5238 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5296 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3597
 mov rax, [SELF + 32]
; _x_44^5299 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5297 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5300 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5298 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3599 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3600
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3602
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_84^5305 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3604
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_86^5310 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_89^5313 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_692
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r10
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2348 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_692
L3604:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_686
L3605:
L3602:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_686
L3603:
L3600:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_686
L3601:
L3597:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_686
L3598:
f_692:
; ((_ls_90^5314 . rdx) (k2350 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3606
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_682
L3606:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3608
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_91^5317 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2771
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___pure_2dexpression_3f] ; pure-expression?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3608:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_686
L3609:
L3607:
f_2771:
; ((t2351 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3610
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^5319 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_692
L3610:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_686
L3611:
f_686:
; ((k2341 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_687
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5239 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5294 = rsi
 mov rsi, rax
 mov rax, L3612 ; 
; _y_45^5295 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL recursively_equal
 cmp rax, FALSE
 je L3613
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_682
L3613:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_687
L3614:
f_687:
; ((k2342 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_688
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5240 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5292 = rsi
 mov rsi, rax
 mov rax, L3615 ; 
; _y_45^5293 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL recursively_equal
 cmp rax, FALSE
 je L3616
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_682
L3616:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_688
L3617:
f_688:
; ((k2343 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_689
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5241 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5280 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3618
 mov rax, [SELF + 16]
; _x_44^5283 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5281 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5284 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5282 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3620 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3621
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3623
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5288 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3624
L3623:
 mov rax, FALSE
L3624:
 cmp rax, FALSE
 je L3625
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_682
L3625:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_689
L3626:
L3621:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_689
L3622:
L3618:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_689
L3619:
f_689:
; ((k2344 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_690
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5242 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5268 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3627
 mov rax, [SELF + 32]
; _x_44^5271 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^5269 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5272 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^5270 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3629 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3630
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3632
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5276 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3633
L3632:
 mov rax, FALSE
L3633:
 cmp rax, FALSE
 je L3634
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^5278 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2769
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___pure_2dexpression_3f] ; pure-expression?
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3634:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_690
L3635:
L3630:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_690
L3631:
L3627:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_690
L3628:
f_2769:
; ((t2347 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3636
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_682
L3636:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_690
L3637:
f_690:
; ((k2345 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_691
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_77^5243 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5256 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3638
 mov rax, [SELF + 16]
; _x_44^5259 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5257 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5260 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5258 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3640 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3641
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3643
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5264 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3644
L3643:
 mov rax, FALSE
L3644:
 cmp rax, FALSE
 je L3645
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_682
L3645:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_691
L3646:
L3641:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_691
L3642:
L3638:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_691
L3639:
f_691:
; ((k2346 . rcx))
 mov rax, [SELF + 32]
; _x_44^5244 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3647
 mov rax, [SELF + 32]
; _x_44^5247 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^5245 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5248 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_79^5246 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, L3649 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3650
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3652
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5252 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3653
L3652:
 mov rax, FALSE
L3653:
 cmp rax, FALSE
 je L3654
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_682
L3654:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_680
L3655:
L3650:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_680
L3651:
L3647:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_680
L3648:
f_682:
; ((k2337 . rcx))
 mov SELF, rcx
 SET_T rcx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_680:
; ((k2335 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_681
 mov rax, ALLOC
 add ALLOC, 16
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_681:
; ((k2336 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3656 ; 
 mov rsi, L3657 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_651:
; ((_port_54^4954 . rdi) (_ldump_53^4953 . rsi) (_form_52^4952 . rdx) (k2356 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3658
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L3659
L3658:
 mov rax, [____25standard_2doutput_2dport] ; %standard-output-port
L3659:
; _port_55^4955 = r8
 mov r8, rax
 mov rax, rsi
 cmp rax, FALSE
 je L3660
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2774
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3660:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___pp] ; pp
 mov rsi, r8
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3661:
f_2774:
; ((t2357 . rcx))
 mov [ALLOC + 8], rcx
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ls_56^4959 = rdx
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _prepare_57^4960 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_652
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_58^5097 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_669
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdx
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t2387 = r8
 mov r8, rax
 mov rcx, [SELF + 16]
 mov SELF, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_669
f_669:
; ((k2389 . rcx))
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _x_44^5098 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3662
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L3662:
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2784
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov SELF, [___reverse] ; reverse
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3663:
f_2784:
; ((t2391 . rcx))
 mov rax, [SELF + 48]
 mov r11, null ; 
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_670
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2783
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2783:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_669
f_670:
; ((_expr_60^5100 . rdx) (k2393 . rcx))
; _v_61^5101 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_671
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_62^5102 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3664
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^5205 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^5206 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L3666 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3667
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3669
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^5212 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^5213 = r12
 mov r12, rax
; _id_71^5216 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3671
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^5218 = local #1
 mov [locals + 8], rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^5219 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 8] ; _w_73^5218
; _llist_76^5222 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 16] ; _x_74^5219
; _xs_80^5223 = local #4
 mov [locals + 32], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2801
 mov rax, [locals + 0] ; _id_71^5216
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 32] ; _xs_80^5223
 mov [ALLOC + 48], rax
 mov rax, [locals + 24] ; _llist_76^5222
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 16] ; _x_74^5219
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3671:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_671
L3672:
L3669:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_671
L3670:
L3667:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_671
L3668:
L3664:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_671
L3665:
f_2801:
; ((t2420 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3673
 mov rax, [SELF + 16]
; _x_45^5226 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^5228 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2805
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3673:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_671
L3674:
f_2805:
; ((t2424 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2423 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2422 = rsi
 mov rsi, rax
 mov rax, L3675 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2421 = rdi
 mov rdi, rax
 mov rcx, [SELF + 24]
 mov rdx, rdi
 mov rsi, [SELF + 32]
 mov SELF, [___pp] ; pp
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_671:
; ((k2394 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_672
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_62^5103 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5161 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3676
 mov rax, [SELF + 16]
; _x_44^5164 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^5162 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5165 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^5163 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3678 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3679
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3681
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^5169 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^5170 = r9
 mov r9, rax
; _id_70^5173 = r10
 mov r10, r8
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_74^5174 = r12
 mov r12, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_677
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], r12
 mov [ALLOC + 48], rdx
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r12
 mov rax, [rax + 8]
; t2410 = local #0
 mov [locals + 0], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 0] ; t2410
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_677
L3681:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_672
L3682:
L3679:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_672
L3680:
L3676:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_672
L3677:
f_677:
; ((_p-ls_77^5177 . rdi) (_p-ls_76^5176 . rsi) (_ls_75^5175 . rdx) (k2412 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3683
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2795
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3683:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3685
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_78^5190 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3687
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^5193 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^5194 = r10
 mov r10, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r10
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_677
L3687:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_672
L3688:
L3685:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_672
L3686:
L3684:
f_2795:
; ((t2413 . rcx))
; _bodies_78^5179 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2796
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 48]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2796:
; ((t2414 . rcx))
 mov rax, [SELF + 48]
; _x_45^5183 = rdx
 mov rdx, rax
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2799
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_678
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rdi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_678:
; ((_xs_81^5186 . rsi) (_ll_80^5185 . rdx) (k2418 . rcx))
; _x_45^5187 = rdi
 mov rdi, rdx
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2800
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [___map] ; map
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2800:
; ((t2419 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2799:
; ((t2417 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2416 = rdx
 mov rdx, rax
 mov rax, L3689 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2415 = rsi
 mov rsi, rax
 mov rcx, [SELF + 24]
 mov rdx, rsi
 mov rsi, [SELF + 16]
 mov SELF, [___pp] ; pp
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_672:
; ((k2395 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_673
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_62^5104 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5107 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3690
 mov rax, [SELF + 32]
; _x_44^5110 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^5108 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^5111 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^5109 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3692 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3693
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3695
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^5115 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^5116 = r9
 mov r9, rax
; _id_71^5119 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3697
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^5121 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^5122 = local #0
 mov [locals + 0], rax
; _cap_75^5125 = local #1
 mov [locals + 8], r12
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_81^5126 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_675
 mov rax, [locals + 8] ; _cap_75^5125
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov [ALLOC + 48], rdx
 mov rax, [locals + 16] ; _loop_81^5126
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, [locals + 16] ; _loop_81^5126
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 16] ; _loop_81^5126
 mov rax, [rax + 8]
; t2399 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 24] ; t2399
 mov rdx, [locals + 0] ; _x_73^5122
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_675
L3697:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3698:
L3695:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3696:
L3693:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3694:
L3690:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3691:
f_675:
; ((_p-ls_84^5129 . rdi) (_p-ls_83^5128 . rsi) (_ls_82^5127 . rdx) (k2401 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3699
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2787
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3699:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3701
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^5142 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3703
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_87^5145 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_88^5146 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3705
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5151 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3706
L3705:
 mov rax, FALSE
L3706:
 cmp rax, FALSE
 je L3707
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_91^5153 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_675
L3707:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3708:
L3703:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3704:
L3701:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_673
L3702:
L3700:
f_2787:
; ((t2402 . rcx))
; _bodies_85^5131 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2788
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2788:
; ((t2403 . rcx))
 mov rax, [SELF + 56]
; _x_45^5135 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_45^5137 = rsi
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2792
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_676
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rdi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_676:
; ((_bd_88^5140 . rsi) (_ll_87^5139 . rdx) (k2408 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2793
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_652
f_2793:
; ((t2409 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2792:
; ((t2407 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2406 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2405 = rsi
 mov rsi, rax
 mov rax, L3709 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2404 = rdi
 mov rdi, rax
 mov rcx, [SELF + 24]
 mov rdx, rdi
 mov rsi, [SELF + 32]
 mov SELF, [___pp] ; pp
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_673:
; ((k2396 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_674
 mov rax, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 16]
; _form_64^5106 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2785
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_652
f_2785:
; ((t2398 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___pp] ; pp
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_674:
; ((k2397 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3710 ; 
 mov rsi, L3711 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_652:
; ((_x_58^4961 . rdx) (k2359 . rcx))
; _v_59^4962 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_653
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
; _failure_60^4963 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_663
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_69^5073 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_664
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_70^5074 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3712
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_663
L3712:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_664
L3713:
f_664:
; ((k2382 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_665
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_70^5075 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5094 = rsi
 mov rsi, rax
 mov rax, rsi
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^5095 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L3714
 mov rax, rdi
 jmp L3715
L3714:
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L3715:
 cmp rax, FALSE
 je L3716
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_663
L3716:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_665
L3717:
f_665:
; ((k2383 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_666
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_70^5076 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5093 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3718
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_663
L3718:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_666
L3719:
f_666:
; ((k2384 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_667
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_70^5077 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^5092 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3720
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_663
L3720:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_667
L3721:
f_667:
; ((k2385 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_668
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_70^5078 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5080 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3722
 mov rax, [SELF + 16]
; _x_44^5083 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_72^5081 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5084 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_73^5082 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3724 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3725
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3727
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5088 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3728
L3727:
 mov rax, FALSE
L3728:
 cmp rax, FALSE
 je L3729
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_663
L3729:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_668
L3730:
L3725:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_668
L3726:
L3722:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_668
L3723:
f_668:
; ((k2386 . rcx))
 mov rax, [SELF + 32]
; _x_44^5079 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3731
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_663
L3731:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_653
L3732:
f_663:
; ((k2381 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_653:
; ((k2360 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_654
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_60^4964 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5054 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3733
 mov rax, [SELF + 40]
; _x_44^5057 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5055 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5058 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5056 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3735 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3736
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3738
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^5062 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^5067 = r9
 mov r9, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^5068 = r10
 mov r10, rax
 mov rax, r9
 mov r11, r10
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, L3740 ; 
; _y_46^5072 = r9
 mov r9, rax
 mov rax, r8
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^5070 = r9
 mov r9, rax
 mov SELF, rcx
 mov rax, L3741 ; 
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3738:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_654
L3739:
L3736:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_654
L3737:
L3733:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_654
L3734:
f_654:
; ((k2361 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_655
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_60^4965 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^5035 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3742
 mov rax, [SELF + 16]
; _x_44^5038 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5036 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^5039 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5037 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3744 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3745
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3747
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^5043 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_45^5048 = r9
 mov r9, rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _y_46^5049 = r10
 mov r10, rax
 mov rax, r9
 mov r11, r10
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, L3749 ; 
; _y_46^5053 = r9
 mov r9, rax
 mov rax, r8
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^5051 = r9
 mov r9, rax
 mov SELF, rcx
 mov rax, L3750 ; 
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3747:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_655
L3748:
L3745:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_655
L3746:
L3742:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_655
L3743:
f_655:
; ((k2362 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_656
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_60^4966 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^5016 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3751
 mov rax, [SELF + 40]
; _x_44^5019 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_62^5017 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^5020 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_63^5018 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3753 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3754
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3756
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^5024 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_45^5029 = r9
 mov r9, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _y_46^5030 = r10
 mov r10, rax
 mov rax, r9
 mov r11, r10
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, L3758 ; 
; _y_46^5034 = r9
 mov r9, rax
 mov rax, r8
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^5032 = r9
 mov r9, rax
 mov SELF, rcx
 mov rax, L3759 ; 
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3756:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_656
L3757:
L3754:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_656
L3755:
L3751:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_656
L3752:
f_656:
; ((k2363 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_657
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; _failure_60^4967 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^4969 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3760
 mov rax, [SELF + 16]
; _x_44^4972 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4970 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^4973 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4971 = rdi
 mov rdi, rax
; _op_65^4974 = r8
 mov r8, rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_659
 mov [ALLOC + 16], r8
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
; _sk2_67^4975 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_662
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_68^5011 = r10
 mov r10, rax
 mov rax, rsi
 mov r11, L3762 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3763
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_659
L3763:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_662
L3764:
L3760:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_657
L3761:
f_662:
; ((k2377 . rcx))
 mov rax, [SELF + 32]
; _x_44^5012 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L3765 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3766
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_659
L3766:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_657
L3767:
f_659:
; ((k2366 . rcx))
 mov rax, [SELF + 40]
; _x_44^4976 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3768
 mov rax, [SELF + 40]
; _x_44^4979 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^4977 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4980 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^4978 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_75^4981 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_660
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t2367 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_660
L3768:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_657
L3769:
f_660:
; ((_p-ls_78^4984 . rdi) (_p-ls_77^4983 . rsi) (_ls_76^4982 . rdx) (k2369 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3770
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2776
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3770:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3772
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^4992 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3774
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^4995 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_82^4996 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3776
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^5001 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3777
L3776:
 mov rax, FALSE
L3777:
 cmp rax, FALSE
 je L3778
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_85^5003 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_660
L3778:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_657
L3779:
L3774:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_657
L3775:
L3772:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_657
L3773:
L3771:
f_2776:
; ((t2370 . rcx))
; _vals_79^4986 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2777
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2777:
; ((t2371 . rcx))
; _vars_80^4987 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _xs_84^4988 = rsi
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2778
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2778:
; ((t2372 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3780
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2779
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_661
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3780:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_657
L3781:
f_661:
; ((_val_86^4990 . rsi) (_var_85^4989 . rdx) (k2375 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2781
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_652
f_2781:
; ((t2376 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2779:
; ((t2373 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2780
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2780:
; ((t2374 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov rdi, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___cons_2a] ; cons*
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_657:
; ((k2364 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_658
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_658:
; ((k2365 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L3782 ; 
 mov rsi, L3783 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_648:
; ((_v_52^4933 . rdx) (k2433 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^4936 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^4937 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2817
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdi
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2817:
; ((t2442 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_45^4940 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 32]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
; t2440 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2816
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [___number_2d_3estring] ; number->string
 mov rdx, [___rename_2dcounter] ; rename-counter
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2816:
; ((t2441 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, L3784 ; 
 mov rdi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2814
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2814:
; ((t2439 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2811
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2811:
; ((t2434 . rcx))
; _var_53^4934 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2813
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25_2b] ; %+
 mov rdx, [___rename_2dcounter] ; rename-counter
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2813:
; ((t2437 . rcx))
 mov rax, rcx
 mov [___rename_2dcounter], rax ; (set! rename-counter ...)
 mov rax, [SELF + 16]
; _x_45^4947 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _y_46^4948 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^4945 = rdx
 mov rdx, rax
 mov rax, [___renamed_2dvariables] ; renamed-variables
; _y_46^4946 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [___renamed_2dvariables], rax ; (set! renamed-variables ...)
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_590:
; ((_form_52^4267 . rdx) (k2444 . rcx))
 mov rax, 1 ; '0
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _icount_53^4268 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _resolve_54^4269 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_55^4270 = r8
 mov r8, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_591
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_592
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2928
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, r8
 mov SELF, [SELF + 8]
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2928:
; ((t2628 . rcx))
; _form_56^4932 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2929
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, L3785 ; 
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov SELF, [____4e_42] ; NB
 mov rdi, L3786 ; 
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2929:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_592:
; ((_env_57^4278 . rsi) (_x_56^4277 . rdx) (k2448 . rcx))
; _v_58^4279 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_593
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_59^4280 = r8
 mov r8, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_643
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
; _sk2_66^4921 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_644
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_67^4922 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3787
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_643
L3787:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_644
L3788:
f_644:
; ((k2624 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_645
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_67^4923 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^4929 = rsi
 mov rsi, rax
 mov rax, rsi
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^4930 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L3789
 mov rax, rdi
 jmp L3790
L3789:
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L3790:
 cmp rax, FALSE
 je L3791
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_643
L3791:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_645
L3792:
f_645:
; ((k2625 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_646
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_67^4924 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^4928 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3793
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_643
L3793:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_646
L3794:
f_646:
; ((k2626 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_647
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_67^4925 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^4927 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3795
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_643
L3795:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_647
L3796:
f_647:
; ((k2627 . rcx))
 mov rax, [SELF + 32]
; _x_44^4926 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3797
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_643
L3797:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_593
L3798:
f_643:
; ((k2623 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3799 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_593:
; ((k2449 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_594
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_59^4281 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4920 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3800
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_591
L3800:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_594
L3801:
f_594:
; ((k2450 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_595
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_59^4282 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^4908 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3802
 mov rax, [SELF + 32]
; _x_44^4911 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4909 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^4912 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4910 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3804 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3805
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3807
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4916 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3808
L3807:
 mov rax, FALSE
L3808:
 cmp rax, FALSE
 je L3809
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 sub rsp, 16
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3809:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_595
L3810:
L3805:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_595
L3806:
L3802:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_595
L3803:
f_595:
; ((k2451 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_596
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; _failure_59^4283 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4862 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3811
 mov rax, [SELF + 40]
; _x_44^4865 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4863 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4866 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4864 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3813
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^4868 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^4869 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L3815 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3816
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3818
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_68^4875 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_69^4876 = r12
 mov r12, rax
; _llist_71^4879 = local #0
 mov [locals + 0], r10
; _body_75^4880 = local #1
 mov [locals + 8], r12
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2912
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, [locals + 0] ; _llist_71^4879
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [locals + 8] ; _body_75^4880
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3818:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_596
L3819:
L3816:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_596
L3817:
L3813:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_596
L3814:
L3811:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_596
L3812:
f_2912:
; ((t2604 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3820
 mov rax, [SELF + 16]
; _args_79^4881 = rdx
 mov rdx, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2913
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3820:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_596
L3821:
f_2913:
; ((t2605 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3822
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2927
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3822:
 sub rsp, 16
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_596
L3823:
f_2927:
; ((t2621 . rcx))
 mov rax, [SELF + 72]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_80^4883 = rdx
 mov rdx, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_642
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t2607 = rsi
 mov rsi, rax
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov [rsp + 24], rsi
 mov rdi, null ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_642
f_642:
; ((_bs_83^4886 . rdi) (_args_82^4885 . rsi) (_vars_81^4884 . rdx) (k2609 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3824
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L3826
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2918
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3826:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3828 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3827:
L3824:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3829
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2922
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3829:
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L3831
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3833 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3831:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3834
 sub rsp, 24
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2926
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov SELF, [____25list] ; %list
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3834:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3836 ; 
 mov rsi, [SELF + 56]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3835:
L3832:
L3830:
L3825:
f_2926:
; ((t2620 . rcx))
 mov rax, [SELF + 48]
; _y_46^4905 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2619 = rsi
 mov rsi, rax
 sub rsp, 40
 mov [rsp + 0], rsi
 mov rax, [SELF + 40]
; _x_44^4903 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^4902 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_642
f_2922:
; ((t2616 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2924
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _y_46^4899 = rdx
 mov rdx, rax
 mov rax, L3837 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rsi, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rsi
 mov rsi, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 56]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2924:
; ((t2618 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2923
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2923:
; ((t2617 . rcx))
 mov rdx, [SELF + 48]
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2921
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2921:
; ((t2615 . rcx))
 mov rax, [SELF + 40]
; _y_46^4897 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2614 = rsi
 mov rsi, rax
 mov rax, L3838 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2613 = rdi
 mov rdi, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, rdi
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2918:
; ((t2612 . rcx))
 mov rax, [SELF + 40]
; _y_46^4892 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2611 = rsi
 mov rsi, rax
 mov rax, L3839 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2610 = rdi
 mov rdi, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, rdi
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_596:
; ((k2452 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_597
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4284 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^4782 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3840
 mov rax, [SELF + 32]
; _x_44^4785 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4783 = rsi
 mov rsi, rax
 mov rax, [SELF + 32]
; _x_44^4786 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4784 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3842
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^4788 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_64^4789 = r9
 mov r9, rax
 mov rax, r8
 mov r11, L3844 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3845
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_70^4794 = r10
 mov r10, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_639
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r10
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2576 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r9
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_639
L3845:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3846:
L3842:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3843:
L3840:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3841:
f_639:
; ((_p-ls_73^4797 . rdi) (_p-ls_72^4796 . rsi) (_ls_71^4795 . rdx) (k2578 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3847
 sub rsp, 8
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2893
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3847:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3849
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^4841 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3851
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^4844 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^4845 = r10
 mov r10, rax
 mov rax, r9
 mov r11, L3853 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3854
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3856
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_79^4851 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_80^4852 = local #0
 mov [locals + 0], rax
 sub rsp, 40
 mov rax, r12
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [locals + 0] ; _x_80^4852
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_639
L3856:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3857:
L3854:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3855:
L3851:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3852:
L3849:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3850:
L3848:
f_2893:
; ((t2579 . rcx))
; _bodies_74^4799 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2894
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 72]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2894:
; ((t2580 . rcx))
; _llists_75^4800 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _args_79^4801 = rsi
 mov rsi, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2895
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2895:
; ((t2581 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3858
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2911
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3858:
 sub rsp, 16
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_597
L3859:
f_2911:
; ((t2602 . rcx))
 mov rax, [SELF + 72]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop1_80^4803 = rdx
 mov rdx, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_640
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t2583 = rsi
 mov rsi, rax
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov [rsp + 24], rsi
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_640
f_640:
; ((_bodies_82^4805 . rsi) (_llists_81^4804 . rdx) (k2585 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2898
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, ALLOC
 add ALLOC, 72
; t2601 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3860
 mov rcx, rdi
 mov rdx, L3862 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3860:
 mov SELF, rdi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2898
L3861:
f_2898:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop2_83^4807 = rcx
 mov rcx, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_641
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t2587 = rdx
 mov rdx, rax
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^4839 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov [rsp + 16], rax
 mov [rsp + 24], rdx
 mov rdi, null ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_641
f_641:
; ((_bs_86^4810 . rdi) (_args_85^4809 . rsi) (_vars_84^4808 . rdx) (k2589 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3863
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L3865
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2902
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3865:
 sub rsp, 32
 mov rax, [SELF + 32]
; _x_44^4819 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^4818 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_640
L3866:
L3863:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3867
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2906
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3867:
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L3869
 sub rsp, 32
 mov rax, [SELF + 32]
; _x_44^4830 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^4829 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_640
L3869:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3871
 sub rsp, 24
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2910
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov SELF, [____25list] ; %list
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3871:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L3873 ; 
 mov rax, [SELF + 16]
; _x_44^4838 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3872:
L3870:
L3868:
L3864:
f_2910:
; ((t2600 . rcx))
 mov rax, [SELF + 48]
; _y_46^4835 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2599 = rsi
 mov rsi, rax
 sub rsp, 40
 mov [rsp + 0], rsi
 mov rax, [SELF + 40]
; _x_44^4833 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^4832 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_641
f_2906:
; ((t2596 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2908
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _y_46^4826 = rdx
 mov rdx, rax
 mov rax, L3874 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rsi, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rsi
 mov rsi, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 56]
 mov SELF, [____25list] ; %list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2908:
; ((t2598 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2907
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2907:
; ((t2597 . rcx))
 mov rdx, [SELF + 48]
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2905
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2905:
; ((t2595 . rcx))
 mov rax, [SELF + 40]
; _x_44^4827 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^4824 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2594 = rsi
 mov rsi, rax
 mov rax, L3875 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2593 = rdi
 mov rdi, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, rdi
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2902:
; ((t2592 . rcx))
 mov rax, [SELF + 40]
; _x_44^4817 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^4816 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2591 = rsi
 mov rsi, rax
 mov rax, L3876 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2590 = rdi
 mov rdi, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, rdi
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_597:
; ((k2453 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_598
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4285 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4762 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3877
 mov rax, [SELF + 40]
; _x_44^4765 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4763 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4766 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4764 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_637
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
; _sk2_64^4767 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_638
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
; _fk2_65^4777 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, L3879 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3880
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_637
L3880:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_638
L3881:
L3877:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_598
L3878:
f_638:
; ((k2575 . rcx))
 mov rax, [SELF + 32]
; _x_44^4778 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, L3882 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3883
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_637
L3883:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_598
L3884:
f_637:
; ((k2573 . rcx))
 mov rax, [SELF + 40]
; _x_44^4768 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3885
 mov rax, [SELF + 40]
; _x_44^4771 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4769 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4772 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4770 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3887
; _body_70^4774 = rdi
 mov rdi, rsi
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2891
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3887:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_598
L3888:
L3885:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_598
L3886:
f_2891:
; ((t2574 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3889
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _y_46^4776 = rdx
 mov rdx, rax
 mov rax, L3891 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L3889:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_598
L3890:
f_598:
; ((k2454 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_599
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4286 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4709 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3892
 mov rax, [SELF + 24]
; _x_44^4712 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^4710 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4713 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^4711 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3894 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3895
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3897
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^4717 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^4718 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_71^4721 = r10
 mov r10, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_634
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2558 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_634
L3897:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3898:
L3895:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3896:
L3892:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3893:
f_634:
; ((_p-ls_74^4724 . rdi) (_p-ls_73^4723 . rsi) (_ls_72^4722 . rdx) (k2560 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3899
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2881
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3899:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3901
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^4743 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3903
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^4746 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_78^4747 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3905
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4752 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3906
L3905:
 mov rax, FALSE
L3906:
 cmp rax, FALSE
 je L3907
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^4754 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_634
L3907:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3908:
L3903:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3904:
L3901:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3902:
L3900:
f_2881:
; ((t2561 . rcx))
; _vals_75^4726 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2882
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2882:
; ((t2562 . rcx))
; _vars_76^4727 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _body_80^4728 = rsi
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2883
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2883:
; ((t2563 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3909
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2884
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_635
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3909:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_599
L3910:
f_635:
; ((_var_81^4730 . rdx) (k2571 . rcx))
; _x_45^4731 = rsi
 mov rsi, rdx
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2890
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___rename_2dvar] ; rename-var
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2890:
; ((t2572 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2884:
; ((t2564 . rcx))
; _rvars_81^4729 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2885
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rsi, [SELF + 48]
 mov SELF, [___append] ; append
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2885:
; ((t2565 . rcx))
; _env_82^4733 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^4734 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3911
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
; _y_46^4736 = rsi
 mov rsi, rax
 mov rax, L3913 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L3911:
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_636
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2886
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3912:
f_2886:
; ((t2566 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2888
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2888:
; ((t2568 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _y_46^4741 = rdx
 mov rdx, rax
 mov rax, L3914 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2887
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2887:
; ((t2567 . rcx))
 mov rdx, L3915 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_636:
; ((_val_84^4738 . rsi) (_rvar_83^4737 . rdx) (k2569 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2889
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2889:
; ((t2570 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^4739 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_599:
; ((k2455 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_600
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4287 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4657 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3916
 mov rax, [SELF + 40]
; _x_44^4660 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^4658 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4661 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^4659 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3918 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3919
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3921
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^4665 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^4666 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_71^4669 = r10
 mov r10, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_631
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2544 = r12
 mov r12, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_631
L3921:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3922:
L3919:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3920:
L3916:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3917:
f_631:
; ((_p-ls_74^4672 . rdi) (_p-ls_73^4671 . rsi) (_ls_72^4670 . rdx) (k2546 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L3923
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2871
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3923:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3925
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_75^4690 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3927
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_77^4693 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_78^4694 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3929
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4699 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3930
L3929:
 mov rax, FALSE
L3930:
 cmp rax, FALSE
 je L3931
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_81^4701 = r12
 mov r12, rax
 sub rsp, 40
 mov rax, r9
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r12
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_631
L3931:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3932:
L3927:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3928:
L3925:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3926:
L3924:
f_2871:
; ((t2547 . rcx))
; _vals_75^4674 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2872
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2872:
; ((t2548 . rcx))
; _vars_76^4675 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _body_80^4676 = rsi
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2873
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2873:
; ((t2549 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3933
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2874
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_632
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 56]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3933:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_600
L3934:
f_632:
; ((_var_81^4678 . rdx) (k2556 . rcx))
; _x_45^4679 = rsi
 mov rsi, rdx
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2879
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___rename_2dvar] ; rename-var
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2879:
; ((t2557 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2874:
; ((t2550 . rcx))
; _rvars_81^4677 = rdx
 mov rdx, rcx
 mov rax, rcx
 mov r11, null ; 
 cmp rax, r11
 jne L3935
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _y_46^4683 = rsi
 mov rsi, rax
 mov rax, L3937 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L3935:
 mov rsi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2875
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rcx, ALLOC
 add ALLOC, 56
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_633
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rdi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3936:
f_633:
; ((_val_83^4685 . rsi) (_rvar_82^4684 . rdx) (k2554 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2878
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2878:
; ((t2555 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^4686 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2875:
; ((t2551 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2877
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2877:
; ((t2553 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _y_46^4688 = rdx
 mov rdx, rax
 mov rax, L3938 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2876
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2876:
; ((t2552 . rcx))
 mov rdx, L3939 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_600:
; ((k2456 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_601
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4288 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4634 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3940
 mov rax, [SELF + 24]
; _x_44^4637 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^4635 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4638 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^4636 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3942 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3943
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3945
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^4642 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_65^4643 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3947
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_67^4647 = r10
 mov r10, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_68^4648 = r12
 mov r12, rax
 mov rax, r10
 mov r11, L3949 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3950
; _xs1_73^4653 = local #0
 mov [locals + 0], r12
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2866
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [locals + 0] ; _xs1_73^4653
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r12
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3950:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3951:
L3947:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3948:
L3945:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3946:
L3943:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3944:
L3940:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3941:
f_2866:
; ((t2540 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3952
 mov rax, [SELF + 16]
; _more_77^4654 = rdx
 mov rdx, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2867
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3952:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3953:
f_2867:
; ((t2541 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3954
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2869
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 48]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3954:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_601
L3955:
f_2869:
; ((t2543 . rcx))
 mov rax, L3956 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2542 = rdx
 mov rdx, rax
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_601:
; ((k2457 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_602
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4289 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4621 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3957
 mov rax, [SELF + 40]
; _x_44^4624 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4622 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4625 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4623 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3959 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3960
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3962
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4629 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L3963
L3962:
 mov rax, FALSE
L3963:
 cmp rax, FALSE
 je L3964
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^4631 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3964:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_602
L3965:
L3960:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_602
L3961:
L3957:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_602
L3958:
f_602:
; ((k2458 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_603
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4290 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4602 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3966
 mov rax, [SELF + 24]
; _x_44^4605 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4603 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4606 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4604 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3968 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3969
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3971
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4610 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4611 = r9
 mov r9, rax
; _name_68^4614 = r10
 mov r10, r8
; _xs_72^4615 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2863
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3971:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_603
L3972:
L3969:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_603
L3970:
L3966:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_603
L3967:
f_2863:
; ((t2536 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3973
 mov rax, [SELF + 16]
; _x_45^4618 = rdx
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2865
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_630
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 24]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3973:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_603
L3974:
f_630:
; ((_x_73^4620 . rdx) (k2539 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_592
f_2865:
; ((t2538 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2537 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L3975 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_603:
; ((k2459 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_604
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4291 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4575 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3976
 mov rax, [SELF + 40]
; _x_44^4578 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4576 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4579 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4577 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3978 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3979
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3981
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4583 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4584 = r9
 mov r9, rax
; _name_68^4587 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3983
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^4589 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^4590 = local #0
 mov [locals + 0], rax
; _cnd_73^4593 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_71^4590
; _xs_77^4594 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2859
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 16] ; _xs_77^4594
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _cnd_73^4593
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_71^4590
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3983:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_604
L3984:
L3981:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_604
L3982:
L3979:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_604
L3980:
L3976:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_604
L3977:
f_2859:
; ((t2531 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3985
 mov rax, [SELF + 16]
; _x_45^4597 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^4599 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2862
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_629
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3985:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_604
L3986:
f_629:
; ((_x_78^4601 . rdx) (k2535 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_592
f_2862:
; ((t2534 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2533 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2532 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L3987 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_604:
; ((k2460 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_605
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4292 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4548 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L3988
 mov rax, [SELF + 24]
; _x_44^4551 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4549 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4552 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4550 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L3990 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L3991
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3993
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4556 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4557 = r9
 mov r9, rax
; _t_68^4560 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L3995
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^4562 = r12
 mov r12, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^4563 = local #0
 mov [locals + 0], rax
; _s_73^4566 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_71^4563
; _xs_77^4567 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2855
 mov [ALLOC + 16], r10
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [locals + 16] ; _xs_77^4567
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _s_73^4566
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_71^4563
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3995:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_605
L3996:
L3993:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_605
L3994:
L3991:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_605
L3992:
L3988:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_605
L3989:
f_2855:
; ((t2526 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L3997
 mov rax, [SELF + 16]
; _x_45^4570 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _x_45^4572 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2858
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_628
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L3997:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_605
L3998:
f_628:
; ((_x_78^4574 . rdx) (k2530 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_592
f_2858:
; ((t2529 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2528 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2527 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L3999 ; 
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_605:
; ((k2461 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_606
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4293 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4535 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4000
 mov rax, [SELF + 40]
; _x_44^4538 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4536 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4539 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4537 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4002 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4003
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4005
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4543 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4006
L4005:
 mov rax, FALSE
L4006:
 cmp rax, FALSE
 je L4007
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_64^4545 = r8
 mov r8, rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4007:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_606
L4008:
L4003:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_606
L4004:
L4000:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_606
L4001:
f_606:
; ((k2462 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_607
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4294 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4519 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4009
 mov rax, [SELF + 24]
; _x_44^4522 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4520 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4523 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4521 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4011 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4012
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4014
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4527 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4528 = r9
 mov r9, rax
; _x1_68^4531 = r10
 mov r10, r8
; _xs_72^4532 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2852
 mov [ALLOC + 16], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4014:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_607
L4015:
L4012:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_607
L4013:
L4009:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_607
L4010:
f_2852:
; ((t2523 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4016
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2853
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4016:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_607
L4017:
f_2853:
; ((t2524 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _y_46^4534 = rdx
 mov rdx, rax
 mov rax, L4018 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2854
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2854:
; ((t2525 . rcx))
 mov rdx, L4019 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_607:
; ((k2463 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_608
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4295 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4489 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4020
 mov rax, [SELF + 40]
; _x_44^4492 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4490 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4493 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4491 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4022 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4023
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4025
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4497 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4498 = r9
 mov r9, rax
; _llist_68^4501 = r10
 mov r10, r8
; _body_72^4502 = r12
 mov r12, r9
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2841
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r12
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4025:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_608
L4026:
L4023:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_608
L4024:
L4020:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_608
L4021:
f_2841:
; ((t2506 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4027
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2851
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25_2b] ; %+
 mov rdx, [___lambda_2did_2dcounter] ; lambda-id-counter
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4027:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_608
L4028:
f_2851:
; ((t2521 . rcx))
 mov rax, rcx
 mov [___lambda_2did_2dcounter], rax ; (set! lambda-id-counter ...)
; _id_73^4503 = rdx
 mov rdx, rcx
 mov rcx, [SELF + 40]
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_625
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rsi, ALLOC
 add ALLOC, 48
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_624
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_624:
; ((k2508 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_625:
; ((_t1_76^4507 . rdi) (_t1_75^4506 . rsi) (_t1_74^4505 . rdx) (k2509 . rcx))
; _argc_78^4509 = r8
 mov r8, rsi
; _rest_79^4510 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2843
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov [ALLOC + 64], r9
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_626
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_626:
; ((_var_80^4512 . rdx) (k2519 . rcx))
; _x_45^4513 = rsi
 mov rsi, rdx
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2850
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___rename_2dvar] ; rename-var
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2850:
; ((t2520 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2843:
; ((t2510 . rcx))
; _rvars_80^4511 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2847
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rcx, ALLOC
 add ALLOC, 80
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_627
 mov rdx, ALLOC
 add ALLOC, 16
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_627:
; ((_x_44^4515 . rdx) (k2518 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2847:
; ((t2514 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2848
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; t2516 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4029
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2849
 mov [ALLOC + 16], rdx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 72]
 mov SELF, [___last] ; last
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4029:
 mov SELF, rdx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2848
L4030:
f_2849:
; ((t2517 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2848
f_2848:
; ((t2515 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 72]
 mov rdi, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2844
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [___build_2dlambda_2dlist] ; build-lambda-list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2844:
; ((t2511 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2846
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 56]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2846:
; ((t2513 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
; _y_46^4518 = rdx
 mov rdx, rax
 mov rax, L4031 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2845
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2845:
; ((t2512 . rcx))
 mov rdx, L4032 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_608:
; ((k2464 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_609
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4296 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4459 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4033
 mov rax, [SELF + 24]
; _x_44^4462 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^4460 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4463 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^4461 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4035 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4036
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4038
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4467 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4039
L4038:
 mov rax, FALSE
L4039:
 cmp rax, FALSE
 je L4040
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_63^4469 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4042
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4472 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4473 = r10
 mov r10, rax
 mov rax, r9
 mov r11, L4044 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4045
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4047
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^4479 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_70^4480 = local #0
 mov [locals + 0], rax
; _llist_72^4483 = local #1
 mov [locals + 8], r12
 mov rax, [locals + 0] ; _x_70^4480
; _body_76^4484 = local #2
 mov [locals + 16], rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2840
 mov rax, [locals + 16] ; _body_76^4484
 mov [ALLOC + 16], rax
 mov rax, [locals + 8] ; _llist_72^4483
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [locals + 0] ; _x_70^4480
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4047:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4048:
L4045:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4046:
L4042:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4043:
L4040:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4041:
L4036:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4037:
L4033:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4034:
f_2840:
; ((t2505 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4049
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
; _x_45^4487 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^4488 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^4486 = rdx
 mov rdx, rax
 mov rax, L4051 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4049:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_609
L4050:
f_609:
; ((k2465 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_610
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4297 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4401 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4052
 mov rax, [SELF + 40]
; _x_44^4404 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_60^4402 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4405 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_61^4403 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4054 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4055
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_67^4408 = r8
 mov r8, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_618
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], rdx
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t2481 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, rdi
 mov rsi, null ; 
 mov rdi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_618
L4055:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_610
L4056:
L4052:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_610
L4053:
f_618:
; ((_p-ls_70^4411 . rdi) (_p-ls_69^4410 . rsi) (_ls_68^4409 . rdx) (k2483 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4057
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2826
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4057:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4059
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_71^4438 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4061
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_73^4441 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_74^4442 = r10
 mov r10, rax
 mov rax, r9
 mov r11, L4063 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4064
 sub rsp, 8
 mov rax, r10
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4066
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_76^4448 = r12
 mov r12, rax
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_77^4449 = local #0
 mov [locals + 0], rax
 sub rsp, 40
 mov rax, r12
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [locals + 0] ; _x_77^4449
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_618
L4066:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_610
L4067:
L4064:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_610
L4065:
L4061:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_610
L4062:
L4059:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_610
L4060:
L4058:
f_2826:
; ((t2484 . rcx))
; _bodies_71^4413 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2827
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2827:
; ((t2485 . rcx))
; _llists_72^4414 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2839
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25_2b] ; %+
 mov rdx, [___lambda_2did_2dcounter] ; lambda-id-counter
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2839:
; ((t2503 . rcx))
 mov rax, rcx
 mov [___lambda_2did_2dcounter], rax ; (set! lambda-id-counter ...)
; _x_45^4419 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2830
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_619
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 48]
 mov rdi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_619:
; ((_body_75^4422 . rsi) (_llist_74^4421 . rdx) (k2489 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_621
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_620
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_620:
; ((k2490 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___parse_2dlambda_2dlist] ; parse-lambda-list
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_621:
; ((_t1_78^4425 . rdi) (_t1_77^4424 . rsi) (_t1_76^4423 . rdx) (k2491 . rcx))
; _argc_80^4427 = r8
 mov r8, rsi
; _rest_81^4428 = r9
 mov r9, rdi
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2831
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov [ALLOC + 56], r9
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___map] ; map
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_622
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_622:
; ((_var_82^4430 . rdx) (k2501 . rcx))
; _x_45^4431 = rsi
 mov rsi, rdx
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2838
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___rename_2dvar] ; rename-var
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2838:
; ((t2502 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2831:
; ((t2492 . rcx))
; _rvars_82^4429 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2835
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rcx, ALLOC
 add ALLOC, 72
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_623
 mov rdx, ALLOC
 add ALLOC, 16
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_623:
; ((_x_44^4433 . rdx) (k2500 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_2835:
; ((t2496 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2836
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; t2498 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4068
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2837
 mov [ALLOC + 16], rdx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 64]
 mov SELF, [___last] ; last
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4068:
 mov SELF, rdx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2836
L4069:
f_2837:
; ((t2499 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2836
f_2836:
; ((t2497 . rcx))
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 64]
 mov rdi, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2832
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [___build_2dlambda_2dlist] ; build-lambda-list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2832:
; ((t2493 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2834
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2834:
; ((t2495 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _y_46^4436 = rdx
 mov rdx, rax
 mov rax, L4070 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2833
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2833:
; ((t2494 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_2830:
; ((t2488 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t2487 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, L4071 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_610:
; ((k2466 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_611
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4298 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4376 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4072
 mov rax, [SELF + 24]
; _x_44^4379 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4377 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4380 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4378 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4074 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4075
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4077
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4384 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4385 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4079
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4390 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4080
L4079:
 mov rax, FALSE
L4080:
 cmp rax, FALSE
 je L4081
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^4392 = r10
 mov r10, rax
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rax, L4083 ; 
; _y_46^4400 = r12
 mov r12, rax
 mov rax, r10
 mov r11, r12
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^4398 = r12
 mov r12, rax
 mov rax, r8
 mov r11, r12
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_46^4396 = r12
 mov r12, rax
 mov rax, L4084 ; 
 mov r11, r12
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rdx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rdx
 mov rdx, ALLOC
 add ALLOC, 24
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4081:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_611
L4082:
L4077:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_611
L4078:
L4075:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_611
L4076:
L4072:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_611
L4073:
f_611:
; ((k2467 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_612
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; _failure_59^4299 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4351 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4085
 mov rax, [SELF + 40]
; _x_44^4354 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4352 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4355 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4353 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4087 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4088
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4090
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4359 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4360 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4092
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_70^4365 = r10
 mov r10, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_71^4366 = r12
 mov r12, rax
; _y_73^4369 = local #0
 mov [locals + 0], r10
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4094
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4371 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_44^4371
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4095
L4094:
 mov rax, FALSE
L4095:
 cmp rax, FALSE
 je L4096
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_74^4373 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _w_74^4373
; _z_76^4375 = local #2
 mov [locals + 16], rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2822
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [locals + 16] ; _z_76^4375
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [locals + 0] ; _y_73^4369
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4096:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_612
L4097:
L4092:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_612
L4093:
L4090:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_612
L4091:
L4088:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_612
L4089:
L4085:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_612
L4086:
f_2822:
; ((t2478 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2823
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2823:
; ((t2479 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2824
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
f_2824:
; ((t2480 . rcx))
 mov rdx, L4098 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 32]
 mov r8, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_612:
; ((k2468 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_613
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_59^4300 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _x_44^4331 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4099
 mov rax, [SELF + 24]
; _x_44^4334 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4332 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^4335 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4333 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4101 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4102
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4104
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4339 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4340 = r9
 mov r9, rax
; _var_68^4343 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4106
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4345 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4107
L4106:
 mov rax, FALSE
L4107:
 cmp rax, FALSE
 je L4108
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^4347 = r12
 mov r12, rax
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2820
 mov [ALLOC + 16], r10
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r12
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4108:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_613
L4109:
L4104:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_613
L4105:
L4102:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_613
L4103:
L4099:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_613
L4100:
f_2820:
; ((t2476 . rcx))
; _x_72^4350 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2821
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_591
f_2821:
; ((t2477 . rcx))
 mov rdx, L4110 ; 
 mov rsi, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_613:
; ((k2469 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_614
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; _failure_59^4301 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _x_44^4312 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4111
 mov rax, [SELF + 40]
; _x_44^4315 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4313 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^4316 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4314 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, L4113 ; 
 CALL recursively_equal
 cmp rax, FALSE
 je L4114
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4116
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_65^4320 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_66^4321 = r9
 mov r9, rax
; _v_68^4324 = r10
 mov r10, r8
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4118
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4326 = r12
 mov r12, rax
 mov rax, r12
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4119
L4118:
 mov rax, FALSE
L4119:
 cmp rax, FALSE
 je L4120
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_69^4328 = r12
 mov r12, rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2819
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, r12
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_592
L4120:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_614
L4121:
L4116:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_614
L4117:
L4114:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_614
L4115:
L4111:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_614
L4112:
f_2819:
; ((t2475 . rcx))
 mov rdx, L4122 ; 
 mov rsi, [SELF + 24]
 mov rdi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_614:
; ((k2470 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_615
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; _failure_59^4302 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^4304 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4123
 mov rax, [SELF + 16]
; _x_44^4307 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _w_61^4305 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^4308 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_62^4306 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2818
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4123:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_615
L4124:
f_2818:
; ((t2473 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4125
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_617
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rdx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4125:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_615
L4126:
f_617:
; ((_x_69^4311 . rdx) (k2474 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_592
f_615:
; ((k2471 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_616
 mov rax, ALLOC
 add ALLOC, 16
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L4127 ; 
 mov rsi, [SELF + 16]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_616:
; ((k2472 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L4128 ; 
 mov rsi, L4129 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_591:
; ((_env_57^4272 . rsi) (_var_56^4271 . rdx) (k2446 . rcx))
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eq
; _tmp_58^4273 = rdi
 mov rdi, rax
 mov SELF, rcx
 mov rcx, rdi
 cmp rcx, FALSE
 je L4130
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L4131
L4130:
 mov rcx, rdx
L4131:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_586:
; ((_depth_53^4241 . rsi) (_exp_52^4240 . rdx) (k2631 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4132
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4133
L4132:
 mov rax, 7 ; '3
L4133:
; _depth_54^4242 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _walk_55^4245 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_587
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov SELF, [SELF + 8]
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_587
f_587:
; ((_d_57^4247 . rsi) (_x_56^4246 . rdx) (k2633 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2930
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, rsi
 mov rsi, [SELF + 24]
 mov SELF, [____25_3e] ; %>
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2930:
; ((t2634 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4134
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L4136 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4134:
 mov rax, [SELF + 48]
; _x_44^4248 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4137
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2932
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 48]
 mov SELF, [___vector_2d_3elist] ; vector->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4137:
 mov rax, [SELF + 48]
; _x_44^4249 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4139
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_58^4250 = rdx
 mov rdx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_588
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t2637 = rsi
 mov rsi, rax
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov [rsp + 24], rsi
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_588
L4139:
 sub rsp, 16
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4140:
L4138:
L4135:
f_588:
; ((_n_60^4252 . rsi) (_x_59^4251 . rdx) (k2639 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4141
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4141:
 sub rsp, 8
 mov rax, rsi
 test rax, 1
 je L4143
 mov rax, rsi
 jmp L4144
L4143:
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L4144:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4145
 mov SELF, rcx
 mov rcx, L4147 ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4145:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4148
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2937
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 32]
 mov SELF, [___add1] ; add1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4148:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4149:
L4146:
L4142:
f_2937:
; ((t2643 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^4259 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2934
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_587
f_2934:
; ((t2640 . rcx))
; _x_45^4257 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2936
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [___sub1] ; sub1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2936:
; ((t2642 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _x_44^4260 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2935
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_588
f_2935:
; ((t2641 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2932:
; ((t2636 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2931
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_587
f_2931:
; ((t2635 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___list_2d_3evector] ; list->vector
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_585:
; ((_rest_54^4238 . rdi) (_argc_53^4237 . rsi) (_vars_52^4236 . rdx) (k2644 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2938
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov SELF, [___take] ; take
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2938:
; ((t2645 . rcx))
 mov rax, [SELF + 16]
; _x_55^4239 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rdx
 mov r15, null ; 
 mov rsi, r11
 cmp rax, FALSE
 cmove rsi, r15
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_583:
; ((_llist_52^4221 . rdx) (k2646 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_53^4222 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_584
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t2647 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_584
f_584:
; ((_vars_55^4224 . rsi) (_ll_54^4223 . rdx) (k2649 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4150
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2940
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4150:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4152
 sub rsp, 16
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2941
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4152:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4154
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^4233 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_584
L4154:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, L4156 ; 
 mov rsi, [SELF + 24]
 mov SELF, [____25error] ; %error
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4155:
L4153:
L4151:
f_2941:
; ((t2651 . rcx))
 mov rax, [SELF + 32]
; _x_45^4230 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov rsi, rax
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rdi, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_2940:
; ((t2650 . rcx))
 mov rax, [SELF + 24]
; _x_45^4226 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov rsi, rax
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rdi, FALSE
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_575:
; ((_form_107^4165 . rdx) (k3339 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3278
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3278:
; ((t3341 . rcx))
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3277
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 SET_T rdi
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_573
f_3277:
; ((t3340 . rcx))
 sub rsp, 16
 mov rax, L4157 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_573:
; ((_mutable?_109^4155 . rdi) (_mstore_108^4154 . rsi) (_forms_107^4153 . rdx) (k3334 . rcx))
 sub rsp, 48
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_574
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_511
f_574:
; ((_loc-n_112^4160 . rdi) (_store_111^4159 . rsi) (_outputs_110^4158 . rdx) (k3335 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3276
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t3337 = r8
 mov r8, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4158
 mov rax, [SELF + 24]
; _x_44^4161 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 24]
; _x_44^4163 = r9
 mov r9, rax
 mov SELF, r8
 mov rax, r9
 mov r11, 3 ; '1
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3276
L4158:
 mov SELF, r8
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3276
L4159:
f_3276:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_572:
; ((k3331 . rcx))
 mov rax, [SELF + 24]
; _x_45^4149 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^4150 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_571:
; ((_store_103^4133 . rsi) (_bs_102^4132 . rdx) (k3346 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4160
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4160:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3282
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_437
L4161:
f_3282:
; ((t3348 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^4136 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3281
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_453
f_3281:
; ((t3347 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^4135 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_571
f_543:
; ((_k_103^3911 . r9) (_env_102^3910 . r8) (_id-n_101^3909 . rdi) (_sexp_100^3908 . rsi) (_transformer_99^3907 . rdx) (k3187 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693970
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3188
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r9
 mov rax, [SELF + 88]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 80]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rcx
 mov [ALLOC + 88], rsi
 mov [ALLOC + 96], r8
 mov rax, [SELF + 56]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 136], rax
 mov [ALLOC + 144], rdx
 mov rax, ALLOC
 add ALLOC, 152
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_446
f_3188:
; ((t3188 . rcx))
; _synrules_104^3912 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 144]
 mov [rsp + 0], rax
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3189
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
 mov [rsp + 8], rax
 mov rax, [SELF + 136]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_447
f_3189:
; ((t3189 . rcx))
; _mac-env_105^3913 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693970
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3190
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 120], rax
 mov [ALLOC + 128], rdx
 mov rax, [SELF + 128]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 144], rax
 mov rax, ALLOC
 add ALLOC, 152
; t3326 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3915 = rdi
 mov rdi, rax
; _x_44^3917 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3916 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3272
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 128]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 136]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3272:
; ((t3327 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4162
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^3918 = rdx
 mov rdx, rax
; _x_44^3920 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3919 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_425
L4162:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3190
L4163:
f_3190:
; ((t3190 . rcx))
; _ellipsis-id_106^3914 = rdx
 mov rdx, rcx
 mov rax, rcx
 cmp rax, FALSE
 je L4164
 mov rax, [SELF + 16]
; _x_44^3922 = rsi
 mov rsi, rax
; _x_44^3924 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3923 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4165
L4164:
 mov rax, [SELF + 16]
; _x_44^3925 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4165:
; _rest_107^3921 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693971
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3191
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov [ALLOC + 120], rdx
 mov rax, [SELF + 120]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 152], rax
 mov rax, ALLOC
 add ALLOC, 160
 mov [rsp + 8], rax
 mov rdx, [SELF + 136]
 mov rdx, [rdx + 8]
 mov SELF, [___map] ; map
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3191:
; ((t3191 . rcx))
; _pat-literals_108^3926 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^3929 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rules_109^3928 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pat-literal?_110^3930 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _not-pat-literal?_111^3931 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis-pair?_112^3932 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis?_113^3933 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _list-ids_114^3934 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _matches?_115^3935 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-bindings_116^3936 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _remove-dups_117^3937 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-template_118^3938 = local #3
 mov [locals + 24], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_544
 mov [ALLOC + 16], rdx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_545
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_546
 mov [ALLOC + 16], r10
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_547
 mov rax, [SELF + 152]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_548
 mov rax, [SELF + 152]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_550
 mov rax, [SELF + 152]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r9
 mov rax, [SELF + 112]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdi
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, [locals + 0] ; _matches?_115^3935
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_554
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 152]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], r12
 mov [ALLOC + 56], r8
 mov rax, [SELF + 112]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, [locals + 8] ; _make-bindings_116^3936
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_558
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 16] ; _remove-dups_117^3937
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_560
 mov [ALLOC + 16], r12
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 104], rax
 mov [ALLOC + 112], r9
 mov rax, [SELF + 152]
 mov [ALLOC + 120], rax
 mov [ALLOC + 128], r8
 mov rax, [locals + 16] ; _remove-dups_117^3937
 mov [ALLOC + 136], rax
 mov r11, ALLOC
 add ALLOC, 144
 mov rax, [locals + 24] ; _expand-template_118^3938
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_119^4115 = local #4
 mov [locals + 32], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_570
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [locals + 24] ; _expand-template_118^3938
 mov [ALLOC + 32], rax
 mov rax, [locals + 8] ; _make-bindings_116^3936
 mov [ALLOC + 40], rax
 mov rax, [locals + 32] ; _loop_119^4115
 mov [ALLOC + 48], rax
 mov rax, [locals + 0] ; _matches?_115^3935
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, [locals + 32] ; _loop_119^4115
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 32] ; _loop_119^4115
 mov rax, [rax + 8]
; t3321 = local #5
 mov [locals + 40], rax
 mov rcx, [SELF + 88]
 mov SELF, [locals + 40] ; t3321
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_570
f_570:
; ((_rules_120^4116 . rdx) (k3323 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4166
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4168 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_417
L4166:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rule_121^4118 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4122 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pat_122^4120 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4126 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _tmpl_123^4124 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3270
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_550
L4167:
f_3270:
; ((t3324 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4169
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3271
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_554
L4169:
 sub rsp, 24
 mov rax, [SELF + 56]
; _x_44^4128 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_570
L4170:
f_3271:
; ((t3325 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_560
f_560:
; ((_top-bindings_121^4056 . rdi) (_tmpl_120^4055 . rsi) (_pat_119^4054 . rdx) (k3277 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _tmpl-literals_122^4057 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis-vars_123^4058 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _list-ellipsis-vars_124^4059 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand_125^4060 = r12
 mov r12, rax
 sub rsp, 24
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_561
 mov [ALLOC + 16], rdi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693977
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3268
 mov rax, [SELF + 136]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov rax, [SELF + 128]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r9
 mov rax, [SELF + 120]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], r12
 mov rax, [SELF + 104]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 160], rax
 mov [ALLOC + 168], rdi
 mov [ALLOC + 176], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 184], rax
 mov [ALLOC + 192], rsi
 mov [ALLOC + 200], r10
 mov rax, ALLOC
 add ALLOC, 208
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, rsi
 SET_T rsi
 mov rdi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_548
f_3268:
; ((t3319 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693976
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3267
 mov rax, [SELF + 200]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 192]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 184]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 160], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 168], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 176], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 184], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 192], rax
 mov rax, ALLOC
 add ALLOC, 200
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_558
f_3267:
; ((t3317 . rcx))
 mov rax, [SELF + 192]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 32
 mov rax, [SELF + 184]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 176]
 mov [rsp + 8], rax
 mov rax, 2305843009213693974
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3266
 mov rax, [SELF + 168]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 192]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 160], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 168], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 176], rax
 mov rax, ALLOC
 add ALLOC, 184
 mov [rsp + 16], rax
 mov rax, [SELF + 168]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, FALSE
 mov rdi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_548
f_3266:
; ((t3315 . rcx))
 mov rax, [SELF + 176]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_562
 mov rax, [SELF + 176]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [SELF + 24]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_564
 mov rax, [SELF + 168]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 136], rax
 mov r11, ALLOC
 add ALLOC, 144
 mov rax, [SELF + 152]
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3264
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 152]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_564
f_3264:
; ((t3313 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3265
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _x_45^4114 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
 mov rsi, rax
 mov rdx, [SELF + 40]
 mov SELF, [____25_2b] ; %+
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3265:
; ((t3314 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_564:
; ((_bindings_127^4070 . rsi) (_tmpl_126^4069 . rdx) (k3284 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-part_128^4071 = rdi
 mov rdi, rax
 mov rax, 2305843009213693971
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_565
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdi
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rsi
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 152], rax
 mov r11, ALLOC
 add ALLOC, 160
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3285 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_565
f_565:
; ((_tmpl_129^4072 . rdx) (k3287 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693972
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3246
 mov rax, [SELF + 152]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 128]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rcx
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 160], rax
 mov rax, ALLOC
 add ALLOC, 168
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3246:
; ((t3288 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4171
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3247
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4171:
 mov rax, [SELF + 40]
; _x_44^4087 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4173
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3253
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 120]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4173:
 mov rax, [SELF + 40]
; _x_44^4088 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4175
 sub rsp, 24
 mov rax, [SELF + 40]
; _x_44^4089 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3254
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 160]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_546
L4175:
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4176:
L4174:
L4172:
f_3254:
; ((t3296 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4177
 sub rsp, 24
 mov rax, [SELF + 64]
; _x_44^4091 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3255
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_562
L4177:
 sub rsp, 24
 mov rax, [SELF + 64]
; _x_44^4112 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3262
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_565
L4178:
f_3262:
; ((t3311 . rcx))
; _x_45^4110 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^4113 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3263
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_565
f_3263:
; ((t3312 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3255:
; ((t3297 . rcx))
; _vars-to-iterate_130^4090 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
; _lookup_131^4092 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-using-vals_132^4093 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_566
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_567
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov [rsp + 0], rcx
 mov [rsp + 8], rsi
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3257
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov SELF, [___map] ; map
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3257:
; ((t3304 . rcx))
; _val-lists_133^4102 = rdx
 mov rdx, rcx
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4104 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_134^4103 = rsi
 mov rsi, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3258
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; t3308 = rdi
 mov rdi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4179
 mov SELF, rdi
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3258
L4179:
 mov SELF, [___map] ; map
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_569
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3261
 mov [ALLOC + 16], rdi
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4180:
f_3261:
; ((t3309 . rcx))
 mov rdx, [____25_3d] ; %=
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_569:
; ((_x_45^4106 . rdx) (k3310 . rcx))
 mov SELF, rcx
 mov rax, rdx
 CALL list_length
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3258:
; ((t3305 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4181
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3259
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [___map] ; map
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov rdi, [SELF + 48]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4181:
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov [rsp + 16], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, L4183 ; 
 mov rdi, L4184 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4182:
f_3259:
; ((t3306 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^4107 = rdx
 mov rdx, rax
; _x_44^4109 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4108 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3260
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_565
f_3260:
; ((t3307 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_567:
; ((_vals_133^4098 . rdx) (k3301 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3256
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rsi, [SELF + 32]
 mov SELF, [___map] ; map
 mov rdi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_568
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_568:
; ((_y_46^4101 . rsi) (_x_45^4100 . rdx) (k3303 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3256:
; ((t3302 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^4099 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_564
f_566:
; ((_var_133^4094 . rdx) (k3299 . rcx))
 mov rax, [SELF + 16]
; _lst_46^4097 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eqv
; _x_44^4095 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3253:
; ((t3295 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3252
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_565
f_3252:
; ((t3294 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_422
f_3247:
; ((t3289 . rcx))
 mov rax, [SELF + 88]
; _lst_46^4076 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL assoc_eqv
; _tmp_131^4074 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4185
 sub rsp, 8
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4185:
 mov rax, [SELF + 16]
; _lst_46^4080 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, rsi
 CALL assoc_eqv
; _tmp_132^4078 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4187
 sub rsp, 8
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4187:
 mov rdx, -1 ; '-1
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _lst_46^4086 = rdi
 mov rdi, rax
 mov rax, rcx
 mov r11, rdi
 CALL member_eqv
; _x_45^4084 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL list_length
 mov rsi, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3248
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4188:
L4186:
f_3248:
; ((t3290 . rcx))
; _index_133^4082 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3249
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
f_3249:
; ((t3291 . rcx))
; _location_134^4083 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3250
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_424
f_3250:
; ((t3292 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3251
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3251:
; ((t3293 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_423
f_562:
; ((_subtmpl_126^4065 . rdx) (k3281 . rcx))
 sub rsp, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_563
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 SET_T rsi
 mov rdi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_548
f_563:
; ((_id_127^4066 . rdx) (k3282 . rcx))
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _lst_46^4068 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 CALL member_eqv
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_561:
; ((_id_126^4061 . rdx) (k3320 . rcx))
 mov rax, [SELF + 16]
; _lst_46^4064 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eqv
; _x_44^4062 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 mov rcx, r11
 cmp rax, FALSE
 cmove rcx, r15
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_558:
; ((_l_119^4042 . rdx) (k3272 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_120^4043 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_559
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3273 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_559
f_559:
; ((_result_122^4045 . rsi) (_l_121^4044 . rdx) (k3275 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4189
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4189:
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _elt_123^4048 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 CALL member_eqv
 cmp rax, FALSE
 je L4191
 mov rax, rsi
 jmp L4192
L4191:
 mov rax, rdi
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
L4192:
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_559
L4190:
f_554:
; ((_pat_119^4011 . rdx) (k3243 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _collect_120^4012 = rsi
 mov rsi, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_555
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3244 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 88]
; _x_44^4041 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, rdi
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_555
f_555:
; ((_bindings_123^4015 . rdi) (_sexp_122^4014 . rsi) (_pat_121^4013 . rdx) (k3246 . rcx))
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3222
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 80]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; t3267 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3239
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3239:
; ((t3268 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4193
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3241
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4193:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3222
L4194:
f_3241:
; ((t3270 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3240
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_544
f_3240:
; ((t3269 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_3222
f_3222:
; ((t3247 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4195
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3223
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4195:
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3224
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_420
L4196:
f_3224:
; ((t3249 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4197
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3225
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4197:
 mov rax, [SELF + 56]
; _x_44^4018 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^4017 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L4199
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4199:
 sub rsp, 24
 mov rax, [SELF + 56]
; _x_44^4019 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3227
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_546
L4200:
L4198:
f_3227:
; ((t3252 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4201
 mov rax, [SELF + 16]
; _x_44^4022 = rdx
 mov rdx, rax
; _x_44^4024 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4023 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^4021 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL list_length
; _tail-len_124^4020 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, [SELF + 64]
; _x_45^4026 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL list_length
 mov [rsp + 8], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3237
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 16], rax
 mov SELF, [____25_2d] ; %-
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4201:
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
; _x_44^4040 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^4039 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3238
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_555
L4202:
f_3238:
; ((t3266 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _x_44^4038 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^4037 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_555
f_3237:
; ((t3265 . rcx))
 mov rdx, [SELF + 72]
 mov rsi, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3228
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov SELF, [___list_2dtail] ; list-tail
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3228:
; ((t3253 . rcx))
; _tail_125^4025 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3236
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 72]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3236:
; ((t3264 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3235
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rsi, [SELF + 16]
 mov SELF, [___list_2dtail] ; list-tail
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3235:
; ((t3263 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3229
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3229:
; ((t3254 . rcx))
; _matches_126^4027 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_44^4029 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3230
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 SET_T rsi
 mov rdi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_548
f_3230:
; ((t3255 . rcx))
; _vars_127^4028 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
; _collect1_128^4030 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_556
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov rsi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3234
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, rsi
 mov rsi, [SELF + 40]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3234:
; ((t3262 . rcx))
 mov rdx, [___map] ; map
 mov rsi, [____25list] ; %list
 mov rdi, [SELF + 56]
 mov r8, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3232
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3232:
; ((t3260 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
; _x_44^4034 = rdx
 mov rdx, rax
; _x_44^4036 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4035 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3233
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_555
f_3233:
; ((t3261 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_556:
; ((_match_129^4031 . rdx) (k3257 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
; _x_44^4033 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3231
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, null ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_555
f_3231:
; ((t3259 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_557
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_557:
; ((_x_44^4032 . rdx) (k3258 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3225:
; ((t3250 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3226
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
f_3226:
; ((t3251 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_555
f_3223:
; ((t3248 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_448
f_550:
; ((_pat_119^3971 . rdx) (k3218 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _match_120^3972 = rsi
 mov rsi, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_551
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3219 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 88]
; _x_44^4010 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_551
f_551:
; ((_sexp_122^3974 . rsi) (_pat_121^3973 . rdx) (k3221 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3205
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 112], rax
 mov rax, ALLOC
 add ALLOC, 120
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3205:
; ((t3222 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4203
 sub rsp, 24
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3211
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4203:
 sub rsp, 24
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3212
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_420
L4204:
f_3212:
; ((t3229 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4205
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3213
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_420
L4205:
 mov rax, [SELF + 48]
; _x_44^3980 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^3979 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L4207
 mov rax, [SELF + 48]
; _x_44^3981 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_45^3982 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 CALL recursively_equal
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4207:
 sub rsp, 24
 mov rax, [SELF + 48]
; _x_44^3983 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3216
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_546
L4208:
L4206:
f_3216:
; ((t3233 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4209
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _skip_123^3984 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_552
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t3234 = rsi
 mov rsi, rax
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^4002 = rdi
 mov rdi, rax
; _x_44^4004 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4003 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov [rsp + 24], rsi
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_552
L4209:
 mov rax, [SELF + 24]
; _x_44^4005 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4211
 sub rsp, 32
 mov rax, [SELF + 24]
; _x_44^4007 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^4006 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3220
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_551
L4211:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4212:
L4210:
f_3220:
; ((t3241 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4213
 sub rsp, 32
 mov rax, [SELF + 40]
; _x_44^4009 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^4008 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_551
L4213:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4214:
f_552:
; ((_s_125^3986 . rsi) (_p_124^3985 . rdx) (k3236 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4215
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4217
 sub rsp, 32
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_552
L4217:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4218:
L4215:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _match-cars_126^3991 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_553
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3237 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov rdx, [SELF + 40]
 mov SELF, r8
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_553
L4216:
f_553:
; ((_s_128^3993 . rsi) (_sexp_127^3992 . rdx) (k3239 . rcx))
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4219
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^3995 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3219
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_551
L4219:
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
; _x_44^3999 = rdi
 mov rdi, rax
; _x_44^4001 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^4000 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_551
L4220:
f_3219:
; ((t3240 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4221
 sub rsp, 32
 mov rax, [SELF + 40]
; _x_44^3998 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^3997 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_553
L4221:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4222:
f_3213:
; ((t3230 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4223
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3214
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4223:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4224:
f_3214:
; ((t3231 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3215
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
f_3215:
; ((t3232 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_551
f_3211:
; ((t3228 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3210
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_544
f_3210:
; ((t3227 . rcx))
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t3223 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4225
 sub rsp, 8
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rcx, rdx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4225:
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3207
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
L4226:
f_3207:
; ((t3224 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4227
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3208
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
L4227:
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4228:
f_3208:
; ((t3225 . rcx))
; _x_44^3977 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3209
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
f_3209:
; ((t3226 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 CALL structurally_equal
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_548:
; ((_pred?_121^3954 . rdi) (_include-scalars_120^3953 . rsi) (_x_119^3952 . rdx) (k3205 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _collect_122^3955 = r8
 mov r8, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_549
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t3206 = r9
 mov r9, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r9
 mov rdi, null ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_549
f_549:
; ((_l_125^3958 . rdi) (_inc_124^3957 . rsi) (_x_123^3956 . rdx) (k3208 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3197
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3197:
; ((t3209 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4229
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3198
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4229:
 mov rax, [SELF + 56]
; _x_44^3962 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4231
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3200
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4231:
 mov rax, [SELF + 56]
; _x_44^3963 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4233
 sub rsp, 24
 mov rax, [SELF + 56]
; _x_44^3964 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3201
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_546
L4233:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4234:
L4232:
L4230:
f_3201:
; ((t3214 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4235
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
; _x_44^3966 = rdx
 mov rdx, rax
; _x_44^3968 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3967 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3202
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_549
L4235:
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
; _x_44^3970 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3203
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_549
L4236:
f_3203:
; ((t3216 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^3969 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_549
f_3202:
; ((t3215 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
; _x_44^3965 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 SET_T rsi
 mov rdi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 5 ; 
 jmp f_549
f_3200:
; ((t3213 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_549
f_3198:
; ((t3210 . rcx))
; _id_126^3959 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3199
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t3212 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
 cmp rax, FALSE
 je L4237
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rdx, rcx
 mov rcx, rsi
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4237:
 mov SELF, rsi
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3199
L4238:
f_3199:
; ((t3211 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4239
 mov rax, [SELF + 16]
; _x_45^3960 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^3961 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4239:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4240:
f_547:
; ((_x_119^3947 . rdx) (k3200 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3193
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3193:
; ((t3201 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4241
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4243
 mov rax, [SELF + 16]
; _x_44^3948 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3194
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4243:
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3195
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
L4244:
L4241:
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4242:
f_3195:
; ((t3203 . rcx))
 sub rsp, 16
 mov rax, L4245 ; 
 mov r11, rcx
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3194:
; ((t3202 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 CALL structurally_equal
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_546:
; ((_x_119^3944 . rdx) (k3198 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4246
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_547
L4246:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4247:
f_545:
; ((_id_119^3942 . rdx) (k3195 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3192
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_544
f_3192:
; ((t3196 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_544:
; ((_id_119^3939 . rdx) (k3193 . rcx))
 mov rax, [SELF + 16]
; _lst_46^3941 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 CALL member_eqv
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_519:
; ((_env_100^3722 . rsi) (_synrules_99^3721 . rdx) (k3043 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis-id_101^3723 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis?_102^3724 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _check-lit_103^3725 = r9
 mov r9, rax
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3186
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 104], rax
 mov [ALLOC + 112], r9
 mov rax, [SELF + 88]
 mov [ALLOC + 120], rax
 mov [ALLOC + 128], rdx
 mov [ALLOC + 136], rdi
 mov rax, ALLOC
 add ALLOC, 144
; t3184 = r10
 mov r10, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3728 = r12
 mov r12, rax
 mov rax, r12
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3726 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4248
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3731 = r12
 mov r12, rax
 mov rax, r12
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3187
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
L4248:
 mov SELF, r10
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3186
L4249:
f_3187:
; ((t3185 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4250
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^3733 = rdx
 mov rdx, rax
; _x_44^3735 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3734 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_425
L4250:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3186
L4251:
f_3186:
; ((t3182 . rcx))
 mov rax, [SELF + 136]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_520
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [SELF + 48]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_521
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, [SELF + 112]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 cmp rax, FALSE
 je L4252
 mov rax, [SELF + 128]
; _x_44^3744 = rdx
 mov rdx, rax
; _x_44^3746 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3745 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4253
L4252:
 mov rax, [SELF + 128]
; _x_44^3747 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4253:
; _rest_104^3743 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pat-literal-sids_105^3748 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rules_106^3750 = rdi
 mov rdi, rax
 mov rax, 2305843009213693970
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3185
 mov rax, [SELF + 112]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, [SELF + 136]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 136], rax
 mov [ALLOC + 144], rsi
 mov rcx, ALLOC
 add ALLOC, 152
 mov SELF, [___list_3f] ; list?
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3185:
; ((t3180 . rcx))
 mov rax, 2305843009213693970
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3183
 mov rax, [SELF + 144]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 144], rax
 mov rax, ALLOC
 add ALLOC, 152
; t3181 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4254
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3183
L4254:
 sub rsp, 16
 mov rax, [SELF + 144]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L4256 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4255:
f_3183:
; ()
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3184
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 136], rax
 mov rcx, ALLOC
 add ALLOC, 144
 mov rdx, [SELF + 144]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3184:
; ()
 mov rax, 2305843009213693968
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3112
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 128], rax
 mov rcx, ALLOC
 add ALLOC, 136
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3112:
; ((t3056 . rcx))
; _pat-literals_107^3752 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis-pair?_108^3754 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _check-ellipses_109^3755 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-pat-env_110^3756 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _check-var-depths_111^3757 = r9
 mov r9, rax
 mov rax, undefined ; 
; _check-rule_112^3758 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _reduce-env_113^3759 = r12
 mov r12, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_522
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_523
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_530
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 64], rax
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_532
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_538
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r9
 mov [ALLOC + 72], rdi
 mov rax, [SELF + 112]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov r10, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_540
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 64], rax
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3182
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov [ALLOC + 48], rdx
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, r10
 mov rsi, [SELF + 88]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3182:
; ((t3177 . rcx))
 mov rdx, [___append] ; append
 mov rsi, [SELF + 48]
 mov rdi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3180
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3180:
; ((t3175 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3181
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_540
f_3181:
; ((t3176 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_438
f_540:
; ((_lits_114^3877 . rdx) (k3161 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _list-dots-ids_115^3878 = rsi
 mov rsi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_541
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_116^3889 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_542
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3170 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3179
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r8
 mov rax, ALLOC
 add ALLOC, 32
; t3172 = r9
 mov r9, rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 cmp rax, FALSE
 je L4257
 mov SELF, r9
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3179
L4257:
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, rsi
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rcx, r9
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_541
L4258:
f_3179:
; ((t3171 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_542
f_542:
; ((_reduced-env_118^3891 . rsi) (_ids_117^3890 . rdx) (k3174 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4259
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4259:
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _id_119^3894 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 CALL assoc_eqv
; _x_44^3897 = r8
 mov r8, rax
 mov rax, r8
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L4261
 mov rax, [SELF + 16]
; _lst_46^3901 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 CALL assoc_eqv
 jmp L4262
L4261:
 mov rax, FALSE
L4262:
; _tmp_120^3896 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L4263
 mov rax, r8
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L4264
L4263:
 mov rax, rsi
L4264:
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_542
L4260:
f_541:
; ((_ids_117^3880 . rsi) (_x_116^3879 . rdx) (k3163 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3172
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3172:
; ((t3164 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4265
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3175
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_426
L4265:
 mov rax, [SELF + 40]
; _x_44^3885 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4267
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3176
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4267:
 mov rax, [SELF + 40]
; _x_44^3886 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4269
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^3888 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3177
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_541
L4269:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4270:
L4268:
L4266:
f_3177:
; ((t3169 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^3887 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_541
f_3176:
; ((t3168 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_541
f_3175:
; ((t3167 . rcx))
 mov rax, L4271 ; 
 mov r11, rcx
 cmp rax, r11
 jne L4272
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3174
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4272:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4273:
f_3174:
; ((t3166 . rcx))
 mov rax, [SELF + 24]
; _y_46^3884 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_538:
; ((_rule_114^3854 . rdx) (k3138 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3171
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_428
f_3171:
; ((t3158 . rcx))
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3156
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; t3159 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4274
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3156
L4274:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L4276 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4275:
f_3156:
; ()
 mov rax, [SELF + 88]
; _x_44^3858 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pat_115^3856 = rcx
 mov rcx, rax
 mov rax, [SELF + 88]
; _x_44^3859 = rdx
 mov rdx, rax
; _x_44^3861 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3860 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _tmpl_116^3857 = rdx
 mov rdx, rax
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3170
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rcx
 mov rax, ALLOC
 add ALLOC, 104
; t3157 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4277
 sub rsp, 8
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rcx, rsi
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
L4277:
 mov SELF, rsi
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3170
L4278:
f_3170:
; ((t3155 . rcx))
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3157
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; t3156 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4279
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3157
L4279:
 sub rsp, 16
 mov rax, [SELF + 96]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L4281 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4280:
f_3157:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3158
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_523
f_3158:
; ()
 sub rsp, 24
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3159
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 SET_T rsi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_523
f_3159:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3160
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_530
f_3160:
; ((t3143 . rcx))
; _pat-env_117^3865 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3161
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_532
f_3161:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _collect_118^3866 = rcx
 mov rcx, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_539
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t3145 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_539
f_539:
; ((_lits_120^3868 . rsi) (_x_119^3867 . rdx) (k3147 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3163
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
f_3163:
; ((t3148 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4282
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4282:
 sub rsp, 24
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3164
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
L4283:
f_3164:
; ((t3149 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4284
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3167
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4284:
 mov rax, [SELF + 32]
; _x_44^3873 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4286
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3168
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4286:
 mov rax, [SELF + 32]
; _x_44^3874 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4288
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_44^3876 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3169
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_539
L4288:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4289:
L4287:
L4285:
f_3169:
; ((t3154 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^3875 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_539
f_3168:
; ((t3153 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_539
f_3167:
; ((t3152 . rcx))
 mov rax, [SELF + 48]
; _lst_46^3870 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL assoc_eqv
; t3150 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4290
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4290:
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3166
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4291:
f_3166:
; ((t3151 . rcx))
 mov rax, [SELF + 24]
; _y_46^3872 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_532:
; ((_pat-env_115^3823 . rsi) (_tmpl_114^3822 . rdx) (k3112 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _depth-error_116^3824 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _close-error_117^3825 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_533
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_534
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _collect_118^3828 = r9
 mov r9, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_535
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov [ALLOC + 72], rdi
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t3117 = r10
 mov r10, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r10
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_535
f_535:
; ((_depth_120^3830 . rsi) (_x_119^3829 . rdx) (k3119 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3144
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3144:
; ((t3120 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4292
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3148
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4292:
 mov rax, [SELF + 32]
; _x_44^3841 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4294
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3149
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4294:
 mov rax, [SELF + 32]
; _x_44^3842 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4296
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^3844 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3150
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_522
L4296:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4297:
L4295:
L4293:
f_3150:
; ((t3127 . rcx))
; _ellip?_121^3843 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3155
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t3136 = rsi
 mov rsi, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4298
 mov rcx, rsi
 mov rdx, 3 ; '1
 mov rsi, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4298:
 mov rcx, [SELF + 16]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3155
L4299:
f_3155:
; ((t3135 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^3846 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3151
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_535
f_3151:
; ((t3128 . rcx))
; _car-closed?_122^3845 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3154
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 cmp rax, FALSE
 je L4300
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_536
 mov rax, ALLOC
 add ALLOC, 16
 jmp L4301
L4300:
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_537
 mov rax, ALLOC
 add ALLOC, 16
L4301:
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_537:
; ((_x_44^3851 . rdx) (k3134 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_536:
; ((_x_44^3848 . rdx) (k3133 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3849 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3154:
; ((t3132 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3152
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_535
f_3152:
; ((t3129 . rcx))
; _cdr-closed?_123^3847 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3153
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t3131 = rsi
 mov rsi, rax
 mov rax, [SELF + 48]
 cmp rax, FALSE
 je L4302
 mov rax, [SELF + 24]
; _x_44^3852 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L4304
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rsi
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_534
L4304:
 mov SELF, rsi
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3153
L4305:
L4302:
 mov SELF, rsi
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3153
L4303:
f_3153:
; ()
 mov rax, [SELF + 32]
; _x_124^3853 = rcx
 mov rcx, rax
 sub rsp, 16
 mov rax, rcx
 mov r11, rcx
 mov r15, [SELF + 24]
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3149:
; ((t3126 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_535
f_3148:
; ((t3125 . rcx))
 mov rax, [SELF + 48]
; _lst_46^3833 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL assoc_eqv
; t3121 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4306
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pat-depth_122^3834 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3146
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [____25_3d] ; %=
 mov rsi, rdi
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4306:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4307:
f_3146:
; ((t3122 . rcx))
; _same-depth?_123^3836 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3147
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t3124 = rsi
 mov rsi, rax
 mov rax, [SELF + 40]
; _x_44^3837 = rdi
 mov rdi, rax
; _x_44^3838 = r8
 mov r8, rdi
 mov rax, r8
 test rax, 1
 SET_T rax
 cmove rax, FALSE
 cmp rax, FALSE
 je L4308
 mov rax, rdi
 mov r11, 1 ; '0
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L4309
L4308:
 sub rsp, 8
 mov rax, rdi
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4310
 sub rsp, 8
 mov rax, rdi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L4311
L4310:
 mov rax, FALSE
L4311:
L4309:
 cmp rax, FALSE
 je L4312
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 jmp L4313
L4312:
 mov rax, FALSE
L4313:
 cmp rax, FALSE
 je L4314
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rsi
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_533
L4314:
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3147
L4315:
f_3147:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_534:
; ((_x_118^3827 . rdx) (k3116 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, rdx
 mov rdx, L4316 ; 
 mov rdi, L4317 ; 
 mov r8, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 6 ; 
 jmp f_417
f_533:
; ((_x_118^3826 . rdx) (k3114 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, rdx
 mov rdx, L4318 ; 
 mov rdi, L4319 ; 
 mov r8, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 6 ; 
 jmp f_417
f_530:
; ((_pat_114^3802 . rdx) (k3100 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _collect_115^3803 = rsi
 mov rsi, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_531
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov r11, ALLOC
 add ALLOC, 88
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3101 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rsi, 1 ; '0
 mov rdi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_531
f_531:
; ((_l_118^3806 . rdi) (_depth_117^3805 . rsi) (_x_116^3804 . rdx) (k3103 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3136
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3136:
; ((t3104 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4320
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3137
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4320:
 mov rax, [SELF + 40]
; _x_44^3812 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4322
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3138
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4322:
 mov rax, [SELF + 40]
; _x_44^3813 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4324
 sub rsp, 24
 mov rax, [SELF + 40]
; _x_44^3814 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3139
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 104]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_522
L4324:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4325:
L4323:
L4321:
f_3139:
; ((t3107 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4326
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3140
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, 3 ; '1
 mov rsi, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4326:
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
; _x_44^3820 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3142
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_531
L4327:
f_3142:
; ((t3110 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^3819 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_531
f_3140:
; ((t3108 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
; _x_44^3816 = rdx
 mov rdx, rax
; _x_44^3818 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3817 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3141
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_531
f_3141:
; ((t3109 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^3815 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_531
f_3138:
; ((t3106 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_531
f_3137:
; ((t3105 . rcx))
 mov rax, [SELF + 72]
; _lst_46^3809 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL member_eqv
 cmp rax, FALSE
 je L4328
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4328:
 mov rax, [SELF + 24]
; _lst_46^3811 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL assoc_eqv
 cmp rax, FALSE
 je L4330
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, L4332 ; 
 mov rdi, L4333 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 6 ; 
 jmp f_417
L4330:
 sub rsp, 40
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_448
L4331:
L4329:
f_523:
; ((_in-template?_115^3764 . rsi) (_pat/tmpl_114^3763 . rdx) (k3060 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _bad-ellipsis_116^3765 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _multi-ellipsis-error_117^3766 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis/tail-error_118^3767 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ellipsis-follows_119^3768 = r10
 mov r10, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_524
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_525
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_526
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_527
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 cmp rax, FALSE
 je L4334
 mov rax, rdx
 jmp L4335
L4334:
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4335:
; _x_120^3775 = r12
 mov r12, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3115
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rcx
 mov [ALLOC + 88], r12
 mov rax, ALLOC
 add ALLOC, 96
; t3095 = local #0
 mov [locals + 0], rax
 mov rax, rsi
 cmp rax, FALSE
 je L4336
 sub rsp, 8
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3132
 mov [ALLOC + 16], r12
 mov [ALLOC + 24], r10
 mov rax, [locals + 0] ; t3095
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, r12
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
L4336:
 sub rsp, 16
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3133
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r10
 mov rax, [locals + 0] ; t3095
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r12
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
L4337:
f_3133:
; ((t3097 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4338
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4340 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4338:
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3134
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_522
L4339:
f_3134:
; ((t3098 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4341
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4343 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4341:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3115
L4342:
f_3132:
; ((t3096 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4344
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4346 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4344:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3115
L4345:
f_3115:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _check_121^3777 = rcx
 mov rcx, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_528
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov r11, ALLOC
 add ALLOC, 88
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t3072 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 88]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_528
f_528:
; ((_x_122^3778 . rdx) (k3074 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4347
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3117
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, ALLOC
 add ALLOC, 88
; t3090 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3128
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
L4347:
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3129
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_420
L4348:
f_3129:
; ((t3092 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4349
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3130
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4349:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4350:
f_3130:
; ((t3093 . rcx))
; _elts_123^3801 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3131
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_522
f_3131:
; ((t3094 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4351
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4353 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4351:
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_528
L4352:
f_3128:
; ((t3091 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4354
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4356 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4354:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3117
L4355:
f_3117:
; ()
 sub rsp, 24
 mov rax, [SELF + 80]
; _x_44^3781 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3118
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_528
f_3118:
; ()
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3119
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
; t3088 = rcx
 mov rcx, rax
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3782 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3127
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
f_3127:
; ((t3089 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4357
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4359 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4357:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3119
L4358:
f_3119:
; ()
 sub rsp, 24
 mov rax, [SELF + 80]
; _x_44^3783 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3120
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_522
f_3120:
; ((t3078 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4360
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3784 = rdx
 mov rdx, rax
; _x_44^3786 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3785 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3121
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
L4360:
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3800 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_528
L4361:
f_3121:
; ((t3079 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4362
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3787 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4364 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4362:
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3788 = rdx
 mov rdx, rax
; _x_44^3790 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3789 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3122
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_522
L4363:
f_3122:
; ((t3080 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4365
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3791 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4367 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_527
L4365:
 mov rax, [SELF + 72]
 cmp rax, FALSE
 je L4368
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3792 = rdx
 mov rdx, rax
; _x_44^3794 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3793 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_528
L4368:
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3126
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 16]
 mov SELF, [___list_3f] ; list?
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4369:
L4366:
f_3126:
; ((t3086 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3123
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t3087 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4370
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3123
L4370:
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_526
L4371:
f_3123:
; ()
 sub rsp, 8
 mov rax, [SELF + 40]
; _x_44^3797 = rcx
 mov rcx, rax
; _x_44^3799 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3798 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rcx, [SELF + 16]
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_529
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rdx, ALLOC
 add ALLOC, 48
 mov SELF, [___for_2deach] ; for-each
 mov rsi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_529:
; ((_y_123^3796 . rdx) (k3082 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3124
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t3084 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3125
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
f_3125:
; ((t3085 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4372
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_525
L4372:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3124
L4373:
f_3124:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_528
f_527:
; ((_thing_121^3774 . rsi) (_x_120^3773 . rdx) (k3069 . rcx))
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3114
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, L4374 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3114:
; ((t3070 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_524
f_526:
; ((_x_120^3772 . rdx) (k3067 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4375 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_524
f_525:
; ((_x_120^3771 . rdx) (k3065 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, L4376 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_524
f_524:
; ((_reason_121^3770 . rsi) (_x_120^3769 . rdx) (k3062 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3113
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, rsi
 mov rsi, L4377 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3113:
; ((t3063 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov r11, L4378 ; 
 mov r15, L4379 ; 
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_417
f_522:
; ((_x_114^3760 . rdx) (k3058 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4380
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_520
L4380:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4381:
f_521:
; ((_lit_104^3741 . rdx) (k3051 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3111
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3111:
; ((t3054 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3109
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t3055 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4382
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3109
L4382:
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rcx, rdx
 mov rdx, L4384 ; 
 mov rdi, L4385 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4383:
f_3109:
; ()
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3110
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_520
f_3110:
; ((t3053 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4386
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, L4388 ; 
 mov rdi, L4389 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 6 ; 
 jmp f_417
L4386:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4387:
f_520:
; ((_x_104^3736 . rdx) (k3046 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3106
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3106:
; ((t3047 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4390
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 cmp rax, FALSE
 je L4392
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _x_44^3737 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3107
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4392:
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3108
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
L4393:
L4390:
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4391:
f_3108:
; ((t3049 . rcx))
 sub rsp, 16
 mov rax, L4394 ; 
 mov r11, rcx
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3107:
; ((t3048 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 CALL structurally_equal
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_511:
; ((_k_102^3659 . r8) (_loc-n_101^3658 . rdi) (_store_100^3657 . rsi) (_forms_99^3656 . rdx) (k3017 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _finalize_103^3660 = r9
 mov r9, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_512
 mov [ALLOC + 16], r8
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand_104^3664 = r10
 mov r10, rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_513
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], r10
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t3021 = r12
 mov r12, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3095
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], r12
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_433
f_3095:
; ((t3022 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 40]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov [rsp + 40], rax
 mov rsi, 1 ; '0
 mov rdi, null ; 
 mov r10, null ; 
 mov r12, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 9 ; 
 jmp f_513
f_513:
; ((_k_111^3671 . r12) (_acc_110^3670 . r10) (_loc-n_109^3669 . r9) (_store_108^3668 . r8) (_env_107^3667 . rdi) (_id-n_106^3666 . rsi) (_sexps_105^3665 . rdx) (k3024 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4395
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r12
 mov rdx, r8
 mov rsi, r9
 mov rdi, r10
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L4395:
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_112^3673 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _ek_113^3675 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
; _dk_114^3676 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
; _bk_115^3677 = local #3
 mov [locals + 24], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_514
 mov [ALLOC + 16], r12
 mov [ALLOC + 24], r9
 mov [ALLOC + 32], rdi
 mov rax, [locals + 0] ; _rest_112^3673
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rsi
 mov [ALLOC + 64], r8
 mov [ALLOC + 72], r10
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, [locals + 8] ; _ek_113^3675
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_515
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov [ALLOC + 48], rdi
 mov rax, [locals + 0] ; _rest_112^3673
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 104], rax
 mov rax, [locals + 8] ; _ek_113^3675
 mov [ALLOC + 112], rax
 mov rax, ALLOC
 add ALLOC, 120
 mov [locals + 16], rax ; (set! _dk_114^3676 ...)
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_517
 mov [ALLOC + 16], r12
 mov [ALLOC + 24], rdi
 mov rax, [locals + 0] ; _rest_112^3673
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov rax, ALLOC
 add ALLOC, 64
 mov [locals + 24], rax ; (set! _bk_115^3677 ...)
 sub rsp, 56
 mov [rsp + 0], r9
 mov [rsp + 8], r8
 mov [rsp + 16], rdi
 mov [rsp + 24], rsi
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 32], rax
 mov [rsp + 40], rcx
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 SET_T r10
 mov r12, [locals + 8] ; _ek_113^3675
 mov r12, [r12 + 8]
 mov rax, FALSE
 mov [locals + 0], rax
 mov rax, [locals + 16] ; _dk_114^3676
 mov [locals + 8], rax
 mov rax, [locals + 24] ; _bk_115^3677
 mov [locals + 16], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_473
L4396:
f_517:
; ((_loc-n_120^3715 . r9) (_store_119^3714 . r8) (_env*_118^3713 . rdi) (_id-n*_117^3712 . rsi) (_sexp_116^3711 . rdx) (k3040 . rcx))
 sub rsp, 72
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_518
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov [rsp + 16], r9
 mov [rsp + 24], r8
 mov [rsp + 32], rdi
 mov [rsp + 40], rsi
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 48], rax
 mov [rsp + 56], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_513
f_518:
; ((_acc_123^3719 . rdi) (_loc-n_122^3718 . rsi) (_store_121^3717 . rdx) (k3041 . rcx))
 sub rsp, 72
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 48]
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov [rsp + 48], rax
 mov [rsp + 56], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov r11, 9 ; 
 jmp f_513
f_515:
; ((_loc-n_121^3686 . r10) (_store_120^3685 . r9) (_env*_119^3684 . r8) (_id-n*_118^3683 . rdi) (_sexp_117^3682 . rsi) (_builtin_116^3681 . rdx) (k3028 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693972
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3096
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 112]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 104]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rsi
 mov [ALLOC + 64], r8
 mov [ALLOC + 72], r10
 mov rax, [SELF + 96]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 144], rax
 mov [ALLOC + 152], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 160], rax
 mov rax, ALLOC
 add ALLOC, 168
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_428
f_3096:
; ((t3029 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4397
 sub rsp, 56
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 56]
; _x_44^3687 = rdx
 mov rdx, rax
; _x_44^3689 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3688 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 32], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3097
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 40], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_492
L4397:
 mov rax, [SELF + 56]
; _x_44^3691 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _tail_122^3690 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _sid_123^3692 = rsi
 mov rsi, rax
 sub rsp, 32
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693971
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3098
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 112], rax
 mov [ALLOC + 120], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 152], rax
 mov rax, ALLOC
 add ALLOC, 160
 mov [rsp + 16], rax
 mov rax, [SELF + 160]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
L4398:
f_3098:
; ((t3031 . rcx))
; _loc_124^3694 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^3696 = rsi
 mov rsi, rax
; _x_44^3698 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3697 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _init_125^3695 = rsi
 mov rsi, rax
 mov rax, [SELF + 152]
; _x_44^3699 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, L4399 ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4400
 sub rsp, 56
 mov rax, [SELF + 104]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 136]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov [rsp + 32], rsi
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3099
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 96], rax
 mov [ALLOC + 104], rdx
 mov rax, [SELF + 120]
 mov [ALLOC + 112], rax
 mov rax, ALLOC
 add ALLOC, 120
 mov [rsp + 40], rax
 mov rax, [SELF + 128]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_492
L4400:
 sub rsp, 64
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_516
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 0], rax
 mov rax, [SELF + 104]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov rax, [SELF + 136]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov [rsp + 40], rsi
 mov rax, [SELF + 72]
 mov [rsp + 48], rax
 mov rax, [SELF + 144]
 mov rax, [rax + 8]
 mov [rsp + 56], rax
 mov r10, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_489
L4401:
f_516:
; ((_loc-n_128^3709 . rdi) (_store_127^3708 . rsi) (_val_126^3707 . rdx) (k3037 . rcx))
 sub rsp, 40
 mov [rsp + 0], rdx
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov [rsp + 16], rsi
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3104
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 24], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_454
f_3104:
; ((t3038 . rcx))
 sub rsp, 72
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rax, [SELF + 64]
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
 mov [rsp + 48], rax
 mov rax, [SELF + 56]
 mov [rsp + 56], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov r11, 9 ; 
 jmp f_513
f_3099:
; ((t3032 . rcx))
; _expr_126^3701 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 112]
 mov [rsp + 0], rax
 mov rax, [SELF + 104]
 mov [rsp + 8], rax
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3100
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov [ALLOC + 104], rdx
 mov rax, ALLOC
 add ALLOC, 112
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_459
f_3100:
; ((t3033 . rcx))
; _var_127^3702 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3103
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rdx
 mov rax, [SELF + 96]
 mov [ALLOC + 104], rax
 mov rcx, ALLOC
 add ALLOC, 112
 mov rdx, L4402 ; 
 mov rdi, [SELF + 104]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3103:
; ((t3036 . rcx))
 mov rax, [SELF + 104]
; _y_46^3705 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t3034 = rsi
 mov rsi, rax
; _acc_128^3703 = rdi
 mov rdi, rsi
 sub rsp, 40
 mov rax, [SELF + 96]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov [rsp + 16], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3102
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 24], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_454
f_3102:
; ((t3035 . rcx))
 sub rsp, 72
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rax, [SELF + 64]
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
 mov [rsp + 48], rax
 mov rax, [SELF + 56]
 mov [rsp + 56], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov r11, 9 ; 
 jmp f_513
f_3097:
; ((t3030 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_514
f_514:
; ((_output_116^3678 . rdx) (k3026 . rcx))
 sub rsp, 72
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
; _y_46^3680 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rax, [SELF + 56]
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
 mov [rsp + 48], rax
 mov [rsp + 56], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_513
f_512:
; ((_acc_106^3663 . rdi) (_loc-n_105^3662 . rsi) (_store_104^3661 . rdx) (k3019 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3093
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3093:
; ((t3020 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_494:
; ((_bk_108^3520 . 2) (_dk_107^3519 . 1) (_sk_106^3518 . 0) (_ek_105^3517 . r12) (_lsd?_104^3516 . r10) (_loc-n_103^3515 . r9) (_store_102^3514 . r8) (_env_101^3513 . rdi) (_id-n_100^3512 . rsi) (_sexps_99^3511 . rdx) (k2957 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-def_109^3521 = local #3
 mov [locals + 24], rax
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_495
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [locals + 24] ; _expand-def_109^3521
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r12
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov r11, ALLOC
 add ALLOC, 104
 mov rax, [locals + 24] ; _expand-def_109^3521
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_110^3607 = local #4
 mov [locals + 32], rax
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_503
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [locals + 8] ; _dk_107^3519
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r12
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov rax, [locals + 0] ; _sk_106^3518
 mov [ALLOC + 56], rax
 mov rax, [locals + 16] ; _bk_108^3520
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov rax, [locals + 24] ; _expand-def_109^3521
 mov [ALLOC + 96], rax
 mov rax, [locals + 32] ; _loop_110^3607
 mov [ALLOC + 104], rax
 mov r11, ALLOC
 add ALLOC, 112
 mov rax, [locals + 32] ; _loop_110^3607
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 32] ; _loop_110^3607
 mov rax, [rax + 8]
; t2988 = local #5
 mov [locals + 40], rax
 sub rsp, 32
 mov [rsp + 0], rsi
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov [rsp + 24], rcx
 mov SELF, [locals + 40] ; t2988
 mov r12, rdi
 mov rdi, null ; 
 mov rax, r8
 mov [locals + 0], rax
 mov r8, null ; 
 mov rax, r9
 mov [locals + 8], rax
 mov r9, null ; 
 mov r10, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 11 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_503
f_503:
; ((_loc-n_119^3616 . 1) (_store_118^3615 . 0) (_env_117^3614 . r12) (_id-n_116^3613 . r10) (_exprs_115^3612 . r9) (_sds_114^3611 . r8) (_vds_113^3610 . rdi) (_rest_112^3609 . rsi) (_first_111^3608 . rdx) (k2990 . rcx))
 mov rax, undefined ; 
; _finish-body_120^3617 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693972
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_504
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rsi
 mov [ALLOC + 104], r9
 mov [ALLOC + 112], rdi
 mov rax, [SELF + 80]
 mov [ALLOC + 120], rax
 mov rax, [locals + 0] ; _store_118^3615
 mov [ALLOC + 128], rax
 mov [ALLOC + 136], r12
 mov rax, [SELF + 88]
 mov [ALLOC + 144], rax
 mov [ALLOC + 152], r10
 mov rax, [locals + 8] ; _loc-n_119^3616
 mov [ALLOC + 160], rax
 mov rax, ALLOC
 add ALLOC, 168
 mov [locals + 16], rax ; (set! _finish-body_120^3617 ...)
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L4403
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 16] ; _finish-body_120^3617
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_504
L4403:
 sub rsp, 96
 mov rax, [SELF + 32]
 mov r11, [locals + 16] ; _finish-body_120^3617
 mov r15, FALSE
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_510
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [locals + 8] ; _loc-n_119^3616
 mov [rsp + 16], rax
 mov rax, [locals + 0] ; _store_118^3615
 mov [rsp + 24], rax
 mov [rsp + 32], r12
 mov [rsp + 40], r10
 mov [rsp + 48], r9
 mov [rsp + 56], r8
 mov [rsp + 64], rdi
 mov [rsp + 72], rdx
 mov [rsp + 80], rcx
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 88], rax
 mov rax, [rsp + 0]
 mov [locals + 16], rax
 mov rax, [rsp + 8]
 mov [locals + 8], rax
 mov rax, [rsp + 16]
 mov [locals + 0], rax
 mov r12, [rsp + 24]
 mov r10, [rsp + 32]
 mov r9, [rsp + 40]
 mov r8, [rsp + 48]
 mov rdi, [rsp + 56]
 mov rsi, [rsp + 64]
 mov rdx, [rsp + 72]
 mov rcx, [rsp + 80]
 mov SELF, [rsp + 88]
 add rsp, 96
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_495
L4404:
f_510:
; ((_loc-n_127^3651 . r12) (_store_126^3650 . r10) (_env_125^3649 . r9) (_id-n_124^3648 . r8) (_exprs_123^3647 . rdi) (_sds_122^3646 . rsi) (_vds_121^3645 . rdx) (k3015 . rcx))
 sub rsp, 88
 mov [rsp + 0], r12
 mov [rsp + 8], r10
 mov [rsp + 16], r9
 mov [rsp + 24], r8
 mov [rsp + 32], rdi
 mov [rsp + 40], rsi
 mov [rsp + 48], rdx
 mov rax, [SELF + 16]
; _x_44^3653 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^3653
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 56], rax
 mov rax, [SELF + 16]
; _x_44^3652 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^3652
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 64], rax
 mov [rsp + 72], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 80], rax
 mov rax, [rsp + 0]
 mov [locals + 8], rax
 mov rax, [rsp + 8]
 mov [locals + 0], rax
 mov r12, [rsp + 16]
 mov r10, [rsp + 24]
 mov r9, [rsp + 32]
 mov r8, [rsp + 40]
 mov rdi, [rsp + 48]
 mov rsi, [rsp + 56]
 mov rdx, [rsp + 64]
 mov rcx, [rsp + 72]
 mov SELF, [rsp + 80]
 add rsp, 88
 mov r11, 11 ; 
 jmp f_503
f_504:
; ((_boundary-exp-output_121^3618 . rdx) (k2992 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693973
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3080
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rdx
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 144], rax
 mov [ALLOC + 152], rcx
 mov rax, [SELF + 152]
 mov [ALLOC + 160], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 168], rax
 mov rax, ALLOC
 add ALLOC, 176
 mov [rsp + 0], rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_505
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_505:
; ((_x_44^3619 . rdx) (k3014 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3080:
; ((t2993 . rcx))
 sub rsp, 72
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_506
 mov rax, [SELF + 136]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
 mov [rsp + 0], rax
 mov rax, [SELF + 168]
 mov [rsp + 8], rax
 mov rax, [SELF + 128]
 mov [rsp + 16], rax
 mov rax, [SELF + 136]
 mov [rsp + 24], rax
 mov rax, [SELF + 136]
 mov [rsp + 32], rax
 mov rax, [SELF + 160]
 mov [rsp + 40], rax
 mov [rsp + 48], rcx
 mov rax, [SELF + 152]
 mov [rsp + 56], rax
 mov rax, [SELF + 144]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_469
f_506:
; ((_loc-n_123^3621 . rsi) (_store_122^3620 . rdx) (k2994 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _iexpand_124^3622 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-vd_125^3623 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _make-letrec*_126^3624 = r9
 mov r9, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_507
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_508
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 136]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_509
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 112]
; _x_44^3637 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4405
 mov rax, [SELF + 128]
; _x_44^3638 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4407
 mov rax, [SELF + 120]
; _x_44^3639 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4408
L4407:
 mov rax, FALSE
L4408:
 jmp L4406
L4405:
 mov rax, FALSE
L4406:
 cmp rax, FALSE
 je L4409
 sub rsp, 96
 mov rax, [SELF + 88]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov [rsp + 24], rax
 mov rax, [SELF + 72]
 mov [rsp + 32], rax
 mov [rsp + 40], rsi
 mov [rsp + 48], rdx
 mov rax, [SELF + 16]
 mov [rsp + 56], rax
 mov rax, [SELF + 32]
 mov [rsp + 64], rax
 mov rax, [SELF + 56]
 mov [rsp + 72], rax
 mov [rsp + 80], rcx
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 88], rax
 mov rax, [rsp + 0]
 mov [locals + 16], rax
 mov rax, [rsp + 8]
 mov [locals + 8], rax
 mov rax, [rsp + 16]
 mov [locals + 0], rax
 mov r12, [rsp + 24]
 mov r10, [rsp + 32]
 mov r9, [rsp + 40]
 mov r8, [rsp + 48]
 mov rdi, [rsp + 56]
 mov rsi, [rsp + 64]
 mov rdx, [rsp + 72]
 mov rcx, [rsp + 80]
 mov SELF, [rsp + 88]
 add rsp, 96
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_473
L4409:
 sub rsp, 8
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3092
 mov rax, [SELF + 112]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov [ALLOC + 72], r9
 mov rax, [SELF + 96]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], r8
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 0], rax
 mov rdx, [SELF + 128]
 mov SELF, [___reverse] ; reverse
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4410:
f_3092:
; ((t3013 . rcx))
 mov rdx, [SELF + 88]
 mov rdx, [rdx + 8]
 mov rsi, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3084
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3084:
; ((t3004 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3086
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; t3010 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^3641 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4411
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3090
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_507
L4411:
 mov rax, [SELF + 24]
; _x_45^3642 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3091
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 48]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4412:
f_3091:
; ((t3012 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3086
f_3090:
; ((t3011 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3086:
; ((t3006 . rcx))
; _body-exprs-output_127^3640 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3089
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 64]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3089:
; ((t3009 . rcx))
 mov rdx, [SELF + 64]
 mov rdx, [rdx + 8]
 mov rsi, rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3088
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3088:
; ((t3008 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3087
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3087:
; ((t3007 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3085
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_460
f_3085:
; ((t3005 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3083
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_509
f_3083:
; ((t3003 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_509:
; ((_expr_128^3635 . rsi) (_bindings_127^3634 . rdx) (k3002 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4413
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4413:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25list] ; %list
 mov rdi, rsi
 mov rsi, rdx
 mov rdx, L4415 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L4414:
f_508:
; ((_vd_127^3626 . rdx) (k2998 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3628 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3081
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_451
f_3081:
; ((t2999 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3630 = rdx
 mov rdx, rax
; _x_44^3633 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3632 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3631 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3082
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_507
f_3082:
; ((t3000 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_507:
; ((_sexp_127^3625 . rdx) (k2996 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 7 ; 
 jmp f_492
f_495:
; ((_dek_119^3531 . 2) (_k_118^3530 . 1) (_loc-n_117^3529 . 0) (_store_116^3528 . r12) (_env_115^3527 . r10) (_id-n_114^3526 . r9) (_exprs_113^3525 . r8) (_sds_112^3524 . rdi) (_vds_111^3523 . rsi) (_sexp_110^3522 . rdx) (k2959 . rcx))
 mov rax, undefined ; 
; _dk_120^3532 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
; _bk_121^3533 = local #4
 mov [locals + 32], rax
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_496
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r8
 mov [ALLOC + 72], rsi
 mov rax, [locals + 8] ; _k_118^3530
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rdi
 mov rax, [SELF + 48]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [locals + 24], rax ; (set! _dk_120^3532 ...)
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_498
 mov rax, [locals + 8] ; _k_118^3530
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov [ALLOC + 56], rsi
 mov [ALLOC + 64], rdi
 mov rax, [locals + 16] ; _dek_119^3531
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [locals + 32], rax ; (set! _bk_121^3533 ...)
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, r9
 mov rdi, r10
 mov r8, r12
 mov r9, [locals + 0] ; _loc-n_117^3529
 mov r10, FALSE
 mov r12, [locals + 16] ; _dek_119^3531
 mov rax, FALSE
 mov [locals + 0], rax
 mov rax, [locals + 24] ; _dk_120^3532
 mov [locals + 8], rax
 mov rax, [locals + 32] ; _bk_121^3533
 mov [locals + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_473
f_498:
; ((_loc-n_126^3578 . r9) (_store_125^3577 . r8) (_env_124^3576 . rdi) (_id-n_123^3575 . rsi) (_sexp_122^3574 . rdx) (k2978 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_127^3579 = r10
 mov r10, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_499
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t2979 = r12
 mov r12, rax
 sub rsp, 88
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov [rsp + 8], r9
 mov [rsp + 16], r8
 mov [rsp + 24], rdi
 mov [rsp + 32], rsi
 mov rax, [SELF + 48]
 mov [rsp + 40], rax
 mov rax, [SELF + 64]
 mov [rsp + 48], rax
 mov rax, [SELF + 56]
 mov [rsp + 56], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 64], rax
 mov [rsp + 72], rcx
 mov [rsp + 80], r12
 mov rax, [rsp + 0]
 mov [locals + 8], rax
 mov rax, [rsp + 8]
 mov [locals + 0], rax
 mov r12, [rsp + 16]
 mov r10, [rsp + 24]
 mov r9, [rsp + 32]
 mov r8, [rsp + 40]
 mov rdi, [rsp + 48]
 mov rsi, [rsp + 56]
 mov rdx, [rsp + 64]
 mov rcx, [rsp + 72]
 mov SELF, [rsp + 80]
 add rsp, 88
 mov rax, [SELF + 8]
 mov r11, 11 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_499
f_499:
; ((_dek_136^3588 . 1) (_loc-n_135^3587 . 0) (_store_134^3586 . r12) (_env_133^3585 . r10) (_id-n_132^3584 . r9) (_exprs_131^3583 . r8) (_sds_130^3582 . rdi) (_vds_129^3581 . rsi) (_sexps_128^3580 . rdx) (k2981 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4416
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rsi, rdi
 mov rdi, r8
 mov r8, r9
 mov r9, r10
 mov r10, r12
 mov r12, [locals + 0] ; _loc-n_135^3587
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 jmp rax
L4416:
 sub rsp, 96
 mov rax, [locals + 8] ; _dek_136^3588
 cmp rax, FALSE
 je L4418
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_501
 mov rax, [locals + 0] ; _loc-n_135^3587
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], r12
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [locals + 8] ; _dek_136^3588
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 jmp L4419
L4418:
 mov rax, FALSE
L4419:
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_500
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [locals + 0] ; _loc-n_135^3587
 mov [rsp + 16], rax
 mov [rsp + 24], r12
 mov [rsp + 32], r10
 mov [rsp + 40], r9
 mov [rsp + 48], r8
 mov [rsp + 56], rdi
 mov [rsp + 64], rsi
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 72], rax
 mov [rsp + 80], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 88], rax
 mov rax, [rsp + 0]
 mov [locals + 16], rax
 mov rax, [rsp + 8]
 mov [locals + 8], rax
 mov rax, [rsp + 16]
 mov [locals + 0], rax
 mov r12, [rsp + 24]
 mov r10, [rsp + 32]
 mov r9, [rsp + 40]
 mov r8, [rsp + 48]
 mov rdi, [rsp + 56]
 mov rsi, [rsp + 64]
 mov rdx, [rsp + 72]
 mov rcx, [rsp + 80]
 mov SELF, [rsp + 88]
 add rsp, 96
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_495
L4417:
f_500:
; ((_loc-n_143^3597 . r12) (_store_142^3596 . r10) (_env_141^3595 . r9) (_id-n_140^3594 . r8) (_exprs_139^3593 . rdi) (_sds_138^3592 . rsi) (_vds_137^3591 . rdx) (k2982 . rcx))
 sub rsp, 80
 mov [rsp + 0], r12
 mov [rsp + 8], r10
 mov [rsp + 16], r9
 mov [rsp + 24], r8
 mov [rsp + 32], rdi
 mov [rsp + 40], rsi
 mov [rsp + 48], rdx
 mov rax, [SELF + 16]
; _x_44^3598 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_44^3598
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 56], rax
 mov [rsp + 64], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 72], rax
 mov rax, FALSE
 mov [locals + 8], rax
 mov rax, [rsp + 0]
 mov [locals + 0], rax
 mov r12, [rsp + 8]
 mov r10, [rsp + 16]
 mov r9, [rsp + 24]
 mov r8, [rsp + 32]
 mov rdi, [rsp + 40]
 mov rsi, [rsp + 48]
 mov rdx, [rsp + 56]
 mov rcx, [rsp + 64]
 mov SELF, [rsp + 72]
 add rsp, 80
 mov r11, 11 ; 
 jmp f_499
f_501:
; ((_out_137^3599 . rdx) (k2983 . rcx))
 mov rax, undefined ; 
; _expand-one_138^3600 = rsi
 mov rsi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_502
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3077
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, rsi
 mov rax, [SELF + 56]
; _x_44^3603 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___map] ; map
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3077:
; ((t2986 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_45^3604 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3078
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_460
f_3078:
; ((t2987 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_502:
; ((_sexp_139^3601 . rdx) (k2985 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 7 ; 
 jmp f_492
f_496:
; ((_loc-n_127^3539 . r10) (_store_126^3538 . r9) (_env_125^3537 . r8) (_id-n_124^3536 . rdi) (_sexp_123^3535 . rsi) (_builtin_122^3534 . rdx) (k2961 . rcx))
 mov rax, [SELF + 96]
; _x_128^3540 = r12
 mov r12, rax
 mov rax, 2305843009213693970
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3064
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov [ALLOC + 72], r10
 mov [ALLOC + 80], r8
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rsi
 mov rax, [SELF + 72]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 112], rax
 mov [ALLOC + 120], rcx
 mov rax, [SELF + 88]
 mov [ALLOC + 128], rax
 mov [ALLOC + 136], rdi
 mov [ALLOC + 144], r9
 mov rax, ALLOC
 add ALLOC, 152
; t2976 = local #0
 mov [locals + 0], rax
 mov rax, r12
 cmp rax, FALSE
 je L4420
 mov SELF, [locals + 0] ; t2976
 mov rcx, r12
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3064
L4420:
 mov rax, rdx
 mov r11, L4422 ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_129^3541 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_129^3541
 cmp rax, FALSE
 je L4423
 mov SELF, [locals + 0] ; t2976
 mov rcx, [locals + 8] ; _x_129^3541
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3064
L4423:
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [locals + 0] ; t2976
 mov rdx, L4425 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4424:
L4421:
f_3064:
; ()
 sub rsp, 24
 mov rax, [SELF + 96]
 mov [rsp + 0], rax
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3065
 mov rax, [SELF + 144]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_428
f_3065:
; ((t2963 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4426
 sub rsp, 72
 mov rax, [SELF + 88]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 64]
; _x_44^3546 = rdx
 mov rdx, rax
; _x_44^3548 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3547 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^3544 = rdx
 mov rdx, rax
 mov rax, [SELF + 72]
; _y_46^3545 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov [rsp + 40], rax
 mov rax, [SELF + 56]
 mov [rsp + 48], rax
 mov rax, [SELF + 40]
 mov [rsp + 56], rax
 mov rax, [SELF + 48]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4426:
 mov rax, [SELF + 64]
; _x_44^3550 = rdx
 mov rdx, rax
; _x_44^3552 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3551 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _sid_128^3549 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693970
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3066
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 96], rax
 mov [ALLOC + 104], rdx
 mov rax, [SELF + 136]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 144], rax
 mov rax, ALLOC
 add ALLOC, 152
 mov [rsp + 8], rax
 mov rax, [SELF + 136]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
L4427:
f_3066:
; ((t2964 . rcx))
; _id_129^3553 = rdx
 mov rdx, rcx
 sub rsp, 40
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 144]
 mov [rsp + 16], rax
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3067
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov [ALLOC + 112], rdx
 mov rax, [SELF + 112]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
 mov [rsp + 24], rax
 mov rax, [SELF + 136]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_452
f_3067:
; ((t2965 . rcx))
; _env_130^3554 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _check_131^3555 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_497
 mov rax, [SELF + 136]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693968
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3070
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 120], rax
 mov [ALLOC + 128], rsi
 mov rcx, ALLOC
 add ALLOC, 136
 mov rdx, rsi
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 48]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3070:
; ()
 mov rax, 2305843009213693967
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3071
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 120], rax
 mov rcx, ALLOC
 add ALLOC, 128
 mov rdx, [SELF + 128]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 56]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3071:
; ()
 mov rax, [SELF + 120]
; _key_132^3562 = rcx
 mov rcx, rax
; _x_44^3563 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, L4428 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4429
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3072
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov rdx, [SELF + 112]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4429:
; _x_44^3567 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, L4431 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4432
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 112]
 mov [rsp + 8], rax
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3073
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_458
L4432:
 sub rsp, 8
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4433:
L4430:
f_3073:
; ((t2973 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 96]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3074
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_453
f_3074:
; ((t2974 . rcx))
; _store_134^3570 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3075
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rcx, ALLOC
 add ALLOC, 88
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3075:
; ((t2975 . rcx))
 sub rsp, 72
 mov [rsp + 0], rcx
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 72]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 64]
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
; _x_45^3572 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^3573 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 48], rax
 mov rax, [SELF + 56]
 mov [rsp + 56], rax
 mov rax, [SELF + 48]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3072:
; ((t2972 . rcx))
 sub rsp, 72
 mov [rsp + 0], rcx
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 72]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 56]
; _x_45^3565 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _y_46^3566 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov [rsp + 48], rax
 mov rax, [SELF + 48]
 mov [rsp + 56], rax
 mov rax, [SELF + 40]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_497:
; ((_def_132^3556 . rdx) (k2967 . rcx))
 mov rax, [SELF + 40]
; _x_44^3557 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3560 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3069
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
f_3069:
; ((t2969 . rcx))
 mov rax, [SELF + 48]
 mov r11, rcx
 CALL structurally_equal
; t2968 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4434
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, L4436 ; 
 mov rdi, L4437 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 6 ; 
 jmp f_417
L4434:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4435:
f_492:
; ((_loc-n_103^3509 . r9) (_store_102^3508 . r8) (_env_101^3507 . rdi) (_id-n_100^3506 . rsi) (_sexp_99^3505 . rdx) (k2954 . rcx))
 sub rsp, 56
 mov [rsp + 0], r9
 mov [rsp + 8], r8
 mov [rsp + 16], rdi
 mov [rsp + 24], rsi
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r10, FALSE
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_493
 mov r12, ALLOC
 add ALLOC, 16
 mov rax, FALSE
 mov [locals + 0], rax
 mov rax, FALSE
 mov [locals + 8], rax
 mov rax, FALSE
 mov [locals + 16], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_473
f_493:
; ((_x_104^3510 . rdx) (k2955 . rcx))
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_489:
; ((_k_104^3499 . r10) (_loc-n_103^3498 . r9) (_store_102^3497 . r8) (_env_101^3496 . rdi) (_id-n_100^3495 . rsi) (_sexp_99^3494 . rdx) (k2949 . rcx))
 sub rsp, 64
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_490
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], r9
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov [rsp + 8], r9
 mov [rsp + 16], r8
 mov [rsp + 24], rdi
 mov [rsp + 32], rsi
 mov [rsp + 40], rdx
 mov [rsp + 48], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 56], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_491
 mov [ALLOC + 16], r10
 mov rax, ALLOC
 add ALLOC, 24
 mov [locals + 0], rax
 mov r10, FALSE
 mov rax, FALSE
 mov [locals + 8], rax
 mov rax, FALSE
 mov [locals + 16], rax
 mov r12, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_473
f_491:
; ((_loc-n_108^3504 . r8) (_store_107^3503 . rdi) (_syn_105^3501 . rdx) (k2952 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rsi, rdi
 mov rdi, r8
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_490:
; ((_output_105^3500 . rdx) (k2950 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3063
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_436
f_3063:
; ((t2951 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_473:
; ((_bk_108^3351 . 2) (_dk_107^3350 . 1) (_sk_106^3349 . 0) (_ek_105^3348 . r12) (_lsd?_104^3347 . r10) (_loc-n_103^3346 . r9) (_store_102^3345 . r8) (_env_101^3344 . rdi) (_id-n_100^3343 . rsi) (_sexp_99^3342 . rdx) (k2847 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _get-k_109^3352 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _get-ek_110^3353 = local #4
 mov [locals + 32], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _get-sk_111^3354 = local #5
 mov [locals + 40], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _get-dk_112^3355 = local #6
 mov [locals + 48], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _get-bk_113^3356 = local #7
 mov [locals + 56], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_474
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 24] ; _get-k_109^3352
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_475
 mov [ALLOC + 16], r12
 mov rax, [locals + 24] ; _get-k_109^3352
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 32] ; _get-ek_110^3353
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_476
 mov rax, [locals + 0] ; _sk_106^3349
 mov [ALLOC + 16], rax
 mov rax, [locals + 24] ; _get-k_109^3352
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 40] ; _get-sk_111^3354
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_477
 mov rax, [locals + 8] ; _dk_107^3350
 mov [ALLOC + 16], rax
 mov rax, [locals + 24] ; _get-k_109^3352
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 48] ; _get-dk_112^3355
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_478
 mov rax, [locals + 16] ; _bk_108^3351
 mov [ALLOC + 16], rax
 mov rax, [locals + 24] ; _get-k_109^3352
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 56] ; _get-bk_113^3356
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _again_114^3365 = local #8
 mov [locals + 64], rax
 mov rax, 2305843009213693985
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_479
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [locals + 64] ; _again_114^3365
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov rax, [locals + 8] ; _dk_107^3350
 mov [ALLOC + 104], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 112], rax
 mov [ALLOC + 120], r10
 mov rax, [locals + 0] ; _sk_106^3349
 mov [ALLOC + 128], rax
 mov rax, [locals + 16] ; _bk_108^3351
 mov [ALLOC + 136], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 160], rax
 mov [ALLOC + 168], r12
 mov rax, [locals + 32] ; _get-ek_110^3353
 mov [ALLOC + 176], rax
 mov rax, [locals + 48] ; _get-dk_112^3355
 mov [ALLOC + 184], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 192], rax
 mov rax, [locals + 56] ; _get-bk_113^3356
 mov [ALLOC + 200], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 208], rax
 mov rax, [locals + 40] ; _get-sk_111^3354
 mov [ALLOC + 216], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 224], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 232], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 240], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 248], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 256], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 264], rax
 mov r11, ALLOC
 add ALLOC, 272
 mov rax, [locals + 64] ; _again_114^3365
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 64] ; _again_114^3365
 mov rax, [rax + 8]
; t2859 = local #9
 mov [locals + 72], rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, [locals + 72] ; t2859
 mov rdi, r8
 mov r8, r9
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_479
f_479:
; ((_loc-n_118^3369 . r8) (_store_117^3368 . rdi) (_id-n_116^3367 . rsi) (_sexp_115^3366 . rdx) (k2861 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expand-subexpr_119^3370 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _handle-syntax-use_120^3371 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _handle-combination_121^3372 = r12
 mov r12, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_480
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rdi
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693983
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_481
 mov rax, [SELF + 264]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 256]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 248]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 240]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov rax, [SELF + 232]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 224]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 216]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 208]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 200]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 192]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 184]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 160], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 168], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 176], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 184], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 192], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 200], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 208], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 216], rax
 mov [ALLOC + 224], rsi
 mov rax, [SELF + 64]
 mov [ALLOC + 232], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 240], rax
 mov [ALLOC + 248], rdx
 mov r11, ALLOC
 add ALLOC, 256
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_488
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r9
 mov rax, [SELF + 168]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693971
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3051
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 216]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 248]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 232]
 mov [ALLOC + 112], rax
 mov [ALLOC + 120], r10
 mov [ALLOC + 128], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 136], rax
 mov [ALLOC + 144], r12
 mov rax, [SELF + 168]
 mov [ALLOC + 152], rax
 mov rax, ALLOC
 add ALLOC, 160
 mov [rsp + 8], rax
 mov rax, [SELF + 256]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_3051:
; ((t2934 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4438
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3052
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 24], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_451
L4438:
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3058
 mov rax, [SELF + 152]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 112], rax
 mov rax, ALLOC
 add ALLOC, 120
; t2947 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _x_44^3477 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4440
 mov rcx, rdx
 mov rdx, [SELF + 32]
 mov SELF, [___list_3f] ; list?
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4440:
 mov SELF, rdx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3058
L4441:
L4439:
f_3058:
; ((t2942 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4442
 sub rsp, 72
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [SELF + 24]
 mov r11, [r11 + 8]
 mov r15, FALSE
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 80]
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov [rsp + 32], rax
 mov rax, [SELF + 72]
 mov [rsp + 40], rax
 mov rax, [SELF + 48]
; _x_44^3478 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 48], rax
 mov rax, [SELF + 64]
 mov [rsp + 56], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r10, FALSE
 mov rax, FALSE
 mov [locals + 8], rax
 mov rax, FALSE
 mov [locals + 16], rax
 mov rax, [rsp + 0]
 mov [locals + 0], rax
 mov r12, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov r11, 12 ; 
 jmp f_473
L4442:
 mov rax, [SELF + 48]
; _x_44^3480 = rdx
 mov rdx, rax
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^3481 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4444
 mov rax, rsi
 jmp L4445
L4444:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L4445:
; _x_122^3479 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4446
 mov rax, rdx
 jmp L4447
L4446:
 mov rax, [SELF + 48]
; _x_44^3483 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_123^3482 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4448
 mov rax, rsi
 jmp L4449
L4448:
 mov rax, [SELF + 48]
; _x_44^3485 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_124^3484 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L4450
 mov rax, rdi
 jmp L4451
L4450:
 mov rax, [SELF + 48]
; _x_44^3487 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_125^3486 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L4452
 mov rax, r8
 jmp L4453
L4452:
 mov rax, [SELF + 48]
; _x_44^3488 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, r9
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L4453:
L4451:
L4449:
L4447:
 cmp rax, FALSE
 je L4454
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3059
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_475
L4454:
 mov rax, [SELF + 48]
; _x_44^3490 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_122^3489 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4456
 mov rax, rdx
 jmp L4457
L4456:
 mov rax, [SELF + 48]
; _x_44^3491 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 37 ; '18
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L4457:
 cmp rax, FALSE
 je L4458
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3060
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_475
L4458:
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_44^3492 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4460
 mov rax, L4462 ; 
 jmp L4461
L4460:
 sub rsp, 8
 mov rax, [SELF + 48]
; _x_44^3493 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 mov [rsp + 0], rax
 mov r11, L4463 ; 
 mov r15, L4464 ; 
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4461:
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov [rsp + 16], rax
 mov rax, [SELF + 112]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, L4465 ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4459:
L4455:
L4443:
f_3060:
; ((t2944 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3062
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_435
f_3062:
; ((t2946 . rcx))
 mov rdx, L4466 ; 
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3061
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3061:
; ((t2945 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3059:
; ((t2943 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3052:
; ((t2935 . rcx))
; _val_122^3476 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3053
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_442
f_3053:
; ((t2936 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4467
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3054
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_476
L4467:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3055
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_475
L4468:
f_3055:
; ((t2938 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3056
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t2940 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3057
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_440
f_3057:
; ((t2941 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4469
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_441
L4469:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_3056
L4470:
f_3056:
; ((t2939 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3054:
; ((t2937 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov [rsp + 40], rcx
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_488:
; ((_output_122^3458 . rdx) (k2930 . rcx))
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3049
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t2932 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4471
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^3461 = rdi
 mov rdi, rax
 mov rax, L4473 ; 
 mov r11, rdi
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4474
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3465 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3463 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4476
 mov rax, [SELF + 16]
; _x_44^3468 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3467 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4477
L4476:
 mov rax, FALSE
L4477:
 jmp L4475
L4474:
 mov rax, FALSE
L4475:
 jmp L4472
L4471:
 mov rax, FALSE
L4472:
 cmp rax, FALSE
 je L4478
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3471 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3470 = rdi
 mov rdi, rax
 mov SELF, rsi
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3049
L4478:
; _x_45^3473 = rdi
 mov rdi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3050
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov rax, [SELF + 16]
; _x_44^3475 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4479:
f_3050:
; ((t2933 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3049
f_3049:
; ((t2931 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_481:
; ((_loc-n_125^3377 . r8) (_store_124^3376 . rdi) (_head_123^3375 . rsi) (_syntax_122^3374 . rdx) (k2865 . rcx))
 mov rax, [SELF + 248]
; _x_44^3379 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _tail_126^3378 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _sexp_127^3380 = r10
 mov r10, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693987
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3006
 mov rax, [SELF + 240]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 232]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 224]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, [SELF + 216]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], r8
 mov rax, [SELF + 208]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 200]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 192]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 184]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 160], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 168], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 176], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 184], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 192], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 200], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 208], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 216], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 224], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 232], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 240], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 248], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 256], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 264], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 272], rax
 mov [ALLOC + 280], r9
 mov rax, ALLOC
 add ALLOC, 288
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_445
f_3006:
; ((t2866 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4480
 sub rsp, 56
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_482
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 48]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_543
L4480:
 sub rsp, 24
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rax, 2305843009213693983
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3007
 mov rax, [SELF + 280]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 272]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 264]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 256]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 248]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 240]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 232]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 224]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 216]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 208]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 200]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 192]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 184]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 160], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 168], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 176], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 184], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 192], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 200], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 208], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 216], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 224], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 232], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 240], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 248], rax
 mov rax, ALLOC
 add ALLOC, 256
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_444
L4481:
f_3007:
; ((t2868 . rcx))
; _builtin_128^3385 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_45^3387 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL list_length
; _len_129^3386 = rsi
 mov rsi, rax
 mov rax, undefined ; 
; _handle-macro-block_130^3388 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _handle-expr-builtin_131^3389 = r8
 mov r8, rax
 mov rax, 2305843009213693971
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_483
 mov rax, [SELF + 248]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 240]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 232]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 224]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 216]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 208]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 200]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 192]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 184]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 176]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 160]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 136], rax
 mov [ALLOC + 144], rsi
 mov rax, [SELF + 128]
 mov [ALLOC + 152], rax
 mov rax, ALLOC
 add ALLOC, 160
 mov rdi, rax
 mov rax, 2305843009213693968
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_486
 mov rax, [SELF + 240]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 248]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 208]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 232]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 216]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 120], rax
 mov [ALLOC + 128], rsi
 mov r11, ALLOC
 add ALLOC, 136
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov r11, L4482 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4483
 mov rcx, [SELF + 72]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_483
L4483:
 mov rax, rcx
 mov r11, L4485 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4486
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3034
 mov rax, [SELF + 216]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 240]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 208]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; t2912 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3037
 mov rax, [SELF + 248]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov rax, [SELF + 240]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25_3c] ; %<
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4486:
 mov rax, rcx
 mov r11, L4488 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4489
 mov rax, [SELF + 128]
; _x_133^3447 = r9
 mov r9, rax
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3038
 mov rax, [SELF + 208]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 232]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 240]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 216]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 248]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 168]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
; t2917 = r10
 mov r10, rax
 mov rax, r9
 cmp rax, FALSE
 je L4491
 mov SELF, r10
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3038
L4491:
 sub rsp, 16
 mov rax, [SELF + 240]
 mov [rsp + 0], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, r10
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_478
L4492:
L4489:
 mov rax, rcx
 mov r11, L4493 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4494
 SET_T rax
 jmp L4495
L4494:
 sub rsp, 8
 mov rax, rcx
 mov r11, L4496 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4495:
 cmp rax, FALSE
 je L4497
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3043
 mov rax, [SELF + 248]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 144]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 216]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 240]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 232]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 208]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; t2925 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3046
 mov [ALLOC + 16], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25_3d] ; %=
 mov rdx, 5 ; '2
 mov rsi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4497:
 sub rsp, 24
 mov rax, [SELF + 240]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3047
 mov rax, [SELF + 128]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 120]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_475
L4498:
L4490:
L4487:
L4484:
f_3047:
; ()
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3048
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_486
f_3048:
; ((t2928 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3046:
; ((t2926 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4499
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^3454 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_418
L4499:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3043
L4500:
f_3043:
; ((t2920 . rcx))
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3041
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
; t2921 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4501
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3041
L4501:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3044
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t2923 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3045
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, 3 ; '1
 mov rsi, [SELF + 24]
 mov SELF, [____25_3d] ; %=
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4502:
f_3045:
; ((t2924 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4503
 mov rax, [SELF + 16]
; _x_44^3456 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, L4505 ; 
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3044
L4503:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3044
L4504:
f_3044:
; ((t2922 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4506
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_3041
L4506:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4508 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_417
L4507:
f_3041:
; ()
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3042
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_477
f_3042:
; ((t2919 . rcx))
 sub rsp, 64
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rax, [SELF + 48]
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
 mov [rsp + 48], rax
 mov [rsp + 56], rcx
 mov r10, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 jmp rax
f_3038:
; ()
 mov rax, [SELF + 104]
 cmp rax, FALSE
 je L4509
 sub rsp, 56
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov [rsp + 40], rax
 mov rax, [SELF + 104]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 jmp rax
L4509:
 mov rax, [SELF + 96]
; _x_44^3448 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4511
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4513 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_417
L4511:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3040
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 88]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 96]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4512:
L4510:
f_3040:
; ((t2916 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3039
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_460
f_3039:
; ((t2915 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3037:
; ((t2913 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4514
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4516 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_417
L4514:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3034
L4515:
f_3034:
; ()
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3035
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_519
f_3035:
; ((t2910 . rcx))
; _syn_133^3444 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3036
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_476
f_3036:
; ((t2911 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov [rsp + 40], rcx
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 jmp rax
f_486:
; ((k2885 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _expr-assert_132^3410 = rdx
 mov rdx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_487
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 24]
; _x_45^3413 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _key_133^3415 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3016
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t2889 = r8
 mov r8, rax
; _x_44^3416 = r9
 mov r9, rdi
 mov rax, r9
 mov r11, L4517 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4518
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3018
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r8
 mov rax, [SELF + 112]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 128]
 mov SELF, [____25_3d] ; %=
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4518:
; _x_44^3422 = r9
 mov r9, rdi
 mov rax, r9
 mov r11, L4520 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4521
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3021
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 128]
 mov SELF, [____25_3d] ; %=
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4521:
; _x_44^3425 = r9
 mov r9, rdi
 mov rax, r9
 mov r11, L4523 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4524
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3027
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 112]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r8
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
; t2902 = r9
 mov r9, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3028
 mov [ALLOC + 16], r9
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 128]
 mov SELF, [____25_3d] ; %=
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4524:
; _x_44^3434 = r9
 mov r9, rdi
 mov rax, r9
 mov r11, L4526 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4527
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3031
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 128]
 mov SELF, [____25_3d] ; %=
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4527:
; _x_44^3437 = r9
 mov r9, rdi
 mov rax, r9
 mov r11, L4529 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4530
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3033
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov rax, [SELF + 96]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, 5 ; '2
 mov rsi, [SELF + 128]
 mov SELF, [____3c_3d] ; <=
 mov rdi, 7 ; '3
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4530:
 mov SELF, r8
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3016
L4531:
L4528:
L4525:
L4522:
L4519:
f_3033:
; ((t2908 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3032
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_487
f_3032:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rdx, [rdx + 8]
 mov rsi, [SELF + 16]
 mov SELF, [___map] ; map
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3031:
; ((t2906 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3029
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_487
f_3029:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3436 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3030
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_480
f_3030:
; ((t2905 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3028:
; ((t2903 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4532
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^3427 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_418
L4532:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3027
L4533:
f_3027:
; ((t2901 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3022
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_487
f_3022:
; ()
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
; _x_44^3429 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3023
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_451
f_3023:
; ((t2896 . rcx))
; _var_134^3428 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3026
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_439
f_3026:
; ((t2899 . rcx))
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3024
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t2900 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4534
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3024
L4534:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L4536 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4535:
f_3024:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3431 = rcx
 mov rcx, rax
; _x_44^3433 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3432 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3025
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_480
f_3025:
; ((t2898 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3021:
; ((t2894 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3019
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_487
f_3019:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3424 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3020
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_435
f_3020:
; ((t2893 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3018:
; ((t2891 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3017
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_487
f_3017:
; ()
 sub rsp, 64
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov [rsp + 24], rax
 mov rax, [SELF + 48]
; _x_44^3419 = rcx
 mov rcx, rax
; _x_44^3421 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3420 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 32], rax
 mov rax, [SELF + 48]
; _x_44^3418 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov [rsp + 48], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 56], rax
 mov r10, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov r11, 8 ; 
 jmp f_461
f_3016:
; ((t2888 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_487:
; ((_test_133^3411 . rdx) (k2887 . rcx))
 mov rax, rdx
 cmp rax, FALSE
 je L4537
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4537:
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, L4539 ; 
 mov rdi, L4540 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 6 ; 
 jmp f_417
L4538:
f_483:
; ((k2870 . rcx))
 mov rax, [SELF + 152]
; _x_132^3390 = rdx
 mov rdx, rax
 mov rax, 2305843009213693972
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3008
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 136], rax
 mov [ALLOC + 144], rcx
 mov rax, [SELF + 136]
 mov [ALLOC + 152], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 160], rax
 mov rax, ALLOC
 add ALLOC, 168
; t2883 = rsi
 mov rsi, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4541
 mov SELF, rsi
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3008
L4541:
 mov rax, [SELF + 96]
; _x_133^3391 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L4543
 mov SELF, rsi
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3008
L4543:
 mov rax, [SELF + 88]
; _x_134^3392 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L4545
 mov SELF, rsi
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3008
L4545:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4547 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4546:
L4544:
L4542:
f_3008:
; ()
 mov rax, 2305843009213693971
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3015
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 136], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 144], rax
 mov rax, [SELF + 152]
 mov [ALLOC + 152], rax
 mov rcx, ALLOC
 add ALLOC, 160
 mov rdx, [SELF + 160]
 mov SELF, [____3e_3d] ; >=
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3015:
; ((t2881 . rcx))
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3009
 mov rax, [SELF + 152]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 144]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 136]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
; t2882 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4548
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3009
L4548:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L4550 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4549:
f_3009:
; ()
 mov rax, [SELF + 136]
; _x_44^3396 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _bindings_132^3394 = rcx
 mov rcx, rax
 mov rax, [SELF + 136]
; _x_44^3397 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _body_133^3395 = rdx
 mov rdx, rax
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3010
 mov rax, [SELF + 128]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 112]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_466
f_3010:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_134^3398 = rcx
 mov rcx, rax
 mov rax, 2305843009213693968
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_484
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 112], rax
 mov [ALLOC + 120], rcx
 mov rax, [SELF + 120]
 mov [ALLOC + 128], rax
 mov r11, ALLOC
 add ALLOC, 136
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t2874 = rdx
 mov rdx, rax
 sub rsp, 40
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 128]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 136]
 mov [rsp + 24], rax
 mov [rsp + 32], rdx
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_484
f_484:
; ((_ienv_137^3401 . rdi) (_loc-n_136^3400 . rsi) (_bs_135^3399 . rdx) (k2876 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4551
 sub rsp, 72
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_485
 mov rax, [SELF + 104]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdi
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov [rsp + 24], rdi
 mov rax, [SELF + 40]
 mov [rsp + 32], rax
 mov rax, [SELF + 16]
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov [rsp + 48], rax
 mov [rsp + 56], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 64], rax
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov r8, [rsp + 24]
 mov rdi, [rsp + 32]
 mov rsi, [rsp + 40]
 mov rdx, [rsp + 48]
 mov rcx, [rsp + 56]
 mov SELF, [rsp + 64]
 add rsp, 72
 mov rax, [SELF + 8]
 mov r11, 9 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_469
L4551:
 sub rsp, 8
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3012
 mov rax, [SELF + 112]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 128]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov [ALLOC + 64], rsi
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4552:
f_3012:
; ((t2877 . rcx))
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^3405 = rdx
 mov rdx, rax
; _x_44^3407 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3406 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3014
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
f_3014:
; ((t2879 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3013
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_452
f_3013:
; ((t2878 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
; _x_44^3404 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_484
f_485:
; ((_loc-n_139^3409 . rsi) (_store_138^3408 . rdx) (k2880 . rcx))
 sub rsp, 96
 mov rax, [SELF + 32]
 mov r11, [SELF + 16]
 mov r15, FALSE
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov r11, [SELF + 80]
 mov r15, FALSE
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 72]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov [rsp + 40], rsi
 mov [rsp + 48], rdx
 mov rax, [SELF + 64]
 mov [rsp + 56], rax
 mov rax, [SELF + 40]
 mov [rsp + 64], rax
 mov rax, [SELF + 56]
 mov [rsp + 72], rax
 mov [rsp + 80], rcx
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 88], rax
 mov rax, [rsp + 0]
 mov [locals + 16], rax
 mov rax, [rsp + 8]
 mov [locals + 8], rax
 mov rax, [rsp + 16]
 mov [locals + 0], rax
 mov r12, [rsp + 24]
 mov r10, [rsp + 32]
 mov r9, [rsp + 40]
 mov r8, [rsp + 48]
 mov rdi, [rsp + 56]
 mov rsi, [rsp + 64]
 mov rdx, [rsp + 72]
 mov rcx, [rsp + 80]
 mov SELF, [rsp + 88]
 add rsp, 96
 mov r11, 12 ; 
 jmp f_494
f_482:
; ((_id-n_129^3384 . rsi) (_sexp_128^3383 . rdx) (k2867 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_479
f_480:
; ((_sexp_122^3373 . rdx) (k2863 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 7 ; 
 jmp f_492
f_478:
; ((_sexp_114^3364 . rdx) (k2858 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, L4553 ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 5 ; 
 jmp f_474
f_477:
; ((_sexp_114^3363 . rdx) (k2856 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, L4554 ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 5 ; 
 jmp f_474
f_476:
; ((_sexp_114^3362 . rdx) (k2854 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, L4555 ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 5 ; 
 jmp f_474
f_475:
; ((_sexp_114^3361 . rdx) (k2852 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdi, L4556 ; 
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 5 ; 
 jmp f_474
f_474:
; ((_name_116^3359 . rdi) (_sexp_115^3358 . rsi) (_k_114^3357 . rdx) (k2849 . rcx))
 mov rax, rdx
 cmp rax, FALSE
 je L4557
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4557:
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3004
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, rdi
 mov rsi, L4559 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4558:
f_3004:
; ((t2850 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_417
f_469:
; ((_k_105^3310 . r12) (_loc-n_104^3309 . r10) (_store_103^3308 . r9) (_ienv_102^3307 . r8) (_syntax-env_101^3306 . rdi) (_id-n_100^3305 . rsi) (_bindings_99^3304 . rdx) (k2835 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_106^3311 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_470
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], r12
 mov rax, [locals + 0] ; _loop_106^3311
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdi
 mov r11, ALLOC
 add ALLOC, 88
 mov rax, [locals + 0] ; _loop_106^3311
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 0] ; _loop_106^3311
 mov rax, [rax + 8]
; t2836 = local #1
 mov [locals + 8], rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [locals + 8] ; t2836
 mov rsi, null ; 
 mov rdi, r9
 mov r8, r10
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_470
f_470:
; ((_loc-n_110^3315 . r8) (_store_109^3314 . rdi) (_vals_108^3313 . rsi) (_bs_107^3312 . rdx) (k2838 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4560
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_111^3328 = r9
 mov r9, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_472
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t2840 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3001
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], r10
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4560:
 sub rsp, 64
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_471
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov [rsp + 8], r8
 mov [rsp + 16], rdi
 mov rax, [SELF + 80]
 mov [rsp + 24], rax
 mov rax, [SELF + 64]
 mov [rsp + 32], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3320 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3319 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 40], rax
 mov [rsp + 48], rcx
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 56], rax
 mov r10, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_489
L4561:
f_471:
; ((_loc-n_113^3324 . rdi) (_store_112^3323 . rsi) (_val_111^3322 . rdx) (k2839 . rcx))
 sub rsp, 48
 mov [rsp + 0], rdi
 mov [rsp + 8], rsi
 mov rax, [SELF + 16]
; _y_46^3327 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
; _x_44^3325 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_470
f_3001:
; ((t2841 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_472
f_472:
; ((_bs_114^3331 . rdi) (_vals_113^3330 . rsi) (_store_112^3329 . rdx) (k2843 . rcx))
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L4562
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L4562:
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3002
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3336 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
L4563:
f_3002:
; ((t2844 . rcx))
 sub rsp, 40
 mov rax, [SELF + 32]
; _x_44^3339 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3003
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_453
f_3003:
; ((t2845 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
; _x_44^3341 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^3340 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_472
f_466:
; ((_bindings_99^3287 . rdx) (k2820 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2998
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2998:
; ((t2832 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2992
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2833 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4564
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2992
L4564:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L4566 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4565:
f_2992:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2993
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_467
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rdx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 32]
 mov SELF, [___for_2deach] ; for-each
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_467:
; ((_b_100^3289 . rdx) (k2828 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2996
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t2830 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2997
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_428
f_2997:
; ((t2831 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4567
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^3291 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_418
L4567:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_2996
L4568:
f_2996:
; ((t2829 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4569
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4569:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4571 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_417
L4570:
f_2993:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_100^3292 = rcx
 mov rcx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_468
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t2823 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_468
f_468:
; ((_bs_101^3293 . rdx) (k2825 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4572
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4572:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3299 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^3296 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _lst_46^3297 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL assoc_equal
; _dup_102^3295 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2995
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t2827 = rdi
 mov rdi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4574
 sub rsp, 8
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rcx, rdi
 mov rdi, L4576 ; 
 mov r8, rsi
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov rdx, L4577 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4574:
 mov SELF, rdi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2995
L4575:
L4573:
f_2995:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^3303 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_468
f_461:
; ((_loc-n_104^3241 . r10) (_store_103^3240 . r9) (_env_102^3239 . r8) (_id-n_101^3238 . rdi) (_expr_100^3237 . rsi) (_formals_99^3236 . rdx) (k2790 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _flatten-dotted_105^3242 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _dot-flattened_106^3243 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_462
 mov [ALLOC + 16], r12
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_463
 mov rax, [locals + 0] ; _dot-flattened_106^3243
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 0] ; _dot-flattened_106^3243
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2991
 mov [ALLOC + 16], r12
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [locals + 0] ; _dot-flattened_106^3243
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rsi
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 104], rax
 mov [ALLOC + 112], r9
 mov [ALLOC + 120], rcx
 mov [ALLOC + 128], r8
 mov [ALLOC + 136], r10
 mov rax, ALLOC
 add ALLOC, 144
 mov [rsp + 8], rax
 mov SELF, [___list_3f] ; list?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2991:
; ((t2818 . rcx))
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t2797 = rdx
 mov rdx, rax
; _dotted?_107^3258 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693969
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2978
 mov rax, [SELF + 136]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 104], rax
 mov [ALLOC + 112], rsi
 mov rax, [SELF + 40]
 mov [ALLOC + 120], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 128], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 136], rax
 mov rax, ALLOC
 add ALLOC, 144
; t2817 = rdi
 mov rdi, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4578
 sub rsp, 16
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdi
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_462
L4578:
 mov rcx, [SELF + 40]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2978
L4579:
f_2978:
; ((t2798 . rcx))
; _flattened_108^3260 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
; _check_109^3261 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_464
 mov rax, [SELF + 136]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 128]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rcx
 mov [rsp + 8], rsi
 mov rax, 2305843009213693967
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2981
 mov rax, [SELF + 112]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 96], rax
 mov [ALLOC + 104], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 120], rax
 mov rax, ALLOC
 add ALLOC, 128
 mov [rsp + 16], rax
 mov SELF, [___for_2deach] ; for-each
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2981:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_110^3269 = rcx
 mov rcx, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_465
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rcx
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t2805 = rdx
 mov rdx, rax
 sub rsp, 48
 mov rax, [SELF + 120]
 mov [rsp + 0], rax
 mov rax, [SELF + 88]
 mov [rsp + 8], rax
 mov rax, [SELF + 112]
 mov [rsp + 16], rax
 mov rax, [SELF + 104]
 mov [rsp + 24], rax
 mov rax, [SELF + 96]
 mov [rsp + 32], rax
 mov [rsp + 40], rdx
 mov rsi, null ; 
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_465
f_465:
; ((_loc-n_115^3274 . r9) (_store_114^3273 . r8) (_env_113^3272 . rdi) (_rvars_112^3271 . rsi) (_formals_111^3270 . rdx) (k2807 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4580
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2988
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r9
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], r8
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, [___reverse] ; reverse
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4580:
 sub rsp, 16
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2983
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r9
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 72]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rcx
 mov [ALLOC + 80], rsi
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 0], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov rdx, r9
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_458
L4581:
f_2983:
; ((t2808 . rcx))
; _var_116^3277 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 56]
; _x_44^3280 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2987
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, ALLOC
 add ALLOC, 96
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
f_2987:
; ((t2812 . rcx))
 sub rsp, 40
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2984
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_452
f_2984:
; ((t2809 . rcx))
; _env_117^3279 = rdx
 mov rdx, rcx
 sub rsp, 40
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov [rsp + 16], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2985
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 24], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_453
f_2985:
; ((t2810 . rcx))
; _store_118^3281 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2986
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, 3 ; '1
 mov rsi, [SELF + 64]
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2986:
; ((t2811 . rcx))
 sub rsp, 56
 mov [rsp + 0], rcx
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
; _x_45^3283 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _y_46^3284 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
; _x_44^3282 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_465
f_2988:
; ((t2813 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2989
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
; t2816 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4582
 sub rsp, 24
 mov [rsp + 0], rcx
 mov [rsp + 8], rdx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_463
L4582:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2989
L4583:
f_2989:
; ((t2814 . rcx))
; _vars_117^3286 = rdx
 mov rdx, rcx
 sub rsp, 56
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 48]
 mov [rsp + 32], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2990
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 40], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_492
f_2990:
; ((t2815 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_464:
; ((_x_110^3262 . rdx) (k2800 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2980
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_418
f_2980:
; ((t2802 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2979
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2803 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L4584
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2979
L4584:
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rcx, rdx
 mov rdx, L4586 ; 
 mov rdi, L4587 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_417
L4585:
f_2979:
; ()
 mov rax, [SELF + 48]
; _x_45^3264 = rcx
 mov rcx, rax
 mov rax, [SELF + 48]
; _x_45^3267 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _lst_46^3268 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL member_equal
; _x_44^3266 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _lst_46^3265 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL member_equal
 cmp rax, FALSE
 je L4588
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rdx, L4590 ; 
 mov rdi, L4591 ; 
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 6 ; 
 jmp f_417
L4588:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4589:
f_463:
; ((_x_107^3250 . rdx) (k2795 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3251 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4592
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4592:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^3254 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2976
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_463
L4593:
f_2976:
; ((t2796 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_462:
; ((_x_107^3244 . rdx) (k2792 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4594
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^3246 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2975
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_462
L4594:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4595:
f_2975:
; ((t2793 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_460:
; ((_outputs_99^3232 . rdx) (k2787 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2974
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_427
f_2974:
; ((t2788 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4596
 mov rax, [SELF + 16]
; _x_44^3233 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4596:
 mov rax, [SELF + 16]
; _y_46^3235 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, L4598 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4597:
f_459:
; ((_sid_100^3230 . rsi) (_loc_99^3229 . rdx) (k2785 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4599
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_456
L4599:
 sub rsp, 32
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_458
L4600:
f_458:
; ((_sid_100^3218 . rsi) (_intloc_99^3217 . rdx) (k2777 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2972
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_424
f_2972:
; ((t2781 . rcx))
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^3221 = rdx
 mov rdx, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^3222 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2973
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2973:
; ((t2782 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_45^3225 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 32]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
; _str_101^3219 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2971
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2971:
; ((t2780 . rcx))
 mov rdx, L4601 ; 
 mov rsi, [SELF + 16]
 mov rdi, L4602 ; 
 mov r8, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2970
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2970:
; ((t2779 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_456:
; ((_sym_99^3178 . rdx) (k2767 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _str_100^3179 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _rename_101^3180 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^3182 = r8
 mov r8, rax
 mov rax, r8
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^3183 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2968
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], r9
 mov [ALLOC + 56], r8
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, r9
 mov rdi, FALSE
 mov r8, r9
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2968:
; ((t2774 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
; _x_45^3186 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 48]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_457
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 40]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 24]
; _key_102^3190 = rdx
 mov rdx, rax
; _x_44^3191 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4603 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4604
 SET_T rax
 jmp L4605
L4604:
; _x_44^3193 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4606 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4607
 SET_T rax
 jmp L4608
L4607:
; _x_44^3195 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4609 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4610
 SET_T rax
 jmp L4611
L4610:
; _x_44^3197 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4612 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4613
 SET_T rax
 jmp L4614
L4613:
; _x_44^3199 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4615 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4616
 SET_T rax
 jmp L4617
L4616:
; _x_44^3201 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4618 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4619
 SET_T rax
 jmp L4620
L4619:
; _x_44^3203 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4621 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4622
 SET_T rax
 jmp L4623
L4622:
 sub rsp, 8
; _x_44^3205 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, L4624 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4623:
L4620:
L4617:
L4614:
L4611:
L4608:
L4605:
 cmp rax, FALSE
 je L4625
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_457
L4625:
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _x_44^3207 = rsi
 mov rsi, rax
 mov rax, rsi
 test rax, 1
 je L4627
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L4628
L4627:
 sub rsp, 8
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4629
 sub rsp, 8
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L4630
L4629:
 mov rax, FALSE
L4630:
L4628:
 cmp rax, FALSE
 je L4631
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^3215 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL lookup_char
; _x_45^3216 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L4633
 mov rax, rdi
 jmp L4634
L4633:
 mov rax, rsi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L4634:
; _y_46^3212 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, L4635 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4632
L4631:
 mov rax, FALSE
L4632:
 cmp rax, FALSE
 je L4636
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_457
L4636:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4637:
L4626:
f_457:
; ((k2770 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2966
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, L4638 ; 
 mov rsi, [SELF + 16]
 mov rsi, [rsi + 8]
 mov SELF, [___string_2dappend] ; string-append
 mov rdi, L4639 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2966:
; ((t2771 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_454:
; ((_val_101^3160 . rdi) (_loc_100^3159 . rsi) (_store_99^3158 . rdx) (k2756 . rcx))
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2960
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2761 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, rdx
 CALL assoc_eqv
 cmp rax, FALSE
 je L4640
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_102^3164 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_455
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], r9
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t2762 = r10
 mov r10, rax
 sub rsp, 8
 mov [rsp + 0], rdx
 mov SELF, r10
 mov rcx, r8
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_455
L4640:
 mov SELF, r8
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2960
L4641:
f_455:
; ((_store_103^3165 . rdx) (k2764 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _p_104^3166 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^3168 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^3169 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 CALL structurally_equal
 cmp rax, FALSE
 je L4642
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4642:
; _x_45^3172 = rdi
 mov rdi, rsi
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2964
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_455
L4643:
f_2964:
; ((t2765 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2960:
; ((t2757 . rcx))
; _store_102^3161 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2961
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t2759 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_44^3175 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4644
 mov rax, [SELF + 40]
; _x_44^3176 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2962
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rsi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_456
L4644:
 mov SELF, rsi
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_2961
L4645:
f_2962:
; ((t2760 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_2961
f_2961:
; ((t2758 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4646
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4646:
 sub rsp, 40
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_448
L4647:
f_453:
; ((_val_101^3157 . rdi) (_loc_100^3156 . rsi) (_store_99^3155 . rdx) (k2754 . rcx))
 sub rsp, 40
 mov [rsp + 0], rdx
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_448
f_452:
; ((_location_101^3154 . rdi) (_id_100^3153 . rsi) (_env_99^3152 . rdx) (k2752 . rcx))
 sub rsp, 40
 mov [rsp + 0], rdx
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_448
f_451:
; ((_store_101^3150 . rdi) (_env_100^3149 . rsi) (_sid_99^3148 . rdx) (k2748 . rcx))
 sub rsp, 32
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2959
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_449
f_2959:
; ((t2750 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2958
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_450
f_2958:
; ((t2749 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4648
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4648:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4650 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_417
L4649:
f_450:
; ((_store_100^3142 . rsi) (_location_99^3141 . rdx) (k2746 . rcx))
 mov rax, rdx
 mov r11, rsi
 CALL assoc_eqv
; _tmp_101^3143 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L4651
 mov SELF, rcx
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4651:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4653
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_456
L4653:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4654:
L4652:
f_449:
; ((_env_100^3136 . rsi) (_sid_99^3135 . rdx) (k2742 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2957
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_425
f_2957:
; ((t2744 . rcx))
 mov rax, [SELF + 40]
; _lst_46^3139 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL assoc_eqv
; t2743 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4655
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4655:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_426
L4656:
f_448:
; ((_alist_101^3130 . rdi) (_val_100^3129 . rsi) (_key_99^3128 . rdx) (k2738 . rcx))
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^3131 = r8
 mov r8, rax
 mov SELF, rcx
 mov rax, r8
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_447:
; ((_trans_99^3124 . rdx) (k2736 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3126 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_446:
; ((_trans_99^3122 . rdx) (k2734 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_445:
; ((_syntax_99^3120 . rdx) (k2731 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2955
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_443
f_2955:
; ((t2732 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_444:
; ((_builtin_99^3116 . rdx) (k2729 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3118 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_443:
; ((_syntax_99^3112 . rdx) (k2727 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^3114 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, L4657 ; 
 mov r11, rsi
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_442:
; ((_val_99^3111 . rdx) (k2725 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_428
f_441:
; ((_code_99^3109 . rdx) (k2723 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_440:
; ((_val_99^3108 . rdx) (k2721 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_427
f_439:
; ((_val_99^3106 . rdx) (k2719 . rcx))
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_438:
; ((_env_100^3105 . rsi) (_synrules_99^3104 . rdx) (k2717 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, [____25list] ; %list
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_437:
; ((_name_99^3103 . rdx) (k2715 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25list] ; %list
 mov rsi, rdx
 mov rdx, L4658 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_436:
; ((_output_99^3102 . rdx) (k2713 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25list] ; %list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_435:
; ((_sexp_99^3101 . rdx) (k2711 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_429
f_434:
; ((_v-sexp_99^3097 . rdx) (k2706 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2952
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [____25_3d] ; %=
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rdx, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2952:
; ((t2707 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4659
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2954
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_421
L4659:
 mov rax, [SELF + 40]
; _x_45^3099 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4660:
f_2954:
; ((t2709 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2953
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_435
f_2953:
; ((t2708 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___list_2d_3evector] ; list->vector
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_433:
; ((_input_99^3096 . rdx) (k2704 . rcx))
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_429
f_432:
; ((_v_99^3095 . rdx) (k2700 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2951
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [___vector_2d_3elist] ; vector->list
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2951:
; ((t2702 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2950
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_433
f_2950:
; ((t2701 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_422
f_429:
; ((_x_100^3077 . rsi) (_f_99^3076 . rdx) (k2690 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _mv2_101^3078 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _mv_102^3079 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_430
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rdi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_431
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov SELF, [SELF + 8]
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_431
f_431:
; ((_x_103^3093 . rdx) (k2697 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2949
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_430
f_2949:
; ((t2698 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, rcx
 mov r15, [SELF + 16]
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_430:
; ((_x_103^3080 . rdx) (k2692 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4661
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L4661:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4663
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _a_104^3083 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _b_105^3084 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2946
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_430
L4663:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4664:
L4662:
f_2946:
; ((t2693 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4665
; _x_45^3088 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2947
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_431
L4665:
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2948
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_430
L4666:
f_2948:
; ((t2695 . rcx))
 sub rsp, 16
 mov rax, rcx
 cmp rax, FALSE
 je L4667
 mov rax, [SELF + 16]
; _x_45^3091 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L4668
L4667:
 mov rax, FALSE
L4668:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_2947:
; ((t2694 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_428:
; ((_x_99^3073 . rdx) (k2688 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4669
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_427
L4669:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4670:
f_427:
; ((_x_99^3069 . rdx) (k2686 . rcx))
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4671
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^3071 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 jmp L4672
L4671:
 mov rcx, FALSE
L4672:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_426:
; ((_sid_99^3064 . rdx) (k2681 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4673
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4673:
; _x_45^3066 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2944
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t2683 = rdi
 mov rdi, rax
 mov SELF, [____25_3d] ; %=
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_2945
 mov [ALLOC + 16], rdi
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rdx, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4674:
f_2945:
; ((t2684 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4675
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, 1 ; '0
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_2944
L4675:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, 5 ; '2
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_2944
L4676:
f_2944:
; ((t2682 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_425:
; ((_sid_99^3060 . rdx) (k2679 . rcx))
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4677
 mov rcx, rdx
 jmp L4678
L4677:
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
L4678:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_424:
; ((_sid_99^3056 . rdx) (k2677 . rcx))
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4679
 mov rcx, rdx
 jmp L4680
L4679:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
L4680:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_423:
; ((_location_101^3053 . rdi) (_renamed-id_100^3052 . rsi) (_name_99^3051 . rdx) (k2675 . rcx))
 mov rax, rdx
 mov r11, rdi
 cmp rax, r11
 jne L4681
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, [___vector] ; vector
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L4681:
 sub rsp, 32
 mov [rsp + 0], rdi
 mov [rsp + 8], rsi
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov SELF, [___vector] ; vector
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L4682:
f_422:
; ((_l_99^3050 . rdx) (k2673 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___vector] ; vector
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_421:
; ((_sexp_99^3047 . rdx) (k2671 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_420:
; ((_sexp_99^3044 . rdx) (k2669 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4683
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25_3d] ; %=
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rdx, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L4683:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4684:
f_419:
; ((_sexp_99^3041 . rdx) (k2667 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4685
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25_3c] ; %<
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rdx, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L4685:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4686:
f_418:
; ((_sexp_99^3038 . rdx) (k2665 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_100^3039 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4687
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4687:
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_419
L4688:
f_417:
; ((_args_99^3037 . rdx) (k2663 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25apply] ; %apply
 mov rsi, rdx
 mov rdx, [___expand_2derror_2dhook] ; expand-error-hook
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_372:
; ((_opt_48^2566 . rsi) (_obj_47^2565 . rdx) (k3349 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4689
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4690
L4689:
 mov rax, [____25standard_2doutput_2dport] ; %standard-output-port
L4690:
; _port_49^2567 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _generic-write_50^2570 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _reverse-string-append_51^2571 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_373
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], r9
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_413
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3404
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, r8
 mov SELF, [SELF + 8]
 mov rsi, FALSE
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_416
 mov [ALLOC + 16], rdi
 mov r8, ALLOC
 add ALLOC, 24
 mov rdi, [____2apretty_2dprint_2dwidth_2a] ; *pretty-print-width*
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_373
f_416:
; ((_s_52^2982 . rdx) (k3577 . rcx))
 mov rax, [SELF + 16]
; _p_47^2984 = rsi
 mov rsi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3405
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdi, rsi
 mov rsi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3405:
; ()
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3404:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___void] ; void
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_413:
; ((_l_52^2958 . rdx) (k3562 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _rev-string-append_53^2959 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_414
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rsi
 mov SELF, [SELF + 8]
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_414
f_414:
; ((_i_55^2961 . rsi) (_l_54^2960 . rdx) (k3564 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4691
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_56^2963 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_57^2965 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3403
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdi
 mov [ALLOC + 40], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [____25_2b] ; %+
 mov rdx, rsi
 mov rsi, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4691:
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov [rsp + 16], rcx
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4692:
f_3403:
; ((t3575 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
; _x_44^2968 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3396
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_414
f_3396:
; ((t3565 . rcx))
; _result_58^2967 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_59^2969 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_415
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3566 = rdi
 mov rdi, rax
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rdx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3399
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rsi, [SELF + 16]
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3399:
; ((t3568 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3398
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 16]
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3398:
; ((t3567 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, 1 ; '0
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_415
f_415:
; ((_k_61^2971 . rsi) (_j_60^2970 . rdx) (k3570 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3400
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [____25_3c] ; %<
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3400:
; ((t3571 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4693
 mov rax, [SELF + 32]
; _x_45^2972 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _i_46^2973 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _x_45^2975 = rdi
 mov rdi, rax
 mov rax, [SELF + 16]
; _i_46^2976 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, r8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^2977 = r9
 mov r9, rax
 mov rax, r9
 CALL lookup_char
; _x_45^2978 = r10
 mov r10, rax
 mov rax, r10
 cmp rax, FALSE
 je L4695
 mov rax, r10
 jmp L4696
L4695:
 mov rax, r9
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L4696:
; _y_47^2974 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3401
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4693:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4694:
f_3401:
; ((t3573 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3402
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 32]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3402:
; ((t3574 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_415
f_373:
; ((_output_55^2575 . r8) (_width_54^2574 . rdi) (_display?_53^2573 . rsi) (_obj_52^2572 . rdx) (k3351 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-macro?_56^2576 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-macro-body_57^2577 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-macro-prefix_58^2578 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _out_59^2579 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _char-name_60^2580 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _wr_61^2581 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp_62^2582 = local #3
 mov [locals + 24], rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_374
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_376
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_377
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_378
 mov [ALLOC + 16], r8
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 0] ; _out_59^2579
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_379
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, [locals + 8] ; _char-name_60^2580
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_380
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], r10
 mov rax, [locals + 16] ; _wr_61^2581
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov rax, [locals + 8] ; _char-name_60^2580
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rsi
 mov rax, [locals + 0] ; _out_59^2579
 mov [ALLOC + 64], rax
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, [locals + 16] ; _wr_61^2581
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_389
 mov rax, [locals + 0] ; _out_59^2579
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rdi
 mov rax, [locals + 16] ; _wr_61^2581
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r12
 mov [ALLOC + 72], r10
 mov [ALLOC + 80], r9
 mov r11, ALLOC
 add ALLOC, 88
 mov rax, [locals + 24] ; _pp_62^2582
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 cmp rax, FALSE
 je L4697
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3395
 mov [ALLOC + 16], rcx
 mov rax, [locals + 0] ; _out_59^2579
 mov [ALLOC + 24], rax
 mov rax, [locals + 24] ; _pp_62^2582
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, 3 ; '1
 mov rdi, FALSE
 mov r8, 3 ; '1
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4697:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [locals + 16] ; _wr_61^2581
 mov SELF, [SELF + 8]
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
L4698:
f_3395:
; ((t3559 . rcx))
 sub rsp, 8
 mov rax, L4699 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 CALL fill_bytes
; t3557 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3394
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_389
f_3394:
; ((t3558 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_389:
; ((_col_64^2746 . rsi) (_obj_63^2745 . rdx) (k3442 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _spaces_65^2747 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _indent_66^2748 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pr_67^2749 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-expr_68^2750 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-call_69^2751 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-list_70^2752 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-down_71^2753 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-general_72^2754 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-expr-list_73^2755 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-lambda_74^2756 = local #4
 mov [locals + 32], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-if_75^2757 = local #5
 mov [locals + 40], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-cond_76^2758 = local #6
 mov [locals + 48], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-case_77^2759 = local #7
 mov [locals + 56], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-and_78^2760 = local #8
 mov [locals + 64], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-let_79^2761 = local #9
 mov [locals + 72], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-begin_80^2762 = local #10
 mov [locals + 80], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _pp-do_81^2763 = local #11
 mov [locals + 88], rax
 mov rax, undefined ; 
; _indent-general_82^2764 = local #12
 mov [locals + 96], rax
 mov rax, undefined ; 
; _max-call-head-width_83^2765 = local #13
 mov [locals + 104], rax
 mov rax, undefined ; 
; _max-expr-width_84^2766 = local #14
 mov [locals + 112], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _style_85^2767 = local #15
 mov [locals + 120], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_390
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_391
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_392
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [locals + 0] ; _pp-list_70^2752
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_394
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r12
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 32], rax
 mov rax, [locals + 120] ; _style_85^2767
 mov [ALLOC + 40], rax
 mov rax, [locals + 0] ; _pp-list_70^2752
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r10
 mov [ALLOC + 72], r9
 mov rax, [SELF + 16]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_395
 mov rax, [locals + 8] ; _pp-down_71^2753
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_396
 mov rax, [locals + 8] ; _pp-down_71^2753
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 0] ; _pp-list_70^2752
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_397
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r9
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 8] ; _pp-down_71^2753
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_399
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], r9
 mov rax, [locals + 8] ; _pp-down_71^2753
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_403
 mov [ALLOC + 16], r10
 mov rax, [locals + 0] ; _pp-list_70^2752
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 24] ; _pp-expr-list_73^2755
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_404
 mov [ALLOC + 16], r10
 mov rax, [locals + 24] ; _pp-expr-list_73^2755
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 32] ; _pp-lambda_74^2756
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_405
 mov [ALLOC + 16], r10
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 40] ; _pp-if_75^2757
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_406
 mov rax, [locals + 24] ; _pp-expr-list_73^2755
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r12
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 48] ; _pp-cond_76^2758
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_407
 mov rax, [locals + 24] ; _pp-expr-list_73^2755
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r10
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 56] ; _pp-case_77^2759
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_408
 mov [ALLOC + 16], r10
 mov [ALLOC + 24], r12
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 64] ; _pp-and_78^2760
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_409
 mov [ALLOC + 16], r10
 mov rax, [locals + 24] ; _pp-expr-list_73^2755
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 72] ; _pp-let_79^2761
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_410
 mov [ALLOC + 16], r10
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 80] ; _pp-begin_80^2762
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_411
 mov [ALLOC + 16], r10
 mov rax, [locals + 24] ; _pp-expr-list_73^2755
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _pp-general_72^2754
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 88] ; _pp-do_81^2763
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 5 ; '2
 mov [locals + 96], rax ; (set! _indent-general_82^2764 ...)
 mov rax, 11 ; '5
 mov [locals + 104], rax ; (set! _max-call-head-width_83^2765 ...)
 mov rax, 101 ; '50
 mov [locals + 112], rax ; (set! _max-expr-width_84^2766 ...)
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_412
 mov rax, [locals + 88] ; _pp-do_81^2763
 mov [ALLOC + 16], rax
 mov rax, [locals + 80] ; _pp-begin_80^2762
 mov [ALLOC + 24], rax
 mov rax, [locals + 72] ; _pp-let_79^2761
 mov [ALLOC + 32], rax
 mov rax, [locals + 64] ; _pp-and_78^2760
 mov [ALLOC + 40], rax
 mov rax, [locals + 56] ; _pp-case_77^2759
 mov [ALLOC + 48], rax
 mov rax, [locals + 48] ; _pp-cond_76^2758
 mov [ALLOC + 56], rax
 mov rax, [locals + 40] ; _pp-if_75^2757
 mov [ALLOC + 64], rax
 mov rax, [locals + 32] ; _pp-lambda_74^2756
 mov [ALLOC + 72], rax
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, [locals + 120] ; _style_85^2767
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r9
 mov SELF, [SELF + 8]
 mov rdi, 1 ; '0
 mov r8, r10
 mov r8, [r8 + 8]
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_392
f_412:
; ((_head_86^2924 . rdx) (k3556 . rcx))
 sub rsp, 16
 mov rax, rdx
 mov r11, L4700 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4701
 SET_T rax
 jmp L4702
L4701:
 mov rax, rdx
 mov r11, L4703 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4704
 SET_T rax
 jmp L4705
L4704:
 mov rax, rdx
 mov r11, L4706 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4707
 SET_T rax
 jmp L4708
L4707:
 sub rsp, 8
 mov rax, rdx
 mov r11, L4709 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4708:
L4705:
L4702:
 cmp rax, FALSE
 je L4710
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 jmp L4711
L4710:
 mov rax, rdx
 mov r11, L4712 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4713
 SET_T rax
 jmp L4714
L4713:
 sub rsp, 8
 mov rax, rdx
 mov r11, L4715 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4714:
 cmp rax, FALSE
 je L4716
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 jmp L4717
L4716:
 mov rax, rdx
 mov r11, L4718 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4719
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 jmp L4720
L4719:
 mov rax, rdx
 mov r11, L4721 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4722
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 jmp L4723
L4722:
 mov rax, rdx
 mov r11, L4724 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4725
 SET_T rax
 jmp L4726
L4725:
 sub rsp, 8
 mov rax, rdx
 mov r11, L4727 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4726:
 cmp rax, FALSE
 je L4728
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 jmp L4729
L4728:
 mov rax, rdx
 mov r11, L4730 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4731
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 jmp L4732
L4731:
 mov rax, rdx
 mov r11, L4733 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4734
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 jmp L4735
L4734:
 sub rsp, 8
 mov rax, rdx
 mov r11, L4736 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, [SELF + 16]
 mov r11, [r11 + 8]
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4735:
L4732:
L4729:
L4723:
L4720:
L4717:
L4711:
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_411:
; ((_extra_88^2923 . rdi) (_col_87^2922 . rsi) (_expr_86^2921 . rdx) (k3551 . rcx))
 sub rsp, 64
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov [rsp + 24], rdi
 mov [rsp + 32], rsi
 mov [rsp + 40], rdx
 mov [rsp + 48], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 56], rax
 mov r8, FALSE
 mov r12, [rsp + 0]
 mov r10, [rsp + 8]
 mov r9, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov r11, 9 ; 
 jmp f_399
f_410:
; ((_extra_88^2920 . rdi) (_col_87^2919 . rsi) (_expr_86^2918 . rdx) (k3549 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r12, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 9 ; 
 jmp f_399
f_409:
; ((_extra_88^2911 . rdi) (_col_87^2910 . rsi) (_expr_86^2909 . rdx) (k3547 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_89^2912 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4737
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^2916 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r9
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4738
L4737:
 mov rax, FALSE
L4738:
; _named?_90^2914 = r9
 mov r9, rax
 sub rsp, 64
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov [rsp + 16], r9
 mov [rsp + 24], rdi
 mov [rsp + 32], rsi
 mov [rsp + 40], rdx
 mov [rsp + 48], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 56], rax
 mov r10, FALSE
 mov r12, [rsp + 0]
 mov r9, [rsp + 8]
 mov r8, [rsp + 16]
 mov rdi, [rsp + 24]
 mov rsi, [rsp + 32]
 mov rdx, [rsp + 40]
 mov rcx, [rsp + 48]
 mov SELF, [rsp + 56]
 add rsp, 64
 mov r11, 9 ; 
 jmp f_399
f_408:
; ((_extra_88^2908 . rdi) (_col_87^2907 . rsi) (_expr_86^2906 . rdx) (k3545 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_395
f_407:
; ((_extra_88^2905 . rdi) (_col_87^2904 . rsi) (_expr_86^2903 . rdx) (k3543 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov [rsp + 16], rdi
 mov [rsp + 24], rsi
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r8, FALSE
 mov r10, FALSE
 mov r12, [rsp + 0]
 mov r9, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 9 ; 
 jmp f_399
f_406:
; ((_extra_88^2902 . rdi) (_col_87^2901 . rsi) (_expr_86^2900 . rdx) (k3541 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_395
f_405:
; ((_extra_88^2899 . rdi) (_col_87^2898 . rsi) (_expr_86^2897 . rdx) (k3539 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov [rsp + 16], rdi
 mov [rsp + 24], rsi
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r8, FALSE
 mov r10, FALSE
 mov r12, [rsp + 0]
 mov r9, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 9 ; 
 jmp f_399
f_404:
; ((_extra_88^2896 . rdi) (_col_87^2895 . rsi) (_expr_86^2894 . rdx) (k3537 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov [rsp + 16], rdi
 mov [rsp + 24], rsi
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r8, FALSE
 mov r10, FALSE
 mov r12, [rsp + 0]
 mov r9, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 9 ; 
 jmp f_399
f_403:
; ((_extra_88^2893 . rdi) (_col_87^2892 . rsi) (_l_86^2891 . rdx) (k3535 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_396
f_399:
; ((_pp-3_92^2851 . r12) (_pp-2_91^2850 . r10) (_pp-1_90^2849 . r9) (_named?_89^2848 . r8) (_extra_88^2847 . rdi) (_col_87^2846 . rsi) (_expr_86^2845 . rdx) (k3511 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _tail1_93^2852 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _tail2_94^2853 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _tail3_95^2854 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_400
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [locals + 8] ; _tail2_94^2853
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], r9
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [locals + 0] ; _tail1_93^2852
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_401
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [locals + 16] ; _tail3_95^2854
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], r10
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [locals + 8] ; _tail2_94^2853
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_402
 mov [ALLOC + 16], r12
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, [locals + 16] ; _tail3_95^2854
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _head_96^2880 = local #3
 mov [locals + 24], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_97^2882 = local #4
 mov [locals + 32], rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3392
 mov rax, [locals + 32] ; _rest_97^2882
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rsi
 mov rax, [locals + 0] ; _tail1_93^2852
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [locals + 24] ; _head_96^2880
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4739 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3392:
; ((t3533 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3385
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
f_3385:
; ((t3526 . rcx))
; _col*_98^2884 = rdx
 mov rdx, rcx
 mov rax, [SELF + 24]
 cmp rax, FALSE
 je L4740
 mov rax, [SELF + 16]
; _x_44^2885 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4741
L4740:
 mov rax, FALSE
L4741:
 cmp rax, FALSE
 je L4742
 mov rax, [SELF + 16]
; _x_44^2887 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _name_99^2886 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^2889 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_100^2888 = rdi
 mov rdi, rax
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3389
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rsi
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4744 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4742:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3390
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 32]
 mov SELF, [____25_2b] ; %+
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4743:
f_3390:
; ((t3531 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3391
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3391:
; ((t3532 . rcx))
 sub rsp, 48
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_400
f_3389:
; ((t3530 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3386
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
f_3386:
; ((t3527 . rcx))
; _col**_101^2890 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3387
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3387:
; ((t3528 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3388
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rdx, [SELF + 40]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3388:
; ((t3529 . rcx))
 sub rsp, 48
 mov [rsp + 0], rcx
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_400
f_402:
; ((_col2_98^2879 . rdi) (_col1_97^2878 . rsi) (_rest_96^2877 . rdx) (k3525 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rsi
 mov [rsp + 24], rdi
 mov [rsp + 32], rdx
 mov [rsp + 40], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 7 ; 
 jmp f_397
f_401:
; ((_col3_99^2869 . r8) (_col2_98^2868 . rdi) (_col1_97^2867 . rsi) (_rest_96^2866 . rdx) (k3519 . rcx))
 mov rax, [SELF + 48]
 cmp rax, FALSE
 je L4745
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4746
L4745:
 mov rax, FALSE
L4746:
 cmp rax, FALSE
 je L4747
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _val1_100^2871 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_101^2873 = r10
 mov r10, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3382
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], r10
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rdi
 mov rax, ALLOC
 add ALLOC, 96
; t3523 = r12
 mov r12, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 jne L4749
 mov rcx, r12
 mov rdx, [SELF + 40]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4749:
 mov SELF, r12
 mov rcx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3382
L4750:
L4747:
 sub rsp, 40
 mov [rsp + 0], rdi
 mov [rsp + 8], rsi
 mov [rsp + 16], rdx
 mov [rsp + 24], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_402
L4748:
f_3382:
; ((t3520 . rcx))
; _extra_102^2875 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 88]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3384
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_391
f_3384:
; ((t3522 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 64]
 mov [rsp + 24], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3383
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 32], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_392
f_3383:
; ((t3521 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_402
f_400:
; ((_col3_99^2858 . r8) (_col2_98^2857 . rdi) (_col1_97^2856 . rsi) (_rest_96^2855 . rdx) (k3513 . rcx))
 mov rax, [SELF + 48]
 cmp rax, FALSE
 je L4751
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L4752
L4751:
 mov rax, FALSE
L4752:
 cmp rax, FALSE
 je L4753
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _val1_100^2860 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_101^2862 = r10
 mov r10, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3379
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov [ALLOC + 64], rsi
 mov [ALLOC + 72], r8
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rdi
 mov rax, ALLOC
 add ALLOC, 96
; t3517 = r12
 mov r12, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 jne L4755
 mov rcx, r12
 mov rdx, [SELF + 40]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4755:
 mov SELF, r12
 mov rcx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3379
L4756:
L4753:
 sub rsp, 48
 mov [rsp + 0], r8
 mov [rsp + 8], rdi
 mov [rsp + 16], rsi
 mov [rsp + 24], rdx
 mov [rsp + 32], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_401
L4754:
f_3379:
; ((t3514 . rcx))
; _extra_102^2864 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 88]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3381
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_391
f_3381:
; ((t3516 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 72]
 mov [rsp + 24], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3380
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 32], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_392
f_3380:
; ((t3515 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_401
f_397:
; ((_pp-item_90^2834 . r9) (_extra_89^2833 . r8) (_col2_88^2832 . rdi) (_col1_87^2831 . rsi) (_l_86^2830 . rdx) (k3497 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_91^2835 = r10
 mov r10, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_398
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], r10
 mov [ALLOC + 56], r9
 mov [ALLOC + 64], r8
 mov r11, ALLOC
 add ALLOC, 72
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r10
 mov rax, [rax + 8]
; t3498 = r12
 mov r12, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r12
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_398
f_398:
; ((_col_93^2837 . rsi) (_l_92^2836 . rdx) (k3500 . rcx))
 mov rax, rsi
 cmp rax, FALSE
 je L4757
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4759
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_94^2839 = rdi
 mov rdi, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3371
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rcx
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rsi
 mov rax, ALLOC
 add ALLOC, 88
; t3504 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L4761
 mov rcx, r8
 mov rdx, [SELF + 64]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4761:
 mov SELF, r8
 mov rcx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3371
L4762:
L4759:
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4763
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4765 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4763:
 sub rsp, 32
 mov [rsp + 0], rsi
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3378
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_391
L4764:
L4760:
L4757:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4758:
f_3378:
; ((t3509 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3377
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4766 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3377:
; ((t3508 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 72]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3375
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_391
f_3375:
; ((t3506 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3376
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rdx, [SELF + 56]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3376:
; ((t3507 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov [rsp + 24], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3374
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 32], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_392
f_3374:
; ((t3505 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4767 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_378
f_3371:
; ((t3501 . rcx))
; _extra_95^2841 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3373
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_391
f_3373:
; ((t3503 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 56]
; _x_44^2843 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3372
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 32], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_392
f_3372:
; ((t3502 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_398
f_396:
; ((_pp-item_89^2828 . r8) (_extra_88^2827 . rdi) (_col_87^2826 . rsi) (_l_86^2825 . rdx) (k3494 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3369
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4768 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3369:
; ((t3495 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov [rsp + 24], rcx
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 7 ; 
 jmp f_397
f_395:
; ((_pp-item_89^2821 . r8) (_extra_88^2820 . rdi) (_col_87^2819 . rsi) (_expr_86^2818 . rdx) (k3489 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3368
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov [ALLOC + 56], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4769 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3368:
; ((t3492 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^2823 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3366
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
f_3366:
; ((t3490 . rcx))
; _col*_90^2822 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4770
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3367
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4770:
 sub rsp, 8
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4771:
f_3367:
; ((t3491 . rcx))
 sub rsp, 56
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 48]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
; _x_44^2824 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 32], rax
 mov rax, [SELF + 40]
 mov [rsp + 40], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 48], rax
 mov r9, [rsp + 0]
 mov r8, [rsp + 8]
 mov rdi, [rsp + 16]
 mov rsi, [rsp + 24]
 mov rdx, [rsp + 32]
 mov rcx, [rsp + 40]
 mov SELF, [rsp + 48]
 add rsp, 56
 mov r11, 7 ; 
 jmp f_397
f_394:
; ((_extra_88^2803 . rdi) (_col_87^2802 . rsi) (_expr_86^2801 . rdx) (k3477 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3357
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 72]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 112], rax
 mov rax, ALLOC
 add ALLOC, 120
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_374
f_3357:
; ((t3478 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4772
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3358
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_376
L4772:
 mov rax, [SELF + 16]
; _x_44^2805 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _head_89^2804 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4774
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3361
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdx
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_412
L4774:
 sub rsp, 48
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rax, [SELF + 56]
 mov [rsp + 32], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_396
L4775:
L4773:
f_3361:
; ((t3482 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4776
 sub rsp, 40
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov [rsp + 32], rcx
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L4776:
 mov rax, [SELF + 72]
; _x_45^2809 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^2810 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^2811 = rdi
 mov rdi, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3365
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rdi
 mov [ALLOC + 80], rsi
 mov rcx, ALLOC
 add ALLOC, 88
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4777:
f_3365:
; ((t3486 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
; _x_45^2814 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 72]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; t3484 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rdx
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3362
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov SELF, [____25_3e] ; %>
 mov rsi, 11 ; '5
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3362:
; ((t3483 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4778
 sub rsp, 48
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r12, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 9 ; 
 jmp f_399
L4778:
 sub rsp, 48
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_395
L4779:
f_3358:
; ((t3479 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3360
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, ALLOC
 add ALLOC, 72
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_377
f_3360:
; ((t3481 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3359
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3359:
; ((t3480 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_392
f_392:
; ((_pp-pair_89^2790 . r8) (_extra_88^2789 . rdi) (_col_87^2788 . rsi) (_obj_86^2787 . rdx) (k3461 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_90^2791 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L4780
 mov rax, r9
 jmp L4781
L4780:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L4781:
 cmp rax, FALSE
 je L4782
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _result_90^2794 = r9
 mov r9, rax
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3356
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdi
 mov [ALLOC + 56], r8
 mov [ALLOC + 64], r9
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rcx
 mov [ALLOC + 96], rsi
 mov rax, [SELF + 56]
 mov [ALLOC + 104], rax
 mov rax, ALLOC
 add ALLOC, 112
 mov [rsp + 8], rax
 mov rdx, [SELF + 64]
 mov SELF, [____25_2d] ; %-
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4782:
 sub rsp, 32
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
L4783:
f_3356:
; ((t3475 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3355
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rcx, ALLOC
 add ALLOC, 112
 mov rsi, [SELF + 48]
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3355:
; ((t3474 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3354
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rcx, ALLOC
 add ALLOC, 112
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3354:
; ((t3473 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3346
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 104], rax
 mov rcx, ALLOC
 add ALLOC, 112
 mov SELF, [___max] ; max
 mov rsi, 101 ; '50
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3346:
; ((t3462 . rcx))
 mov [ALLOC + 8], rcx
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _left_91^2795 = rdx
 mov rdx, rax
 sub rsp, 40
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_393
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 104]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3347
 mov rax, [SELF + 96]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], rdx
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 24], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_373
f_3347:
; ()
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3348
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rcx, ALLOC
 add ALLOC, 96
 mov rdx, [SELF + 96]
 mov rdx, [rdx + 8]
 mov SELF, [____25_3e] ; %>
 mov rsi, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3348:
; ((t3464 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4784
 sub rsp, 24
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3349
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_413
L4784:
 mov rax, [SELF + 88]
; _x_44^2800 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4786
 sub rsp, 40
 mov rax, [SELF + 64]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rax, [SELF + 56]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4786:
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3350
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 88]
 mov SELF, [___vector_2d_3elist] ; vector->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4787:
L4785:
f_3350:
; ((t3466 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3351
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4788 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3351:
; ((t3467 . rcx))
 sub rsp, 48
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov [rsp + 32], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 40], rax
 mov r8, [rsp + 0]
 mov rdi, [rsp + 8]
 mov rsi, [rsp + 16]
 mov rdx, [rsp + 24]
 mov rcx, [rsp + 32]
 mov SELF, [rsp + 40]
 add rsp, 48
 mov r11, 6 ; 
 jmp f_396
f_3349:
; ((t3465 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_393:
; ((_str_92^2796 . rdx) (k3468 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^2798 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3353
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2d] ; %-
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3353:
; ((t3471 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov rdx, [rdx + 8]
 mov SELF, [____25_3e] ; %>
 mov rsi, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_391:
; ((_col_87^2780 . rsi) (_to_86^2779 . rdx) (k3453 . rcx))
 mov rax, rsi
 cmp rax, FALSE
 je L4789
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3341
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov SELF, [____25_3c] ; %<
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4789:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4790:
f_3341:
; ((t3454 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4791
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3344
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, 3 ; '1
 mov rdi, FALSE
 mov r8, 3 ; '1
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4791:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3345
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4792:
f_3345:
; ((t3459 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_390
f_3344:
; ((t3457 . rcx))
 sub rsp, 8
 mov rax, L4793 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 CALL fill_bytes
 sub rsp, 32
 mov rax, [SELF + 48]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3342
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3342:
; ((t3455 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4794
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_390
L4794:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4795:
f_390:
; ((_col_87^2769 . rsi) (_n_86^2768 . rdx) (k3444 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3335
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov SELF, [____25_3e] ; %>
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3335:
; ((t3445 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4796
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3336
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 48]
 mov SELF, [____25_3e] ; %>
 mov rsi, 15 ; '7
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4796:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4797:
f_3336:
; ((t3446 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4798
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3337
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [____25_2d] ; %-
 mov rsi, 17 ; '8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4798:
 mov rax, L4800 ; 
; _str_45^2770 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _to_47^2772 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 sub rax, r11
  inc rax
; _len_48^2773 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3340
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], rdx
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4799:
f_3340:
; ((t3450 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^2775 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3337:
; ((t3447 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3338
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4801 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3338:
; ((t3448 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_390
f_380:
; ((_col_64^2634 . rsi) (_obj_63^2633 . rdx) (k3366 . rcx))
 mov rax, undefined ; 
; _out/col_65^2635 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _wr-expr_66^2636 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _wr-lst_67^2637 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _bytevector->list_68^2638 = r10
 mov r10, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_381
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov rdi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_383
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_384
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_386
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3334
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], r9
 mov rax, [SELF + 64]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], r10
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov SELF, rdi
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_381
f_3334:
; ((t3440 . rcx))
 mov rdx, [SELF + 80]
 mov rsi, rcx
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3298
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 80], rax
 mov rcx, ALLOC
 add ALLOC, 88
 mov SELF, [___pretty_2dprint_2dhook] ; pretty-print-hook
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3298:
; ((t3395 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4802
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4802:
 mov rax, [SELF + 80]
; _x_44^2668 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4804
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_383
L4804:
 mov rax, [SELF + 80]
; _x_44^2669 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4806
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_384
L4806:
 mov rax, [SELF + 80]
; _x_44^2670 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4808
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov r11, L4810 ; 
 mov r15, L4811 ; 
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
L4808:
 mov rax, [SELF + 80]
; _x_44^2671 = rdx
 mov rdx, rax
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^2672 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4812
 mov rax, rsi
 jmp L4813
L4812:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L4813:
 cmp rax, FALSE
 je L4814
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3299
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 80]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4814:
 mov rax, [SELF + 80]
; _x_44^2673 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4816
 mov rax, [SELF + 80]
; _x_45^2674 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^2675 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^2676 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3301
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], rsi
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4816:
 mov rax, [SELF + 80]
; _x_44^2683 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4818
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3302
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 80]
 mov SELF, [___vector_2d_3elist] ; vector->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4818:
 mov rax, [SELF + 80]
; _x_44^2684 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 37 ; '18
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4820
 sub rsp, 24
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3304
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_386
L4820:
 mov rax, [SELF + 80]
; _x_44^2685 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4822
 mov rax, [SELF + 64]
 cmp rax, FALSE
 je L4824
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4824:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_70^2686 = rdx
 mov rdx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_388
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t3404 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3307
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4826 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4825:
L4822:
 mov rax, [SELF + 80]
; _x_44^2719 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 65 ; '32
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4827
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4829 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4827:
 mov rax, [SELF + 80]
; _x_44^2720 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4830
 mov rax, [SELF + 64]
 cmp rax, FALSE
 je L4832
 mov rax, [SELF + 80]
; _c_46^2722 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3319
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, 3 ; '1
 mov rdi, FALSE
 mov r8, 3 ; '1
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4832:
 mov rax, [SELF + 80]
; _x_44^2728 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _code_70^2727 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3320
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4834 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4833:
L4830:
 mov rax, [SELF + 80]
; _x_44^2737 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4835
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4837 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4835:
 mov rax, [SELF + 80]
; _x_44^2738 = rdx
 mov rdx, rax
; _x_44^2739 = rsi
 mov rsi, rdx
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 17 ; '8
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4838
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4839
L4838:
 mov rax, FALSE
L4839:
 cmp rax, FALSE
 je L4840
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4842 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4840:
 mov rax, [SELF + 80]
; _x_44^2740 = rdx
 mov rdx, rax
; _x_44^2741 = rsi
 mov rsi, rdx
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 17 ; '8
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4843
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^2742 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 jmp L4844
L4843:
 mov rax, FALSE
L4844:
 cmp rax, FALSE
 je L4845
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4847 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4845:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3333
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___void] ; void
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4846:
L4841:
L4836:
L4831:
L4828:
L4823:
L4821:
L4819:
L4817:
L4815:
L4809:
L4807:
L4805:
L4803:
f_3333:
; ((t3439 . rcx))
 mov rax, [SELF + 40]
; _y_45^2744 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 cmp rax, r11
 jne L4848
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4850 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_378
L4848:
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4851 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_378
L4849:
f_3320:
; ()
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3321
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_379
f_3321:
; ((t3425 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4852
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
L4852:
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3322
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 40]
 mov SELF, [____25_3c] ; %<
 mov rsi, 65 ; '32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4853:
f_3322:
; ((t3426 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4854
 sub rsp, 24
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3323
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4856 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4854:
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3325
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rcx, ALLOC
 add ALLOC, 56
 mov rdx, [SELF + 24]
 mov SELF, [____25_3e] ; %>
 mov rsi, 511 ; '255
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4855:
f_3325:
; ((t3429 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4857
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3328
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
; t3433 = rdx
 mov rdx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3329
 mov [ALLOC + 16], rdx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 32]
 mov SELF, [____25_3e] ; %>
 mov rsi, 131071 ; '65535
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4857:
 mov rax, [SELF + 48]
; _c_46^2732 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3331
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, 3 ; '1
 mov rdi, FALSE
 mov r8, 3 ; '1
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4858:
f_3331:
; ((t3436 . rcx))
 mov rax, [SELF + 40]
; _c_46^2735 = rdx
 mov rdx, rax
 sub rsp, 8
; _x_44^2736 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 CALL fill_bytes
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_3329:
; ((t3434 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4859
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L4861 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3328
L4859:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L4862 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3328
L4860:
f_3328:
; ((t3432 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3326
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3326:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3327
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3327:
; ((t3431 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_3323:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3324
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3324:
; ((t3428 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_3319:
; ((t3422 . rcx))
 mov rax, [SELF + 40]
; _c_46^2725 = rdx
 mov rdx, rax
 sub rsp, 8
; _x_44^2726 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 CALL fill_bytes
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_3307:
; ((t3405 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, 1 ; '0
 mov rsi, 1 ; '0
 mov rdi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 5 ; 
 jmp f_388
f_388:
; ((_col_73^2689 . rdi) (_j_72^2688 . rsi) (_i_71^2687 . rdx) (k3407 . rcx))
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3308
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, ALLOC
 add ALLOC, 72
; t3420 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L4863
 mov rcx, r8
 mov rdx, rsi
 mov rax, [SELF + 32]
; _s_45^2690 = r9
 mov r9, rax
 mov rax, r9
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov SELF, [____25_3c] ; %<
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4863:
 mov SELF, r8
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3308
L4864:
f_3308:
; ((t3408 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4865
 mov rax, [SELF + 24]
; _x_45^2692 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _i_46^2693 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^2694 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^2695 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L4867
 mov rax, r8
 jmp L4868
L4867:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L4868:
; _c_74^2691 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, L4869 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_75^2696 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4870
 mov rax, rsi
 jmp L4871
L4870:
 sub rsp, 16
 mov rax, L4872 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L4871:
 cmp rax, FALSE
 je L4873
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3309
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4873:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3314
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4874:
L4865:
 mov rax, [SELF + 24]
; _str_45^2710 = rdx
 mov rdx, rax
 mov rax, [SELF + 64]
; _from_46^2711 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _to_47^2712 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 sub rax, r11
  inc rax
; _len_48^2713 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], r8
 mov [rsp + 8], r8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3317
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4866:
f_3317:
; ((t3418 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
; _x_45^2715 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _y_46^2716 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3315
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3315:
; ((t3416 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4875 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_378
f_3314:
; ((t3415 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_388
f_3309:
; ((t3409 . rcx))
 mov rax, [SELF + 64]
; _str_45^2701 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _from_46^2702 = rsi
 mov rsi, rax
 mov rax, [SELF + 56]
; _to_47^2703 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 sub rax, r11
  inc rax
; _len_48^2704 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], r8
 mov [rsp + 8], r8
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3313
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r8
 mov [ALLOC + 72], rsi
 mov [ALLOC + 80], rdx
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3313:
; ((t3413 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
; _x_45^2706 = rdx
 mov rdx, rax
 mov rax, [SELF + 72]
; _y_46^2707 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 64]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3311
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3311:
; ((t3411 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3310
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4876 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3310:
; ((t3410 . rcx))
 sub rsp, 40
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_388
f_3304:
; ((t3402 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3305
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4877 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3305:
; ((t3403 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_384
f_3302:
; ((t3400 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3303
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4878 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3303:
; ((t3401 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_384
f_3301:
; ((t3398 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^2679 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 32
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3299:
; ((t3396 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_386:
; ((_bv_69^2656 . rdx) (k3389 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_70^2657 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_387
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3390 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3296
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [____25_2d] ; %-
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3296:
; ((t3391 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_387
f_387:
; ((_lst_72^2659 . rsi) (_i_71^2658 . rdx) (k3393 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
 je L4879
 mov rax, rdx
 jmp L4880
L4879:
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
L4880:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jge L4881
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4881:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3297
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov SELF, [____25_2d] ; %-
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4882:
f_3297:
; ((t3394 . rcx))
 sub rsp, 32
 mov rax, [SELF + 24]
; _bv_47^2664 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _i_48^2665 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_45^2662 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _y_46^2663 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 40]
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_387
f_384:
; ((_col_70^2644 . rsi) (_l_69^2643 . rdx) (k3377 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4883
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_71^2646 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_385
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3378 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3289
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
; t3380 = r9
 mov r9, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4885
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3290
 mov [ALLOC + 16], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4887 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4885:
 mov SELF, r9
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3289
L4886:
L4883:
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4888 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4884:
f_3290:
; ((t3381 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^2655 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_380
f_3289:
; ((t3379 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^2654 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_385
f_385:
; ((_col_73^2648 . rsi) (_l_72^2647 . rdx) (k3383 . rcx))
 mov rax, rsi
 cmp rax, FALSE
 je L4889
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4891
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3292
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4893 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4891:
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4894
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4896 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4894:
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3294
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4897 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
L4895:
L4892:
L4889:
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4890:
f_3294:
; ((t3387 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3293
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
f_3293:
; ((t3386 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L4898 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_378
f_3292:
; ((t3385 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^2652 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3291
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_380
f_3291:
; ((t3384 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^2651 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_385
f_383:
; ((_col_70^2642 . rsi) (_expr_69^2641 . rdx) (k3371 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3284
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov [ALLOC + 56], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov rax, ALLOC
 add ALLOC, 80
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_374
f_3284:
; ((t3372 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4899
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3285
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_376
L4899:
 sub rsp, 32
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov [rsp + 16], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_384
L4900:
f_3285:
; ((t3373 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3287
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_377
f_3287:
; ((t3375 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3286
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_378
f_3286:
; ((t3374 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_380
f_381:
; ((_col_69^2639 . rdx) (k3368 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_382
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_382:
; ((_x_70^2640 . rdx) (k3369 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_378
f_379:
; ((_c_63^2623 . rdx) (k3364 . rcx))
 mov SELF, rcx
 mov rax, rdx
 mov r11, L4901 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L4902
 mov rcx, L4904 ; 
 jmp L4903
L4902:
 mov rax, rdx
 mov r11, L4905 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L4906
 mov rcx, L4908 ; 
 jmp L4907
L4906:
 mov rax, rdx
 mov r11, L4909 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L4910
 mov rcx, L4912 ; 
 jmp L4911
L4910:
 sub rsp, 8
 mov rax, rdx
 mov r11, L4913 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, L4914 ; 
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 mov rcx, r11
 cmp rax, FALSE
 cmove rcx, r15
L4911:
L4907:
L4903:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_378:
; ((_col_64^2621 . rsi) (_str_63^2620 . rdx) (k3361 . rcx))
 mov rax, rsi
 cmp rax, FALSE
 je L4915
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3283
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4915:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4916:
f_3283:
; ((t3362 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4917
 mov rcx, [SELF + 24]
 mov rax, [SELF + 32]
; _s_45^2622 = rdx
 mov rdx, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov rsi, rax
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L4917:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4918:
f_377:
; ((_l_63^2606 . rdx) (k3359 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _head_64^2607 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rcx
 mov rax, rsi
 mov r11, L4919 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L4920
 mov rcx, L4922 ; 
 jmp L4921
L4920:
 mov rax, rsi
 mov r11, L4923 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L4924
 mov rcx, L4926 ; 
 jmp L4925
L4924:
 mov rax, rsi
 mov r11, L4927 ; 
 CALL structurally_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L4928
 mov rcx, L4930 ; 
 jmp L4929
L4928:
 sub rsp, 8
 mov rax, rsi
 mov r11, L4931 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 mov r11, L4932 ; 
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 mov rcx, r11
 cmp rax, FALSE
 cmove rcx, r15
L4929:
L4925:
L4921:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_376:
; ((_l_63^2602 . rdx) (k3357 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^2604 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_374:
; ((_l_63^2583 . rdx) (k3353 . rcx))
 mov rax, undefined ; 
; _length1?_64^2584 = rsi
 mov rsi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_375
 mov rax, ALLOC
 add ALLOC, 16
 mov rsi, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _head_65^2589 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _tail_66^2590 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, L4933 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4934
 SET_T rax
 jmp L4935
L4934:
 mov rax, rdi
 mov r11, L4936 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4937
 SET_T rax
 jmp L4938
L4937:
 mov rax, rdi
 mov r11, L4939 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L4940
 SET_T rax
 jmp L4941
L4940:
 sub rsp, 8
 mov rax, rdi
 mov r11, L4942 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L4941:
L4938:
L4935:
 cmp rax, FALSE
 je L4943
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rsi
 mov rdx, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_375
L4943:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4944:
f_375:
; ((_l_65^2585 . rdx) (k3355 . rcx))
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4945
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^2587 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 jmp L4946
L4945:
 mov rcx, FALSE
L4946:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_371:
; ((k3579 . rcx))
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_344:
; ((k3662 . rcx))
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _x_48^2510 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L4947
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4947:
 mov rax, [___run_2dverbose] ; run-verbose
; _newname_49^2512 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3464
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4948:
f_3464:
; ((t3666 . rcx))
; _oldval_51^2514 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3463
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_346
 mov rsi, ALLOC
 add ALLOC, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_348
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rdi, ALLOC
 add ALLOC, 32
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_345
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov SELF, [___dynamic_2dwind] ; dynamic-wind
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_345:
; ((k3667 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_348:
; ((k3677 . rcx))
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 SET_T rsi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_346:
; ((k3668 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___with_2dtemporary_2dfiles] ; with-temporary-files
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_347
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_347:
; ((k3669 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3466
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___temporary_2dfile] ; temporary-file
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3466:
; ((t3671 . rcx))
; _tmp_52^2515 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3471
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___qs] ; qs
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3471:
; ((t3676 . rcx))
 mov rdx, L4949 ; 
 mov rsi, L4950 ; 
 mov rdi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3470
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3470:
; ((t3675 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3469
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___execute] ; execute
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3469:
; ((t3674 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3467
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___check_2dstatus] ; check-status
 mov rsi, L4951 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3467:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3468
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___with_2dinput_2dfrom_2dfile] ; with-input-from-file
 mov rsi, [___read_2dall] ; read-all
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3468:
; ((t3673 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3465
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [___trim] ; trim
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3465:
; ((t3670 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___values] ; values
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3463:
; ((t3665 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3462
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3462:
; ((t3663 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_332:
; ((_args_48^2444 . rdx) (k3716 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4952
 mov rax, L4954 ; 
 jmp L4953
L4952:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4953:
; _prefix_50^2446 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L4955
 mov rax, null ; 
 jmp L4956
L4955:
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4956:
; _rest2_51^2449 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L4957
 mov rax, FALSE
 jmp L4958
L4957:
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4958:
; _extension_53^2453 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L4959
 mov rax, null ; 
 jmp L4960
L4959:
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4960:
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3498
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3498:
; ((t3724 . rcx))
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3493
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [___temporary_2ddirectory] ; temporary-directory
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3493:
; ((t3718 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3494
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___number_2d_3estring] ; number->string
 LIBCALL1 time, 0
  INT2FIX rax
 mov rdx, rax
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3494:
; ((t3719 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3495
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [___number_2d_3estring] ; number->string
 LIBCALL0 getpid
  INT2FIX rax
 mov rdx, rax
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3495:
; ((t3720 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3496
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3496:
; ((t3721 . rcx))
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3497
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rcx
 mov rax, ALLOC
 add ALLOC, 64
; t3723 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L4961
 mov rcx, rdx
 mov rdx, L4963 ; 
 mov rsi, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4961:
 mov SELF, rdx
 mov rcx, L4964 ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3497
L4962:
f_3497:
; ((t3722 . rcx))
 mov rdx, [SELF + 24]
 mov rsi, L4965 ; 
 mov rdi, [SELF + 32]
 mov r8, L4966 ; 
 mov r9, [SELF + 40]
 mov r10, L4967 ; 
 mov r12, [SELF + 48]
 mov rax, L4968 ; 
 mov [locals + 0], rax
 mov rax, [SELF + 56]
 mov [locals + 8], rax
 mov rax, rcx
 mov [locals + 16], rax
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 12 ; 
 jmp rax
f_316:
; ((_prefix_48^2323 . rdx) (k3777 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3526
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov rdx, [rdx + 8]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3526:
; ((t3780 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3524
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3524:
; ((t3778 . rcx))
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^2324 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L4969
 mov rax, [SELF + 24]
; _x_44^2325 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4970
L4969:
 mov rax, L4971 ; 
L4970:
 mov [rsp + 0], rax
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_295:
; ((_str_47^2263 . rdx) (k3815 . rcx))
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_48^2264 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3540
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___sub1] ; sub1
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3540:
; ((t3820 . rcx))
 mov rdx, [SELF + 16]
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_296
 mov rsi, ALLOC
 add ALLOC, 16
 mov rdi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3538
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___scan] ; scan
 mov r8, -1 ; '-1
 mov rax, [SELF + 8]
 mov r11, 6 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3538:
; ((t3816 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4972
 mov rax, [SELF + 16]
; _str_45^2271 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 sub rax, r11
  inc rax
; _len_48^2274 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3539
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4972:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4973:
f_3539:
; ((t3817 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^2276 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_296:
; ((_x_49^2267 . rdx) (k3819 . rcx))
 mov SELF, rcx
 sub rsp, 16
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, L4974 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_286:
; ((_fill_49^2154 . rdi) (_n_48^2153 . rsi) (_str_47^2152 . rdx) (k3865 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L4975
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L4976
L4975:
 mov rax, L4977 ; 
L4976:
; _fill_50^2155 = r8
 mov r8, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_51^2156 = r9
 mov r9, rax
 sub rsp, 16
 mov [rsp + 0], rsi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3571
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], r9
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov SELF, [____25_3e] ; %>
 mov rdx, r9
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3571:
; ((t3866 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4978
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4978:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3573
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 48]
 mov rsi, [SELF + 32]
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4979:
f_3573:
; ((t3868 . rcx))
 mov rax, [SELF + 32]
; _c_46^2161 = rdx
 mov rdx, rax
 mov rsi, rcx
 mov rdi, FALSE
 mov r8, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3574
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, 35 ; '17
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3574:
; ((t3869 . rcx))
 mov rax, [SELF + 32]
; _c_46^2164 = rdx
 mov rdx, rax
 sub rsp, 8
; _x_44^2165 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 CALL fill_bytes
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov rsi, [SELF + 24]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_282:
; ((_args_49^2124 . rdi) (_pred_48^2123 . rsi) (_str_47^2122 . rdx) (k3873 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_50^2125 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L4980
 mov rax, 1 ; '0
 jmp L4981
L4980:
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4981:
; _i_52^2128 = r9
 mov r9, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L4982
 mov rax, null ; 
 jmp L4983
L4982:
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4983:
; _rest2_53^2131 = r10
 mov r10, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 jne L4984
 mov rax, 3 ; '1
 jmp L4985
L4984:
 mov rax, r10
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4985:
; _step_55^2135 = r12
 mov r12, rax
 mov rax, r10
 mov r11, null ; 
 cmp rax, r11
 jne L4986
 mov rax, null ; 
 jmp L4987
L4986:
 mov rax, r10
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4987:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_57^2141 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_283
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [locals + 0] ; _loop_57^2141
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r12
 mov [ALLOC + 48], r8
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, [locals + 0] ; _loop_57^2141
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 0] ; _loop_57^2141
 mov rax, [rax + 8]
; t3874 = local #1
 mov [locals + 8], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 8] ; t3874
 mov rdx, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_283
f_283:
; ((_i_58^2142 . rdx) (k3876 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
 je L4988
 mov rax, rdx
 jmp L4989
L4988:
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
L4989:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
; _x_59^2143 = rsi
 mov rsi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3576
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, ALLOC
 add ALLOC, 64
; t3880 = rdi
 mov rdi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L4990
 mov SELF, rdi
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3576
L4990:
 sub rsp, 8
 mov [rsp + 0], rdx
 mov rcx, rdi
 mov rsi, [SELF + 48]
 mov SELF, [____3e_3d] ; >=
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4991:
f_3576:
; ((t3877 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4992
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4992:
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_45^2146 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _i_46^2147 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^2148 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^2149 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L4994
 mov rax, r8
 jmp L4995
L4994:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L4995:
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3577
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4993:
f_3577:
; ((t3878 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L4996
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L4996:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3578
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 24]
 mov rsi, [SELF + 32]
 mov SELF, [____25_2b] ; %+
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L4997:
f_3578:
; ((t3879 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_283
f_277:
; ((_opts_48^2060 . rsi) (_str_47^2059 . rdx) (k3884 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L4998
 mov rax, L5000 ; 
 jmp L4999
L4998:
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L4999:
; _delims_50^2062 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L5001
 mov rax, null ; 
 jmp L5002
L5001:
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5002:
; _rest2_51^2065 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 jne L5003
 mov rax, FALSE
 jmp L5004
L5003:
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5004:
; _keep_53^2069 = r9
 mov r9, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 jne L5005
 mov rax, null ; 
 jmp L5006
L5005:
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5006:
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_55^2075 = r10
 mov r10, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _dlen_56^2076 = r12
 mov r12, rax
 mov [ALLOC + 8], FALSE
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _first_57^2077 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _add_58^2080 = local #1
 mov [locals + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_278
 mov rax, [locals + 0] ; _first_57^2077
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 8] ; _add_58^2080
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_59^2098 = local #2
 mov [locals + 16], rax
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_279
 mov [ALLOC + 16], r10
 mov rax, [locals + 0] ; _first_57^2077
 mov [ALLOC + 24], rax
 mov rax, [locals + 8] ; _add_58^2080
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], rdi
 mov rax, [locals + 16] ; _loop_59^2098
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r12
 mov [ALLOC + 72], rdx
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, [locals + 16] ; _loop_59^2098
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [locals + 16] ; _loop_59^2098
 mov rax, [rax + 8]
; t3892 = local #3
 mov [locals + 24], rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [locals + 24] ; t3892
 mov rdx, 1 ; '0
 mov rsi, FALSE
 mov rdi, 1 ; '0
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_279
f_279:
; ((_from_62^2101 . rdi) (_last_61^2100 . rsi) (_i_60^2099 . rdx) (k3894 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3584
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdi
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [____3e_3d] ; >=
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3584:
; ((t3895 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5007
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3585
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t3897 = rdx
 mov rdx, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3587
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 56], rax
 mov rcx, ALLOC
 add ALLOC, 64
 mov rdx, [SELF + 56]
 mov rsi, [SELF + 40]
 mov SELF, [____25_3e] ; %>
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5007:
 mov rax, [SELF + 96]
; _x_45^2105 = rdx
 mov rdx, rax
 mov rax, [SELF + 56]
; _i_46^2106 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^2107 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^2108 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5009
 mov rax, r8
 jmp L5010
L5009:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5010:
; _c_63^2104 = rdx
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _scan_64^2109 = rsi
 mov rsi, rax
 mov rax, 2305843009213693963
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_280
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov [ALLOC + 72], rsi
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov [ALLOC + 88], rdx
 mov r11, ALLOC
 add ALLOC, 96
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t3900 = rdi
 mov rdi, rax
 mov rcx, [SELF + 16]
 mov SELF, rdi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_280
L5008:
f_280:
; ((_j_65^2110 . rdx) (k3902 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3589
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, [SELF + 80]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [____3e_3d] ; >=
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3589:
; ((t3903 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5011
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3590
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5011:
 mov rax, [SELF + 96]
; _x_45^2111 = rdx
 mov rdx, rax
 mov rax, [SELF + 88]
; _x_45^2113 = rsi
 mov rsi, rax
 mov rax, [SELF + 80]
; _i_46^2114 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^2115 = r8
 mov r8, rax
 mov rax, r8
 CALL lookup_char
; _x_45^2116 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5013
 mov rax, r9
 jmp L5014
L5013:
 mov rax, r8
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5014:
; _y_46^2112 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5015
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3591
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rcx, ALLOC
 add ALLOC, 72
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5015:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3595
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 80]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5016:
L5012:
f_3595:
; ((t3909 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_280
f_3591:
; ((t3905 . rcx))
; _i2_66^2117 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3594
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov rcx, ALLOC
 add ALLOC, 80
 mov rdx, [SELF + 24]
 mov rsi, [SELF + 56]
 mov SELF, [____25_3e] ; %>
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3594:
; ((t3908 . rcx))
 mov rax, rcx
 mov r11, rcx
 mov r15, [SELF + 72]
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t3906 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5017
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3593
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_278
L5017:
 sub rsp, 40
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 56]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_279
L5018:
f_3593:
; ((t3907 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_279
f_3590:
; ((t3904 . rcx))
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_279
f_3587:
; ((t3899 . rcx))
 mov rax, rcx
 mov r11, rcx
 mov r15, [SELF + 56]
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t3898 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5019
 sub rsp, 40
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov [rsp + 24], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 32], rax
 mov rdi, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rdx, [rsp + 16]
 mov rcx, [rsp + 24]
 mov SELF, [rsp + 32]
 add rsp, 40
 mov r11, 5 ; 
 jmp f_278
L5019:
 sub rsp, 8
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov r11, 2 ; 
 jmp f_3585
L5020:
f_3585:
; ()
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _x_63^2103 = rcx
 mov rcx, rax
 sub rsp, 16
 mov rax, rcx
 mov r11, rcx
 mov r15, null ; 
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_278:
; ((_last_61^2083 . rdi) (_to_60^2082 . rsi) (_from_59^2081 . rdx) (k3886 . rcx))
 mov rax, [SELF + 24]
; _str_45^2087 = r8
 mov r8, rax
; _from_46^2088 = r9
 mov r9, rdx
 mov rax, rsi
 mov r11, rdx
 sub rax, r11
  inc rax
; _len_48^2090 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3582
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r10
 mov [ALLOC + 48], r9
 mov [ALLOC + 56], r8
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, r10
 mov rdi, FALSE
 mov r8, r10
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3582:
; ((t3890 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
; _x_45^2092 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _y_46^2093 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rax, rcx
 mov r11, null ; 
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t3887 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 cmp rax, FALSE
 je L5021
 mov rax, [SELF + 24]
; _x_44^2096 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 jmp L5022
L5021:
 mov rax, [SELF + 32]
 mov r11, rdx
 mov [rax + 8], r11
 mov rax, r11
L5022:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, rdx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_275:
; ((_x_47^2041 . rdx) (k3915 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_274:
; ((_x_47^2040 . rdx) (k3916 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25_2d] ; %-
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_260:
; ((_reader_48^1982 . rsi) (_in_47^1981 . rdx) (k3943 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3612
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t3955 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5023
 sub rsp, 8
 mov [rsp + 0], rdx
 mov SELF, [___open_2dinput_2dfile] ; open-input-file
 mov rcx, rdi
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5023:
 mov SELF, rdi
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3612
L5024:
f_3612:
; ((t3944 . rcx))
; _port_49^1983 = rdx
 mov rdx, rcx
 mov rax, [SELF + 16]
; _x_44^1986 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5025
 mov rax, [SELF + 16]
; _x_44^1987 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5026
L5025:
 mov rax, [___read] ; read
L5026:
; _reader_50^1984 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_51^1988 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_261
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rdi
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3945 = r8
 mov r8, rax
 mov rcx, [SELF + 32]
 mov SELF, r8
 mov rdx, null ; 
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_261
f_261:
; ((_all_52^1989 . rdx) (k3947 . rcx))
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3614
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3614:
; ((t3948 . rcx))
; _v_53^1990 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_262
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; _failure_54^1991 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5027
 mov rcx, [SELF + 32]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_264
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rdx, ALLOC
 add ALLOC, 24
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_265
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rsi, ALLOC
 add ALLOC, 32
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5027:
 mov rcx, [SELF + 32]
 mov SELF, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_262
L5028:
f_265:
; ((_results_56^1997 . rdx) (k3952 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3615
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t3954 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _x_44^1998 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5029
 mov rax, [SELF + 24]
; _p_45^1999 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 5 ; '2
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rcx, rsi
 mov rdx, rdi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5029:
 mov SELF, rsi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3615
L5030:
f_3615:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [___values] ; values
 mov rsi, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_264:
; ((k3951 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rdx, [SELF + 16]
 mov SELF, [___reverse] ; reverse
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_262:
; ((k3949 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_263
 mov rax, ALLOC
 add ALLOC, 16
 mov rax, [SELF + 16]
; _x_56^1993 = rdx
 mov rdx, rax
 sub rsp, 24
; _x_45^1994 = rsi
 mov rsi, rdx
 mov rax, [SELF + 24]
; _y_46^1995 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_261
f_263:
; ((k3950 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rdx, L5031 ; 
 mov rsi, L5032 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_254:
; ((_options_48^1897 . rsi) (_opt_47^1896 . rdx) (k3978 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1898 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_255
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3979 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_255
f_255:
; ((_opts_50^1899 . rdx) (k3981 . rcx))
 mov rax, [SELF + 24]
; _x_45^1901 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rdx
 CALL member_eq
; _tmp_51^1900 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5033
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^1907 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^1904 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3630
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^1910 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_255
L5033:
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5034:
f_3630:
; ((t3982 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_253:
; ((_def_49^1887 . rdi) (_args_48^1886 . rsi) (_k_47^1885 . rdx) (k3983 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 mov rax, rdx
 mov r11, rsi
 CALL member_eq
; _tmp_50^1888 = r8
 mov r8, rax
 mov SELF, rcx
 mov rcx, r8
 cmp rcx, FALSE
 je L5035
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^1892 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L5036
L5035:
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5037
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 jmp L5038
L5037:
 mov rcx, FALSE
L5038:
L5036:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_251:
; ((_rest_48^1876 . rsi) (_first_47^1875 . rdx) (k3984 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _recur_49^1877 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_252
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3985 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r8
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_252
f_252:
; ((_rest_51^1879 . rsi) (_x_50^1878 . rdx) (k3987 . rcx))
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5039
; _x_45^1881 = rdi
 mov rdi, rdx
 sub rsp, 32
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3632
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_252
L5039:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5040:
f_3632:
; ((t3988 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_247:
; ((_lst_48^1853 . rsi) (_n_47^1852 . rdx) (k3994 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1854 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_248
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t3995 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rsi
 mov [rsp + 16], rcx
 mov SELF, r8
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_248
f_248:
; ((_n_51^1856 . rsi) (_lst_50^1855 . rdx) (k3997 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_52^1857 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5041
 mov rax, rdi
 jmp L5042
L5041:
 sub rsp, 8
 mov rax, rsi
 test rax, 1
 je L5043
 mov rax, rsi
 jmp L5044
L5043:
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L5044:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5042:
 cmp rax, FALSE
 je L5045
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5045:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^1861 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3637
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [___sub1] ; sub1
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5046:
f_3637:
; ((t3999 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
; _x_44^1864 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3636
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_248
f_3636:
; ((t3998 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_238:
; ((_lst_47^1791 . rdx) (k4029 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25apply] ; %apply
 mov rsi, rdx
 mov rdx, [___append] ; append
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_234:
; ((_start+step_48^1769 . rsi) (_n_47^1768 . rdx) (k4033 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L5047
 mov rax, 1 ; '0
 jmp L5048
L5047:
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5048:
; _start_50^1771 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L5049
 mov rax, null ; 
 jmp L5050
L5049:
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5050:
; _rest2_51^1774 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 jne L5051
 mov rax, 3 ; '1
 jmp L5052
L5051:
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5052:
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 jne L5053
 mov rax, null ; 
 jmp L5054
L5053:
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5054:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_55^1784 = r9
 mov r9, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_235
 mov [ALLOC + 16], r9
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t4034 = r10
 mov r10, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r10
 mov rsi, rdx
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_235
f_235:
; ((_n_57^1786 . rsi) (_i_56^1785 . rdx) (k4036 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3657
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, [____3c_3d] ; <=
 mov rdx, rsi
 mov rsi, 1 ; '0
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3657:
; ((t4037 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5055
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, null ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5055:
 mov rax, [SELF + 40]
; _x_45^1787 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3659
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [___add1] ; add1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5056:
f_3659:
; ((t4039 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3660
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov rdx, [SELF + 16]
 mov SELF, [___sub1] ; sub1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3660:
; ((t4040 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3658
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_235
f_3658:
; ((t4038 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_232:
; ((_lis_47^1757 . rdx) (k4041 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _recur_48^1758 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_233
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4042 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_233
f_233:
; ((_lis_49^1759 . rdx) (k4044 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5057
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5057:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_50^1761 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _tail_51^1763 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3664
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [___delete] ; delete
 mov rdx, rsi
 mov rsi, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5058:
f_3664:
; ((t4047 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3662
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_233
f_3662:
; ((t4045 . rcx))
; _new-tail_52^1765 = rdx
 mov rdx, rcx
 mov rsi, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3663
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [___equal_3d_3f] ; equal=?
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3663:
; ((t4046 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5059
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5059:
 mov rax, [SELF + 40]
; _x_45^1766 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^1767 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5060:
f_230:
; ((_lst_48^1754 . rsi) (_x_47^1753 . rdx) (k4048 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_231
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___filter] ; filter
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_231:
; ((_y_49^1755 . rdx) (k4049 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3665
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rsi, rdx
 mov rdx, [SELF + 16]
 mov SELF, [___equal_3d_3f] ; equal=?
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3665:
; ((t4050 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_223:
; ((_lss_47^1739 . rdx) (k4054 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___foldl] ; foldl
 mov rsi, null ; 
 mov rdi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_224
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_224:
; ((_lst_49^1741 . rsi) (_ls_48^1740 . rdx) (k4055 . rcx))
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___foldl] ; foldl
 mov rdi, rsi
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_225
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_225:
; ((_x_51^1743 . rsi) (_ls_50^1742 . rdx) (k4056 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_226
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3666
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [___any] ; any
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3666:
; ((t4057 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5061
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5061:
 mov rax, [SELF + 32]
; _x_45^1745 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
; _y_46^1746 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5062:
f_226:
; ((_y_52^1744 . rdx) (k4058 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rsi, [SELF + 16]
 mov SELF, [___equal_3d_3f] ; equal=?
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_220:
; ((_lss_48^1733 . rsi) (_ls_47^1732 . rdx) (k4059 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___foldl] ; foldl
 mov rdi, rsi
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_221
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_221:
; ((_lst_50^1735 . rsi) (_ls_49^1734 . rdx) (k4060 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3667
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov SELF, [___compl] ; compl
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_222
 mov [ALLOC + 16], rsi
 mov rdx, ALLOC
 add ALLOC, 24
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_222:
; ((_x_51^1736 . rdx) (k4062 . rcx))
 mov rax, [SELF + 16]
; _lst_46^1738 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rdx
 mov r11, rsi
 CALL member_equal
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3667:
; ((t4061 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___filter] ; filter
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_218:
; ((_xs_48^1725 . rsi) (_lst_47^1724 . rdx) (k4063 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___foldl] ; foldl
 mov rdi, rsi
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_219
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_219:
; ((_x_50^1727 . rsi) (_r_49^1726 . rdx) (k4064 . rcx))
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdx
 CALL member_equal
 mov rcx, rax
 cmp rcx, FALSE
 je L5063
 mov rcx, rdx
 jmp L5064
L5063:
 mov rax, rsi
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
L5064:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_215:
; ((_lists_47^1701 . rdx) (k4065 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lp_48^1702 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_216
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4066 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_216
f_216:
; ((_prev_50^1704 . rsi) (_lists_49^1703 . rdx) (k4068 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5065
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _first_51^1707 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_52^1708 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5067
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lp2_53^1713 = r9
 mov r9, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_217
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t4069 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3670
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r10
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___last_2dpair] ; last-pair
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5067:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r8
 mov rsi, rdi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_216
L5068:
L5065:
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5066:
f_3670:
; ((t4070 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_217
f_217:
; ((_rest_55^1715 . rsi) (_tail-cons_54^1714 . rdx) (k4072 . rcx))
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5069
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _next_56^1717 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _rest_57^1718 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, 3 ; '1
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3671
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4075 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rdi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5071
 mov SELF, [___last_2dpair] ; last-pair
 mov rcx, r9
 mov rdx, rdi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5071:
 mov SELF, r9
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3671
L5072:
L5069:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5070:
f_3671:
; ((t4074 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_217
f_213:
; ((_lst_48^1697 . rsi) (_x_47^1696 . rdx) (k4076 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_214
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov SELF, [___position] ; position
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_214:
; ((_x_49^1698 . rdx) (k4077 . rcx))
 mov rax, [SELF + 16]
; _x_44^1699 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdx
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_211:
; ((_lst_48^1689 . rsi) (_pred_47^1688 . rdx) (k4078 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1690 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_212
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4079 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, rsi
 mov rsi, 1 ; '0
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_212
f_212:
; ((_i_51^1692 . rsi) (_lst_50^1691 . rdx) (k4081 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5073
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5073:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3673
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5074:
f_3673:
; ((t4082 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5075
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5075:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3674
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 24]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5076:
f_3674:
; ((t4083 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^1695 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_212
f_207:
; ((_lst_48^1674 . rsi) (_pred_47^1673 . rdx) (k4089 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1675 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_208
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4090 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_208
f_208:
; ((_lst_50^1676 . rdx) (k4092 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5077
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5077:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3678
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5078:
f_3678:
; ((t4093 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5079
 mov rax, [SELF + 16]
; _x_44^1679 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5079:
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^1680 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_208
L5080:
f_205:
; ((_lst_48^1670 . rsi) (_proc_47^1669 . rdx) (k4094 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_206
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___foldr] ; foldr
 mov rdi, rsi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_206:
; ((_r_50^1672 . rsi) (_x_49^1671 . rdx) (k4095 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3679
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3679:
; ((t4096 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_203:
; ((_lst_48^1662 . rsi) (_pred_47^1661 . rdx) (k4097 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_204
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___foldr] ; foldr
 mov rdi, rsi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_204:
; ((_r_50^1664 . rsi) (_x_49^1663 . rdx) (k4098 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3680
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3680:
; ((t4099 . rcx))
 sub rsp, 16
 mov rax, rcx
 cmp rax, FALSE
 je L5081
 mov rax, [SELF + 16]
; _y_46^1668 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L5082
L5081:
 mov rax, [SELF + 16]
L5082:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_201:
; ((_lst_48^1656 . rsi) (_pred_47^1655 . rdx) (k4100 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_202
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___foldr] ; foldr
 mov rdi, rsi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_202:
; ((_r_50^1658 . rsi) (_x_49^1657 . rdx) (k4101 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3681
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3681:
; ((t4102 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5083
 mov rax, [SELF + 16]
; _x_45^1659 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _y_46^1660 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rcx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5083:
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5084:
f_199:
; ((_lst_47^1649 . rdx) (k4103 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^1650 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_200
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4104 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_200
f_200:
; ((_lst_49^1651 . rdx) (k4106 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^1652 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5085
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5085:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_200
L5086:
f_197:
; ((_lst_47^1642 . rdx) (k4107 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^1643 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_198
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4108 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_198
f_198:
; ((_lst_49^1644 . rdx) (k4110 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^1645 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5087
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5087:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_198
L5088:
f_181:
; ((_y_48^1515 . rsi) (_x_47^1514 . rdx) (k4146 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1516 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_182
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4147 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r8
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_182
f_182:
; ((_y_51^1518 . rsi) (_x_50^1517 . rdx) (k4149 . rcx))
 mov rax, rdx
 mov r11, rsi
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_52^1519 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5089
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5089:
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^1523 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5091
 mov rax, r8
 jmp L5092
L5091:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5092:
 cmp rax, FALSE
 je L5093
 mov rax, rsi
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^1525 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5095
 mov rax, r8
 jmp L5096
L5095:
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5096:
 cmp rax, FALSE
 je L5097
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, [____25_3d] ; %=
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5097:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5098:
L5093:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5099
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5101
 sub rsp, 32
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3700
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_182
L5101:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5102:
L5099:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5103
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5105
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _xlen_53^1534 = r8
 mov r8, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _ylen_54^1535 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3701
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rsi
 mov [ALLOC + 48], r8
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [____25_3d] ; %=
 mov rdx, r8
 mov rsi, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5105:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5106:
L5103:
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5107
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5109
 mov rax, rdx
 mov r11, rsi
 CALL structurally_equal
 mov rcx, rax
 jmp L5110
L5109:
 mov rcx, FALSE
L5110:
 jmp L5108
L5107:
 mov rax, rdx
 mov r11, rsi
 CALL structurally_equal
 mov rcx, rax
L5108:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5104:
L5100:
L5094:
L5090:
f_3701:
; ((t4151 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5111
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop2_55^1538 = rdx
 mov rdx, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_183
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t4152 = rsi
 mov rsi, rax
 mov rcx, [SELF + 16]
 mov SELF, rsi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_183
L5111:
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5112:
f_183:
; ((_i_56^1539 . rdx) (k4154 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3703
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
 mov [rsp + 8], rax
 mov rsi, [SELF + 16]
 mov SELF, [____3e_3d] ; >=
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3703:
; ((t4155 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5113
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5113:
 sub rsp, 32
 mov rax, [SELF + 24]
; _x_45^1542 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _i_46^1543 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
; _x_45^1540 = rdx
 mov rdx, rax
 mov rax, [SELF + 32]
; _i_46^1541 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3704
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_182
L5114:
f_3704:
; ((t4156 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5115
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3705
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [____25_2b] ; %+
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5115:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5116:
f_3705:
; ((t4157 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_183
f_3700:
; ((t4150 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5117
 sub rsp, 32
 mov rax, [SELF + 40]
; _x_44^1531 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
; _x_44^1530 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_182
L5117:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5118:
f_177:
; ((_lst_49^1505 . rdi) (_init_48^1504 . rsi) (_proc_47^1503 . rdx) (k4160 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_50^1506 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_178
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rdx
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4161 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_178
f_178:
; ((_lst_51^1507 . rdx) (k4163 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5119
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5119:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3707
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_178
L5120:
f_3707:
; ((t4164 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^1509 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_175:
; ((_lst_49^1496 . rdi) (_init_48^1495 . rsi) (_proc_47^1494 . rdx) (k4165 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_50^1497 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_176
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4166 = r9
 mov r9, rax
 sub rsp, 16
 mov [rsp + 0], rsi
 mov [rsp + 8], rcx
 mov SELF, r9
 mov rdx, rdi
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_176
f_176:
; ((_r_52^1499 . rsi) (_lst_51^1498 . rdx) (k4168 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5121
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5121:
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3709
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5122:
f_3709:
; ((t4169 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
; _x_44^1501 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_176
f_170:
; ((_f_47^1484 . rdx) (k4176 . rcx))
 mov SELF, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_171
 mov [ALLOC + 16], rdx
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_171:
; ((_x_48^1485 . rdx) (k4177 . rcx))
 sub rsp, 24
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3712
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3712:
; ((t4178 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_166:
; ((_lst_48^1475 . rsi) (_pred_47^1474 . rdx) (k4181 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1476 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_167
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4182 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_167
f_167:
; ((_lst_50^1477 . rdx) (k4184 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5123
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5123:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3714
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5124:
f_3714:
; ((t4185 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5125
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5125:
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^1481 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_167
L5126:
f_164:
; ((_lst_48^1466 . rsi) (_pred_47^1465 . rdx) (k4186 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_49^1467 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_165
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4187 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_165
f_165:
; ((_lst_50^1468 . rdx) (k4189 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_51^1469 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5127
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5127:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3717
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5128:
f_3717:
; ((t4191 . rcx))
 mov rax, rcx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
; t4190 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5129
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5129:
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^1473 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_165
L5130:
f_162:
; ((_sep_48^1446 . rsi) (_xs_47^1445 . rdx) (k4192 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5131
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5132
L5131:
 mov rax, L5133 ; 
L5132:
; _sep_49^1447 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3718
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___open_2doutput_2dstring] ; open-output-string
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3718:
; ((t4193 . rcx))
; _out_50^1448 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_51^1451 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_163
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4194 = rdi
 mov rdi, rax
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_163
f_163:
; ((_xs_52^1452 . rdx) (k4196 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5134
 mov SELF, rcx
 mov rcx, L5136 ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5134:
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^1454 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5137
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_46^1456 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _p_47^1457 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3720
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdx, rsi
 mov rsi, FALSE
 mov rdi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5137:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_46^1459 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
; _p_47^1460 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdi
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3721
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdx, rsi
 mov rsi, FALSE
 mov rdi, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5138:
L5135:
f_3721:
; ()
 mov rax, [SELF + 48]
; _x_46^1462 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
; _p_47^1463 = rdx
 mov rdx, rax
 mov rsi, FALSE
 mov rdi, rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3722
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3722:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^1464 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_163
f_3720:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov SELF, [___get_2doutput_2dstring] ; get-output-string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_160:
; ((_x_47^1440 . rdx) (k4202 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5139
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5139:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5141
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L5141:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5143
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3724
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov SELF, [___string] ; string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5143:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L5145 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5144:
L5142:
L5140:
f_3724:
; ((t4203 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_159:
; ((_x_47^1425 . rdx) (k4204 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5146
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^1428 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^1429 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3725
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5146:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5148
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5148:
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^1438 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5150
 mov rax, rsi
 jmp L5151
L5150:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5151:
 cmp rax, FALSE
 je L5152
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___number_2d_3estring] ; number->string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5152:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5154
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___string] ; string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5154:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25error] ; %error
 mov rsi, rdx
 mov rdx, L5156 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5155:
L5153:
L5149:
L5147:
f_3725:
; ((t4205 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^1432 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_157:
; ((_xs_47^1421 . rdx) (k4207 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___for_2deach] ; for-each
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_158
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_158:
 cmp r11, 3
 jne f_c_158_1
; ((_x_46^1422 . rdx) (k4208 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rsi, FALSE
 mov rdi, [____25standard_2doutput_2dport] ; %standard-output-port
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_c_158_1:
; ((_p_47^1424 . rsi) (_x_46^1423 . rdx) (k4209 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdi, rsi
 mov rsi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_153:
; ((_reader_48^1405 . rsi) (_file-or-port_47^1404 . rdx) (k4210 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 32
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5157
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5158
L5157:
 mov rax, [___read] ; read
L5158:
; _rd_49^1409 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_155
 mov [ALLOC + 16], rdi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5159
 mov rax, [___call_2dwith_2dinput_2dfile] ; call-with-input-file
 jmp L5160
L5159:
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_154
 mov rax, ALLOC
 add ALLOC, 16
L5160:
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_154:
; ((_p_50^1408 . rsi) (_fp_49^1407 . rdx) (k4211 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rsi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_155:
; ((_port_50^1412 . rdx) (k4212 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_51^1413 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_156
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4213 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rdx, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_156
f_156:
; ((_xs_52^1414 . rdx) (k4215 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3727
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3727:
; ((t4216 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5161
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3728
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5161:
 sub rsp, 24
 mov rax, [SELF + 24]
; _y_46^1420 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_156
L5162:
f_3728:
; ((t4217 . rcx))
 sub rsp, 16
 mov rax, L5163 ; 
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_152:
; ((_x_47^1403 . rdx) (k4218 . rcx))
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_133:
; ((_guard_48^1350 . rsi) (_val_47^1349 . rdx) (k4248 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov [ALLOC + 8], rdx
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _val_47^1349 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5164
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5165
L5164:
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_134
 mov rax, ALLOC
 add ALLOC, 16
L5165:
; _guard_49^1351 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3736
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rdx, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3736:
; ((t4250 . rcx))
; _tag_50^1352 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_135
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_135:
; ((_args_51^1356 . rdx) (k4251 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5166
 mov rax, [SELF + 32]
 jmp L5167
L5166:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5167:
; _new_53^1358 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5168
 mov rax, null ; 
 jmp L5169
L5168:
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5169:
; _rest2_54^1361 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L5170
 mov rax, FALSE
 jmp L5171
L5170:
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5171:
; _restore_56^1365 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L5172
 mov rax, null ; 
 jmp L5173
L5172:
 mov rax, rdi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
L5173:
 mov rax, rsi
 mov r11, [SELF + 32]
 cmp rax, r11
 jne L5174
 sub rsp, 16
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5174:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3738
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t4255 = r9
 mov r9, rax
 mov rax, r8
 cmp rax, FALSE
 je L5176
 mov SELF, r9
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3738
L5176:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, r9
 mov rdx, rsi
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5177:
L5175:
f_3738:
; ((t4253 . rcx))
 mov rax, [SELF + 24]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 16
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_134:
; ((_x_49^1355 . rdx) (k4249 . rcx))
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_131:
; ((_args_47^1340 . rdx) (k4256 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3739
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [___for_2deach] ; for-each
 mov rsi, rdx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_132
 mov rdx, ALLOC
 add ALLOC, 16
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_132:
 cmp r11, 3
 jne f_c_132_1
; ((_x_46^1341 . rdx) (k4261 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rsi, FALSE
 mov rdi, [____25standard_2doutput_2dport] ; %standard-output-port
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_c_132_1:
; ((_p_47^1343 . rsi) (_x_46^1342 . rdx) (k4262 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdi, rsi
 mov rsi, FALSE
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_3739:
; ()
 mov rax, [____25standard_2doutput_2dport] ; %standard-output-port
; _p_46^1345 = rcx
 mov rcx, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^1347 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, L5178 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3740
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, rcx
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3740:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___void] ; void
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_127:
; ((k4272 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_126:
; ((_i_49^1319 . rdx) (k4275 . rcx))
 mov rax, rdx
 mov r11, [SELF + 24]
 cmp rax, r11
 jl L5179
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5179:
 mov rax, rdx
 FIX2INT rax
  mov r11, [argv]
  mov rax, [r11 + rax * CELLS(1)]
  call alloc_zstring
; _x_45^1320 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3747
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_126
L5180:
f_3747:
; ((t4276 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_125:
; ((_port_47^1301 . rdx) (k4277 . rcx))
 mov rax, rdx
 mov r11, 11 ; '5
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _data_48^1302 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_49^1303 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _p_50^1305 = r8
 mov r8, rax
; _str_45^1307 = r9
 mov r9, rdi
 mov rax, r8
 mov r11, 1 ; '0
 sub rax, r11
  inc rax
; _len_48^1310 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3748
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], r10
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, r10
 mov rdi, FALSE
 mov r8, r10
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3748:
; ((t4278 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^1312 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_122:
; ((k4280 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3753
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, 2049 ; '1024
 mov rdi, FALSE
 mov r8, 2049 ; '1024
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3753:
; ((t4296 . rcx))
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4281 = rdx
 mov rdx, rax
; _data_47^1261 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_123
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
; _close_47^1267 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_124
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
; _r/w_48^1268 = r8
 mov r8, rax
 mov rax, FALSE
 mov r11, FALSE
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 576460752303423494 ; 8/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _p_50^1300 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 5 ; '2
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r9
 mov r11, 7 ; '3
 mov r15, r8
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r9
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r9
 mov r11, 11 ; '5
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, r9
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_124:
; ((_str_49^1276 . rsi) (k4284 . rcx))
 mov rax, [SELF + 16]
; _x_44^1278 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _p1_50^1277 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
; _x_44^1280 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _s_51^1279 = rdi
 mov rdi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _n_52^1281 = r8
 mov r8, rax
 mov rax, rdi
 mov rax, [rax + 8]
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_53^1283 = r9
 mov r9, rax
 mov rax, rdx
 mov r11, r8
 dec rax
  add rax, r11
; _p2_54^1285 = r10
 mov r10, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3750
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], r10
 mov rax, ALLOC
 add ALLOC, 72
; t4288 = r12
 mov r12, rax
 mov rax, r10
 mov r11, r9
 cmp rax, r11
 jle L5181
 mov rax, r10
 mov r11, 10001 ; '5000
 dec rax
  add rax, r11
; _n_45^1287 = local #0
 mov [locals + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3752
 mov [ALLOC + 16], r12
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], rdi
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, [locals + 0] ; _n_45^1287
 mov rdi, FALSE
 mov r8, [locals + 0] ; _n_45^1287
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5181:
 mov SELF, r12
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3750
L5182:
f_3752:
; ((t4290 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _x_45^1288 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 32]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rax, [SELF + 40]
 mov r11, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 24]
; _x_44^1292 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
; _y_45^1293 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3750
f_3750:
; ()
 mov rax, [SELF + 56]
; _x_44^1294 = rcx
 mov rcx, rax
 mov rax, [SELF + 64]
; _y_45^1295 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 16
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _x_45^1298 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
; _y_46^1299 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^1296 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 16
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_123:
; ((k4282 . rcx))
 mov rax, [SELF + 16]
; _x_44^1271 = rdx
 mov rdx, rax
 mov rax, L5183 ; 
; _y_45^1272 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; _x_44^1273 = rdx
 mov rdx, rax
 mov SELF, rcx
 mov rax, rdx
 mov r11, 3 ; '1
 mov r15, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_112:
; ((_thunk_47^1209 . rsi) (_fname_46^1208 . rdx) (k4318 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_113
 mov [ALLOC + 16], rsi
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, [___call_2dwith_2doutput_2dfile] ; call-with-output-file
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_113:
; ((_in_48^1210 . rdx) (k4319 . rcx))
 mov rax, [____25standard_2doutput_2dport] ; %standard-output-port
; _old_49^1211 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_114
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_115
 mov [ALLOC + 16], rsi
 mov rdi, ALLOC
 add ALLOC, 24
 mov rsi, [SELF + 16]
 mov SELF, [___dynamic_2dwind] ; dynamic-wind
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_115:
; ((k4321 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [____25standard_2doutput_2dport], rax ; (set! %standard-output-port ...)
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_114:
; ((k4320 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [____25standard_2doutput_2dport], rax ; (set! %standard-output-port ...)
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_105:
; ((_proc_47^1200 . rsi) (_fname_46^1199 . rdx) (k4326 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3759
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___open_2dinput_2dfile] ; open-input-file
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3759:
; ((t4327 . rcx))
; _in_48^1201 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_107
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_106
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rcx, [SELF + 24]
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_106:
; ((k4328 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_107:
; ((_results_49^1202 . rdx) (k4329 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, [SELF + 16]
; _p_45^1203 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3760
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 5 ; '2
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3760:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [___values] ; values
 mov rsi, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_102:
; ((_proc_47^1195 . rsi) (_fname_46^1194 . rdx) (k4331 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3761
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___open_2doutput_2dfile] ; open-output-file
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3761:
; ((t4332 . rcx))
; _in_48^1196 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_104
 mov [ALLOC + 16], rdx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_103
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rcx, [SELF + 24]
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_103:
; ((k4333 . rcx))
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_104:
; ((_results_49^1197 . rdx) (k4334 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, [SELF + 16]
; _p_45^1198 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3762
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 5 ; '2
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3762:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [___values] ; values
 mov rsi, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_82:
; ((_p_46^695 . rdx) (k4336 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-error_47^696 = rsi
 mov rsi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_83
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5184
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5185
L5184:
 mov rax, [____25standard_2dinput_2dport] ; %standard-input-port
L5185:
; _port_48^701 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3764
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [___case_2dsensitive] ; case-sensitive
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3764:
; ((t4343 . rcx))
; _cs_49^702 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_84
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _eol_50^703 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _parse-token_51^707 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read1_52^708 = r8
 mov r8, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _skip-line_53^709 = r9
 mov r9, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _skip-whitespace_54^710 = r10
 mov r10, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-sharp_55^711 = r12
 mov r12, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-list_56^712 = local #0
 mov [locals + 0], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-delimited_57^713 = local #1
 mov [locals + 8], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-string_58^714 = local #2
 mov [locals + 16], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _docase_59^715 = local #3
 mov [locals + 24], rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _read-token_60^716 = local #4
 mov [locals + 32], rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_85
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693965
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_86
 mov [ALLOC + 16], r12
 mov rax, [locals + 0] ; _read-list_56^712
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], r8
 mov [ALLOC + 40], r9
 mov rax, [locals + 16] ; _read-string_58^714
 mov [ALLOC + 48], rax
 mov rax, [locals + 8] ; _read-delimited_57^713
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov rax, [locals + 24] ; _docase_59^715
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov [ALLOC + 88], rdi
 mov rax, [locals + 32] ; _read-token_60^716
 mov [ALLOC + 96], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 104], rax
 mov r11, ALLOC
 add ALLOC, 112
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_87
 mov [ALLOC + 16], r9
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_88
 mov [ALLOC + 16], r10
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r10
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_89
 mov [ALLOC + 16], r9
 mov rax, [locals + 24] ; _docase_59^715
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov [ALLOC + 40], r8
 mov rax, [locals + 0] ; _read-list_56^712
 mov [ALLOC + 48], rax
 mov rax, [locals + 32] ; _read-token_60^716
 mov [ALLOC + 56], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 72], rax
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, r12
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693961
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_91
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], r10
 mov rax, [locals + 32] ; _read-token_60^716
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], r8
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 72], rax
 mov r11, ALLOC
 add ALLOC, 80
 mov rax, [locals + 0] ; _read-list_56^712
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_95
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 8] ; _read-delimited_57^713
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_98
 mov rax, [locals + 8] ; _read-delimited_57^713
 mov [ALLOC + 16], rax
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 16] ; _read-string_58^714
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_99
 mov [ALLOC + 16], rdx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, [locals + 24] ; _docase_59^715
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_100
 mov rax, [locals + 24] ; _docase_59^715
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, [locals + 32] ; _read-token_60^716
 mov [rax + 8], r11
 mov rax, r11
 mov rcx, [SELF + 32]
 mov SELF, r8
 mov SELF, [SELF + 8]
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
f_100:
; ((_cs_62^1155 . rsi) (_prefix_61^1154 . rdx) (k4495 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_63^1156 = rdi
 mov rdi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_101
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4496 = r8
 mov r8, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r8
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_101
f_101:
; ((_lst_64^1157 . rdx) (k4498 . rcx))
 mov rax, [SELF + 40]
; _p_45^1159 = rsi
 mov rsi, rax
; _p_45^1160 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1161 = r8
 mov r8, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3850
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t4508 = r9
 mov r9, rax
 mov rax, r8
 cmp rax, FALSE
 je L5186
 mov SELF, r9
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3850
L5186:
 mov rax, rdi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3856
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, rdi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5187:
f_3856:
; ((t4509 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5188
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_3850
L5188:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1168 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1169 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5190
 mov rax, rsi
 jmp L5191
L5190:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5191:
; _c_49^1165 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
 mov r11, 9 ; '4
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, rdx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3850
L5189:
f_3850:
; ((t4499 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_66^1170 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5192
 mov rax, rdx
 jmp L5193
L5192:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^1174 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 65 ; '32
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_47^1176 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5194
 mov rax, rdi
 jmp L5195
L5194:
 mov rax, rsi
 mov r11, 19 ; '9
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_48^1177 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5196
 mov rax, r8
 jmp L5197
L5196:
 mov rax, rsi
 mov r11, 25 ; '12
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_49^1178 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5198
 mov rax, r9
 jmp L5199
L5198:
 mov rax, rsi
 mov r11, 21 ; '10
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_50^1179 = r10
 mov r10, rax
 mov rax, r10
 cmp rax, FALSE
 je L5200
 mov rax, r10
 jmp L5201
L5200:
 mov rax, rsi
 mov r11, 27 ; '13
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5201:
L5199:
L5197:
L5195:
; _x_67^1172 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5202
 mov rax, rsi
 jmp L5203
L5202:
 mov rax, L5204 ; 
; _lst_46^1181 = rdi
 mov rdi, rax
 mov rax, rcx
 mov r11, rdi
 CALL member_eqv
L5203:
L5193:
 cmp rax, FALSE
 je L5205
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3851
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 24]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5205:
 mov rax, [SELF + 56]
; _p_45^1183 = rdx
 mov rdx, rax
; _p_45^1184 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1185 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3852
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t4505 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5207
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3852
L5207:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3855
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5208:
L5206:
f_3855:
; ((t4507 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5209
 mov rax, rcx
 jmp L5210
L5209:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1190 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1191 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5211
 mov rax, rsi
 jmp L5212
L5211:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5212:
L5210:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3852
f_3852:
; ((t4501 . rcx))
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3854
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4504 = rdx
 mov rdx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L5213
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3854
L5213:
 sub rsp, 24
 mov [rsp + 0], rcx
 mov [rsp + 8], rdx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_99
L5214:
f_3854:
; ((t4503 . rcx))
 mov rax, [SELF + 32]
; _y_46^1193 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4502 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_101
f_3851:
; ((t4500 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___list_2d_3estring] ; list->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_99:
; ((_c_61^1144 . rdx) (k4493 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L5215
 mov rax, rdx
 jmp L5216
L5215:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^1148 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 131 ; '65
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
; _x_47^1150 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5217
 mov rax, rdi
 jmp L5218
L5217:
 mov rax, rsi
 mov r11, 181 ; '90
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
L5218:
 cmp rax, FALSE
 je L5219
 mov rax, rsi
 jmp L5220
L5219:
 mov rax, 65 ; '32
 mov r11, rsi
 or rax, r11
L5220:
; _x_44^1146 = rsi
 mov rsi, rax
 mov rax, rsi
 CALL lookup_char
; _x_45^1153 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5221
 mov rax, rdi
 jmp L5222
L5221:
 mov rax, rsi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5222:
L5216:
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_98:
; ((k4491 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5223 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_95
f_95:
; ((_delim_61^1049 . rdx) (k4470 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_62^1050 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_96
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4471 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rdx, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
f_96:
; ((_lst_63^1051 . rdx) (k4473 . rcx))
 mov rax, [SELF + 40]
; _p_45^1053 = rsi
 mov rsi, rax
; _p_45^1054 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1055 = r8
 mov r8, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3841
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t4487 = r9
 mov r9, rax
 mov rax, r8
 cmp rax, FALSE
 je L5224
 mov rax, rdi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r9
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3841
L5224:
 mov rax, rdi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3848
 mov [ALLOC + 16], r9
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rdi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5225:
f_3848:
; ((t4489 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5226
 mov rax, rcx
 jmp L5227
L5226:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1060 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1061 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5228
 mov rax, rsi
 jmp L5229
L5228:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5229:
L5227:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3841
f_3841:
; ((t4474 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5230
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5232 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_83
L5230:
 mov rax, [SELF + 56]
; _x_45^1063 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5233
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3842
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, [SELF + 32]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5233:
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, L5235 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 jne L5236
 mov rax, [SELF + 40]
; _p_45^1068 = rdx
 mov rdx, rax
; _p_45^1069 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1070 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3843
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t4484 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5238
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3843
L5238:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3847
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5239:
L5236:
 sub rsp, 24
 mov rax, [SELF + 32]
; _y_46^1143 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5237:
L5234:
L5231:
f_3847:
; ((t4486 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5240
 mov rax, rcx
 jmp L5241
L5240:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1075 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1076 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5242
 mov rax, rsi
 jmp L5243
L5242:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5243:
L5241:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3843
f_3843:
; ((t4476 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5244
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5246 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_83
L5244:
 mov rax, rcx
 mov r11, L5247 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5248
 sub rsp, 24
 mov rax, [SELF + 40]
; _y_46^1082 = rdx
 mov rdx, rax
 mov rax, L5250 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5248:
 mov rax, rcx
 mov r11, L5251 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5252
 sub rsp, 24
 mov rax, 19 ; '9
 CALL lookup_char
; _x_45^1088 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5254
 mov rax, rdx
 jmp L5255
L5254:
 mov rax, 19 ; '9
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5255:
; _x_45^1085 = rdx
 mov rdx, rax
 mov rax, [SELF + 40]
; _y_46^1086 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5252:
 mov rax, rcx
 mov r11, L5256 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5257
 sub rsp, 24
 mov rax, [SELF + 40]
; _y_46^1092 = rdx
 mov rdx, rax
 mov rax, L5259 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5257:
 mov rax, rcx
 mov r11, L5260 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5261
 sub rsp, 24
 mov rax, [SELF + 40]
; _y_46^1096 = rdx
 mov rdx, rax
 mov rax, L5263 ; 
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5261:
 mov rax, rcx
 mov r11, L5264 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5265
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop2_67^1099 = rdx
 mov rdx, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_97
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t4477 = rsi
 mov rsi, rax
 mov rcx, [SELF + 16]
 mov SELF, rsi
 mov rdx, 1 ; '0
 mov rsi, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_97
L5265:
 sub rsp, 24
 mov rax, [SELF + 40]
; _y_46^1141 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5266:
L5262:
L5258:
L5253:
L5249:
L5245:
f_97:
; ((_i_69^1101 . rsi) (_v_68^1100 . rdx) (k4479 . rcx))
 mov rax, [SELF + 48]
; _p_45^1103 = rdi
 mov rdi, rax
; _p_45^1104 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1105 = r9
 mov r9, rax
 mov rax, 2305843009213693960
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3845
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rsi
 mov rax, ALLOC
 add ALLOC, 72
; t4481 = r10
 mov r10, rax
 mov rax, r9
 cmp rax, FALSE
 je L5267
 mov rax, r8
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r10
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3845
L5267:
 mov rax, r8
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3846
 mov [ALLOC + 16], r10
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, r8
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5268:
f_3846:
; ((t4483 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5269
 mov rax, rcx
 jmp L5270
L5269:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1110 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1111 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5271
 mov rax, rsi
 jmp L5272
L5271:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5272:
L5270:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3845
f_3845:
; ((t4480 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5273
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5275 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_83
L5273:
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, L5276 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 jne L5277
 sub rsp, 24
 mov rax, [SELF + 40]
; _x_44^1117 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1118 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5279
 mov rax, rsi
 jmp L5280
L5279:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5280:
; _x_45^1115 = rdx
 mov rdx, rax
 mov rax, [SELF + 48]
; _y_46^1116 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_96
L5277:
 sub rsp, 16
 mov rax, L5281 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 jl L5282
 sub rsp, 16
 mov rax, L5284 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovg rax, FALSE
 jmp L5283
L5282:
 mov rax, FALSE
L5283:
 cmp rax, FALSE
 je L5285
 sub rsp, 32
 mov rax, [SELF + 64]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 sub rsp, 16
 sub rsp, 8
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, 97 ; '48
 mov rax, [rsp + 0]
 add rsp, 8
 sub rax, r11
  inc rax
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^1123 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 9 ; '4
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 dec rax
  add rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_97
L5285:
 sub rsp, 16
 mov rax, L5287 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 jl L5288
 sub rsp, 16
 mov rax, L5290 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovg rax, FALSE
 jmp L5289
L5288:
 mov rax, FALSE
L5289:
 cmp rax, FALSE
 je L5291
 sub rsp, 32
 mov rax, [SELF + 64]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 sub rsp, 16
 sub rsp, 8
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, 175 ; '87
 mov rax, [rsp + 0]
 add rsp, 8
 sub rax, r11
  inc rax
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^1130 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 9 ; '4
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 dec rax
  add rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_97
L5291:
 sub rsp, 16
 mov rax, L5293 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 jl L5294
 sub rsp, 16
 mov rax, L5296 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovg rax, FALSE
 jmp L5295
L5294:
 mov rax, FALSE
L5295:
 cmp rax, FALSE
 je L5297
 sub rsp, 32
 mov rax, [SELF + 64]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 sub rsp, 16
 sub rsp, 8
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, 111 ; '55
 mov rax, [rsp + 0]
 add rsp, 8
 sub rax, r11
  inc rax
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
; _x_44^1137 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 9 ; '4
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 dec rax
  add rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_97
L5297:
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5299 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_83
L5298:
L5292:
L5286:
L5278:
L5274:
f_3842:
; ((t4475 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___list_2d_3estring] ; list->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_91:
; ((_delim_61^1007 . rdx) (k4434 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_92
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rdx
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [___call_2dwith_2dcurrent_2dcontinuation] ; call-with-current-continuation
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_92:
; ((_return_62^1008 . rdx) (k4435 . rcx))
 mov rax, null ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _lst_63^1009 = rsi
 mov rsi, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _old_64^1010 = rdi
 mov rdi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_93
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdi
 mov r11, ALLOC
 add ALLOC, 64
 mov rax, [SELF + 16]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_65^1014 = r8
 mov r8, rax
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_94
 mov rax, [SELF + 72]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rsi
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 88], rax
 mov [ALLOC + 96], r8
 mov rax, [SELF + 80]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 112], rax
 mov r11, ALLOC
 add ALLOC, 120
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4440 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_94
f_94:
; ((k4442 . rcx))
 sub rsp, 16
 mov rax, 2305843009213693967
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3823
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 112], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 120], rax
 mov rax, ALLOC
 add ALLOC, 128
 mov [rsp + 0], rax
 mov rax, [SELF + 112]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_88
f_3823:
; ((t4443 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5300
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5302 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_83
L5300:
 mov rax, [SELF + 120]
; _y_46^1018 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5303
 mov rax, [SELF + 32]
; _p_45^1019 = rdx
 mov rdx, rax
; _p_45^1020 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1021 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3824
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
; t4447 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5305
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3824
L5305:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3826
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5306:
L5303:
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3827
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 112]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t4451 = rdx
 mov rdx, rax
 mov rax, L5307 ; 
 mov r11, rcx
 CALL structurally_equal
 cmp rax, FALSE
 je L5308
 sub rsp, 24
 mov rax, [SELF + 72]
 mov [rsp + 0], rax
 mov rax, 2305843009213693964
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3828
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 120]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov [ALLOC + 56], rdx
 mov rax, [SELF + 64]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 96], rax
 mov rax, ALLOC
 add ALLOC, 104
 mov [rsp + 8], rax
 mov rax, [SELF + 104]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, null ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5308:
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3839
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5309:
L5304:
L5301:
f_3839:
; ((t4468 . rcx))
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^1048 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4466 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
 mov r11, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3827
f_3828:
; ((t4452 . rcx))
 mov rax, L5310 ; 
; _x_44^1031 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 CALL structurally_equal
 cmp rax, FALSE
 je L5311
 sub rsp, 16
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3829
 mov rax, [SELF + 88]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5311:
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3837
 mov rax, [SELF + 56]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 96]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_85
L5312:
f_3837:
; ((t4465 . rcx))
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
; _y_46^1046 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4463 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
 mov r11, rsi
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3827
f_3829:
; ((t4453 . rcx))
; _rest_68^1033 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3830
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov [ALLOC + 64], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 80], rax
 mov rax, ALLOC
 add ALLOC, 88
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_88
f_3830:
; ()
 mov rax, [SELF + 72]
 mov r11, [SELF + 80]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 16]
; _p_45^1036 = rcx
 mov rcx, rax
; _p_45^1037 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^1038 = rsi
 mov rsi, rax
 mov rax, 2305843009213693959
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3834
 mov rax, [SELF + 64]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 56], rax
 mov rax, ALLOC
 add ALLOC, 64
; t4460 = rdi
 mov rdi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5313
 mov rax, rdx
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, rdi
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3834
L5313:
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, rdx
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3835
 mov [ALLOC + 16], rdi
 mov rcx, ALLOC
 add ALLOC, 24
 mov rsi, 3 ; '1
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5314:
f_3835:
; ((t4462 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5315
 mov rax, rcx
 jmp L5316
L5315:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1043 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1044 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5317
 mov rax, rsi
 jmp L5318
L5317:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5318:
L5316:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3834
f_3834:
; ((t4459 . rcx))
 mov rax, [SELF + 56]
; _y_45^1035 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 CALL structurally_equal
; t4456 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5319
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3833
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 40]
 mov rdx, [rdx + 8]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5319:
 sub rsp, 24
 mov rax, [SELF + 56]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5321 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_83
L5320:
f_3833:
; ((t4458 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3832
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rsi, [SELF + 16]
 mov SELF, [___append] ; append
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3832:
; ((t4457 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3827:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_94
f_3826:
; ((t4449 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5322
 mov rax, rcx
 jmp L5323
L5322:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1026 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^1027 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5324
 mov rax, rsi
 jmp L5325
L5324:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5325:
L5323:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3824
f_3824:
; ()
 mov rax, [SELF + 40]
 mov r11, [SELF + 48]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3825
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov rdx, [rdx + 8]
 mov SELF, [___reverse] ; reverse
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3825:
; ((t4446 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_93:
; ((_c_65^1011 . rdx) (k4437 . rcx))
 mov rax, [SELF + 48]
 mov r11, [SELF + 56]
 mov [rax + 8], r11
 mov rax, r11
 mov rax, [SELF + 16]
; _y_45^1013 = rsi
 mov rsi, rax
 mov rax, rdx
 mov r11, rsi
 CALL structurally_equal
 cmp rax, FALSE
 je L5326
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3821
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rdx, [SELF + 32]
 mov rdx, [rdx + 8]
 mov SELF, [___reverse] ; reverse
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5326:
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5328 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_83
L5327:
f_3821:
; ((t4439 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_89:
; ((k4389 . rcx))
 mov rax, [SELF + 72]
; _p_45^832 = rdx
 mov rdx, rax
; _p_45^833 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^834 = rdi
 mov rdi, rax
 mov rax, 2305843009213693962
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3788
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 72], rax
 mov [ALLOC + 80], rcx
 mov rax, ALLOC
 add ALLOC, 88
; t4430 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5329
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3788
L5329:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3820
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5330:
f_3820:
; ((t4432 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5331
 mov rax, rcx
 jmp L5332
L5331:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^839 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^840 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5333
 mov rax, rsi
 jmp L5334
L5333:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5334:
L5332:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3788
f_3788:
; ((t4390 . rcx))
; _c_61^831 = rdx
 mov rdx, rcx
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5335
 sub rsp, 16
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5337 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_83
L5335:
 mov rax, rcx
 mov r11, L5338 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5339
 SET_T rax
 jmp L5340
L5339:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5341 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5340:
 cmp rax, FALSE
 je L5342
 sub rsp, 8
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 mov rcx, FALSE
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5342:
 mov rax, rcx
 mov r11, L5344 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5345
 SET_T rax
 jmp L5346
L5345:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5347 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5346:
 cmp rax, FALSE
 je L5348
 sub rsp, 8
 mov rax, [SELF + 80]
 mov [rsp + 0], rax
 SET_T rcx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5348:
 mov rax, rcx
 mov r11, L5350 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5351
 SET_T rax
 jmp L5352
L5351:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5353 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5352:
 cmp rax, FALSE
 je L5354
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3789
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 mov rsi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5354:
 mov rax, rcx
 mov r11, L5356 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5357
 SET_T rax
 jmp L5358
L5357:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5359 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5358:
 cmp rax, FALSE
 je L5360
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3790
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 mov rsi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5360:
 mov rax, rcx
 mov r11, L5362 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5363
 SET_T rax
 jmp L5364
L5363:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5365 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5364:
 cmp rax, FALSE
 je L5366
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3791
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 mov rsi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5366:
 mov rax, rcx
 mov r11, L5368 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5369
 SET_T rax
 jmp L5370
L5369:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5371 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5370:
 cmp rax, FALSE
 je L5372
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3792
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 mov rsi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5372:
 mov rax, rcx
 mov r11, L5374 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5375
 SET_T rax
 jmp L5376
L5375:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5377 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5376:
 cmp rax, FALSE
 je L5378
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3794
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 mov rsi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5378:
 mov rax, rcx
 mov r11, L5380 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5381
 SET_T rax
 jmp L5382
L5381:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5383 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5382:
 cmp rax, FALSE
 je L5384
 sub rsp, 16
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3796
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 mov rsi, FALSE
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5384:
 mov rax, rcx
 mov r11, L5386 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5387
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3807
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5389 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_91
L5387:
 mov rax, rcx
 mov r11, L5390 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5391
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3808
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5391:
 mov rax, rcx
 mov r11, L5393 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5394
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3811
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_99
L5394:
 mov rax, rcx
 mov r11, L5396 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5397
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3812
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_87
L5397:
 mov rax, rcx
 mov r11, L5399 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5400
 sub rsp, 16
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3813
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, null ; 
 SET_T rsi
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
L5400:
 mov rax, rcx
 mov r11, L5402 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5403
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3819
 mov rax, [SELF + 80]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5403:
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 80]
 mov [rsp + 8], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5405 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_83
L5404:
L5401:
L5398:
L5395:
L5392:
L5388:
L5385:
L5379:
L5373:
L5367:
L5361:
L5355:
L5349:
L5343:
L5336:
f_3819:
; ((t4429 . rcx))
 mov rdx, L5406 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3813:
; ((t4420 . rcx))
; _t_63^936 = rdx
 mov rdx, rcx
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_64^937 = rsi
 mov rsi, rax
 mov rax, L5407 ; 
; _x_45^939 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^941 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r8
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5408
 sub rsp, 8
 mov rax, rdi
 mov r11, rcx
 mov r15, r8
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5409
L5408:
 mov rax, FALSE
L5409:
 cmp rax, FALSE
 je L5410
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L5412 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5410:
 mov rax, L5413 ; 
; _x_45^944 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^946 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r8
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5414
 sub rsp, 8
 mov rax, rdi
 mov r11, rcx
 mov r15, r8
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5415
L5414:
 mov rax, FALSE
L5415:
 cmp rax, FALSE
 je L5416
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L5418 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5416:
 mov rax, L5419 ; 
; _x_45^949 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^951 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r8
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5420
 sub rsp, 8
 mov rax, rdi
 mov r11, rcx
 mov r15, r8
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5421
L5420:
 mov rax, FALSE
L5421:
 cmp rax, FALSE
 je L5422
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L5424 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5422:
 mov rax, L5425 ; 
; _x_45^954 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^956 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r8
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5426
 sub rsp, 8
 mov rax, rdi
 mov r11, rcx
 mov r15, r8
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5427
L5426:
 mov rax, FALSE
L5427:
 cmp rax, FALSE
 je L5428
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, L5430 ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5428:
 mov rax, 1 ; '0
 mov r11, rsi
 cmp rax, r11
 jne L5431
 mov rax, [SELF + 24]
; _p_45^959 = rdi
 mov rdi, rax
; _p_45^960 = r8
 mov r8, rdi
 mov rax, r8
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^961 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5433
 mov rax, r8
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, r9
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5433:
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3814
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov rax, r8
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rdx, r8
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5434:
L5431:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^972 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^973 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5435
 mov rax, r8
 jmp L5436
L5435:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5436:
; _y_46^969 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, rdi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^981 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 131 ; '65
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
; _x_47^983 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5437
 mov rax, r9
 jmp L5438
L5437:
 mov rax, r8
 mov r11, 181 ; '90
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
L5438:
 cmp rax, FALSE
 je L5439
 mov rax, r8
 jmp L5440
L5439:
 mov rax, 65 ; '32
 mov r11, r8
 or rax, r11
L5440:
 mov [rsp + 0], rax
 mov rax, L5441 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^975 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 131 ; '65
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
; _x_47^977 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5442
 mov rax, r9
 jmp L5443
L5442:
 mov rax, r8
 mov r11, 181 ; '90
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
L5443:
 cmp rax, FALSE
 je L5444
 mov rax, r8
 jmp L5445
L5444:
 mov rax, 65 ; '32
 mov r11, r8
 or rax, r11
L5445:
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5446
 mov rax, rsi
 mov r11, 3 ; '1
 cmp rax, r11
 SET_T rax
 cmovle rax, FALSE
 jmp L5447
L5446:
 mov rax, FALSE
L5447:
 cmp rax, FALSE
 je L5448
; _str_45^990 = rdi
 mov rdi, rcx
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _to_47^992 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
; _len_48^994 = r9
 mov r9, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3818
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r9
 mov [ALLOC + 48], rdi
 mov rcx, ALLOC
 add ALLOC, 56
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, r9
 mov rdi, FALSE
 mov r8, r9
 mov r9, FALSE
 mov r10, FALSE
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5448:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^1003 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^1004 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, r8
 cmp rcx, FALSE
 je L5450
 mov rcx, r8
 jmp L5451
L5450:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rcx, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rcx
 mov rcx, ALLOC
 add ALLOC, 16
L5451:
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5449:
L5432:
L5429:
L5423:
L5417:
L5411:
f_3818:
; ((t4427 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^996 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 3 ; '1
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3816
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3816:
; ((t4424 . rcx))
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3815
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4425 = rdx
 mov rdx, rax
 mov rax, rcx
 cmp rax, FALSE
 je L5452
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3815
L5452:
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, rdx
 mov rdx, L5454 ; 
 mov rsi, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_83
L5453:
f_3815:
; ((t4423 . rcx))
 mov rax, rcx
 CALL lookup_char
; _x_45^1000 = rdx
 mov rdx, rax
 sub rsp, 16
 mov rax, rdx
 cmp rax, FALSE
 je L5455
 mov rax, rdx
 jmp L5456
L5455:
 mov rax, rcx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5456:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3814:
; ((t4422 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5457
 mov rax, rcx
 jmp L5458
L5457:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^966 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^967 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5459
 mov rax, rsi
 jmp L5460
L5459:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5460:
L5458:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3812:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_86
f_3811:
; ((t4418 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3810
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25list] ; %list
 mov rsi, L5461 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3810:
; ((t4417 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3809
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
f_3809:
; ((t4416 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3808:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_86
f_3807:
; ((t4414 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___list_2d_3evector] ; list->vector
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3796:
; ((t4398 . rcx))
; _tok_63^901 = rdx
 mov rdx, rcx
 mov rax, L5462 ; 
; _y_45^903 = rsi
 mov rsi, rax
 mov rax, rcx
 mov r11, rsi
 CALL structurally_equal
 cmp rax, FALSE
 je L5463
 mov rax, [SELF + 48]
; _p_45^904 = rsi
 mov rsi, rax
; _p_45^905 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^906 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3797
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4409 = r9
 mov r9, rax
 mov rax, r8
 cmp rax, FALSE
 je L5465
 mov rax, rdi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r9
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3797
L5465:
 mov rax, rdi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3804
 mov [ALLOC + 16], r9
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rdi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5466:
L5463:
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3806
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, [___string] ; string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5464:
f_3806:
; ((t4413 . rcx))
 mov rdx, L5467 ; 
 mov rsi, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3805
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdi, [SELF + 16]
 mov SELF, [___string_2dappend] ; string-append
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3805:
; ((t4412 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5468 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_83
f_3804:
; ((t4411 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5469
 mov rax, rcx
 jmp L5470
L5469:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^911 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^912 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5471
 mov rax, rsi
 jmp L5472
L5471:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5472:
L5470:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3797
f_3797:
; ()
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3798
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5473 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_91
f_3798:
; ((t4400 . rcx))
; _lst_64^913 = rdx
 mov rdx, rcx
 mov rax, rcx
 CALL list_length
; _len_65^914 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3799
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 37 ; '18
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3799:
; ((t4401 . rcx))
; _bv_66^916 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_67^917 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_90
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4403 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3800
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, 1 ; '0
 mov rsi, [SELF + 16]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_90
f_3800:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_90:
; ((_lst_69^919 . rsi) (_i_68^918 . rdx) (k4405 . rcx))
 mov rax, rdx
 mov r11, [SELF + 40]
 cmp rax, r11
 jl L5474
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5474:
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _elt_70^920 = rdi
 mov rdi, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3803
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
; t4408 = r8
 mov r8, rax
 mov rax, rdi
 test rax, 1
 je L5476
 mov rax, rdi
 mov r11, 1 ; '0
 cmp rax, r11
 jl L5478
 mov rax, rdi
 mov r11, 513 ; '256
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
 jmp L5479
L5478:
 mov rax, FALSE
L5479:
 jmp L5477
L5476:
 mov rax, FALSE
L5477:
; _x_44^922 = r9
 mov r9, rax
 mov rax, r9
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L5480
 sub rsp, 8
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rcx, r8
 mov rdx, L5482 ; 
 mov rsi, rdi
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_83
L5480:
 mov SELF, r8
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3803
L5481:
L5475:
f_3803:
; ()
 sub rsp, 8
 mov rax, [SELF + 32]
; _x_44^924 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 40]
 mov r11, [SELF + 48]
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov rax, [SELF + 32]
; _x_44^925 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_90
f_3794:
; ((t4396 . rcx))
; _tok_63^888 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3795
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 21 ; '10
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3795:
; ((t4397 . rcx))
 mov rax, rcx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^893 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5483
 mov rax, rdx
 jmp L5484
L5483:
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5484:
; _x_44^891 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L5485
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5487 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_83
L5485:
 sub rsp, 16
 mov rax, rcx
 test rax, 1
 je L5488
 mov rax, rcx
 jmp L5489
L5488:
 mov rax, rcx
 test rax, 1
 je L5490
 mov rax, rcx
 jmp L5491
L5490:
 mov rax, rcx
 fld qword [rax + CELLS(1)]
  fisttp qword [rsp - CELLS(1)]
  mov rax, [rsp - CELLS(1)]
  INT2FIX rax
L5491:
L5489:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5486:
f_3792:
; ((t4394 . rcx))
; _tok_63^873 = rdx
 mov rdx, rcx
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3793
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 21 ; '10
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3793:
; ((t4395 . rcx))
 mov rax, rcx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^878 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5492
 mov rax, rdx
 jmp L5493
L5492:
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5493:
; _x_44^876 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L5494
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, L5496 ; 
 mov rsi, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 4 ; 
 jmp f_83
L5494:
 sub rsp, 16
 mov rax, rcx
 test rax, 1
 je L5497
 mov rax, FALSE
 jmp L5498
L5497:
 sub rsp, 8
 mov rax, rcx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5498:
 cmp rax, FALSE
 je L5499
 mov rax, rcx
 jmp L5500
L5499:
 mov rax, rcx
 test rax, 1
 je L5501
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _tmp_45^883 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 FIX2INT r11
  mov [rsp - CELLS(1)], r11
  fild qword [rsp - CELLS(1)]
  fstp qword [rax + CELLS(1)]
 jmp L5502
L5501:
 mov rax, rcx
L5502:
L5500:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5495:
f_3791:
; ((t4393 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 5 ; '2
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3790:
; ((t4392 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 17 ; '8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3789:
; ((t4391 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_88:
; ((k4379 . rcx))
 mov rax, [SELF + 24]
; _p_45^803 = rdx
 mov rdx, rax
; _p_45^804 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^805 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3784
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4385 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5503
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3784
L5503:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3787
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rsi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5504:
f_3787:
; ((t4386 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5505
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_3784
L5505:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^812 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^813 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5507
 mov rax, rsi
 jmp L5508
L5507:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5508:
; _c_49^809 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
 mov r11, 9 ; '4
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, rdx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3784
L5506:
f_3784:
; ((t4380 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5509
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5509:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^816 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 65 ; '32
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_47^818 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5511
 mov rax, rsi
 jmp L5512
L5511:
 mov rax, rdx
 mov r11, 19 ; '9
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_48^819 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5513
 mov rax, rdi
 jmp L5514
L5513:
 mov rax, rdx
 mov r11, 25 ; '12
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_49^820 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5515
 mov rax, r8
 jmp L5516
L5515:
 mov rax, rdx
 mov r11, 21 ; '10
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_50^821 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5517
 mov rax, r9
 jmp L5518
L5517:
 mov rax, rdx
 mov r11, 27 ; '13
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5518:
L5516:
L5514:
L5512:
 cmp rax, FALSE
 je L5519
 mov rax, [SELF + 24]
; _p_45^822 = rdx
 mov rdx, rax
; _p_45^823 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^824 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3785
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t4382 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5521
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3785
L5521:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3786
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5522:
L5519:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5520:
L5510:
f_3786:
; ((t4384 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5523
 mov rax, rcx
 jmp L5524
L5523:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^829 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^830 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5525
 mov rax, rsi
 jmp L5526
L5525:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5526:
L5524:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3785
f_3785:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_88
f_87:
; ((k4373 . rcx))
 mov rax, [SELF + 24]
; _p_45^788 = rdx
 mov rdx, rax
; _p_45^789 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^790 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3782
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
; t4375 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5527
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3782
L5527:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3783
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5528:
f_3783:
; ((t4377 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5529
 mov rax, rcx
 jmp L5530
L5529:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^795 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^796 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5531
 mov rax, rsi
 jmp L5532
L5531:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5532:
L5530:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3782
f_3782:
; ((t4374 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_62^798 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5533
 mov rax, rdx
 jmp L5534
L5533:
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, L5535 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5534:
; _x_44^797 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L5536
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_87
L5536:
 sub rsp, 8
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5537:
f_86:
; ((k4349 . rcx))
 mov rax, [SELF + 104]
; _p_45^721 = rdx
 mov rdx, rax
; _p_45^722 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^723 = rdi
 mov rdi, rax
 mov rax, 2305843009213693966
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3766
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 48], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 56], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 64], rax
 mov rax, [SELF + 56]
 mov [ALLOC + 72], rax
 mov rax, [SELF + 64]
 mov [ALLOC + 80], rax
 mov rax, [SELF + 72]
 mov [ALLOC + 88], rax
 mov rax, [SELF + 80]
 mov [ALLOC + 96], rax
 mov rax, [SELF + 88]
 mov [ALLOC + 104], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 112], rax
 mov rax, ALLOC
 add ALLOC, 120
; t4369 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5538
 mov rax, rsi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3766
L5538:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3781
 mov [ALLOC + 16], r8
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5539:
f_3781:
; ((t4371 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5540
 mov rax, rcx
 jmp L5541
L5540:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^728 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^729 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5542
 mov rax, rsi
 jmp L5543
L5542:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5543:
L5541:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3766
f_3766:
; ((t4350 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5544
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5544:
 mov rax, rcx
 mov r11, L5546 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5547
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_89
L5547:
 mov rax, rcx
 mov r11, L5549 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5550
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5552 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_91
L5550:
 mov rax, rcx
 mov r11, L5553 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5554
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5556 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_91
L5554:
 mov rax, rcx
 mov r11, L5557 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5558
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5560 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 3 ; 
 jmp f_91
L5558:
 mov rax, rcx
 mov r11, L5561 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5562
 mov rax, [SELF + 40]
; _p_45^744 = rdx
 mov rdx, rax
; _p_45^745 = rsi
 mov rsi, rdx
 mov rax, rsi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^746 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3772
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4359 = r8
 mov r8, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5564
 mov SELF, r8
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3772
L5564:
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3773
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rsi
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, rsi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5565:
L5562:
 mov rax, rcx
 mov r11, L5566 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5567
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3774
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5567:
 mov rax, rcx
 mov r11, L5569 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5570
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3775
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5570:
 mov rax, rcx
 mov r11, L5572 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5573
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3776
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 56]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_87
L5573:
 mov rax, rcx
 mov r11, L5575 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5576
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 64]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_98
L5576:
 mov rax, rcx
 mov r11, L5578 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5579
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3777
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 72]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, L5581 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_95
L5579:
 mov rax, rcx
 mov r11, L5582 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5583
 SET_T rax
 jmp L5584
L5583:
 mov rax, rcx
 mov r11, L5585 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5586
 SET_T rax
 jmp L5587
L5586:
 sub rsp, 8
 mov rax, rcx
 mov r11, L5588 ; 
 CALL structurally_equal
 mov [rsp + 0], rax
 SET_T r11
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
L5587:
L5584:
 cmp rax, FALSE
 je L5589
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 80]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5589:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_46^781 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 65 ; '32
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_47^783 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5591
 mov rax, rsi
 jmp L5592
L5591:
 mov rax, rdx
 mov r11, 19 ; '9
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_48^784 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5593
 mov rax, rdi
 jmp L5594
L5593:
 mov rax, rdx
 mov r11, 25 ; '12
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_49^785 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5595
 mov rax, r8
 jmp L5596
L5595:
 mov rax, rdx
 mov r11, 21 ; '10
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_50^786 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5597
 mov rax, r9
 jmp L5598
L5597:
 mov rax, rdx
 mov r11, 27 ; '13
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5598:
L5596:
L5594:
L5592:
 cmp rax, FALSE
 je L5599
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5599:
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3780
 mov rax, [SELF + 112]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 104]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 96]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 88]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_99
L5600:
L5590:
L5580:
L5577:
L5574:
L5571:
L5568:
L5563:
L5559:
L5555:
L5551:
L5548:
L5545:
f_3780:
; ((t4368 . rcx))
 mov rdx, rcx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3779
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3779:
; ((t4367 . rcx))
 sub rsp, 32
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3778
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_100
f_3778:
; ((t4366 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_85
f_3777:
; ((t4365 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_3776:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_86
f_3775:
; ((t4363 . rcx))
 mov rdx, L5601 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3774:
; ((t4362 . rcx))
 mov rdx, L5602 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3773:
; ((t4360 . rcx))
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5603
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_3772
L5603:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^753 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^754 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5605
 mov rax, rsi
 jmp L5606
L5605:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5606:
; _c_49^750 = rdx
 mov rdx, rax
 mov rax, [SELF + 24]
 mov r11, 9 ; '4
 mov r15, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, rdx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3772
L5604:
f_3772:
; ((t4358 . rcx))
 mov rax, rcx
 mov r11, L5607 ; 
 CALL structurally_equal
; t4351 = rdx
 mov rdx, rax
 mov rax, rdx
 cmp rax, FALSE
 je L5608
 mov rax, [SELF + 32]
; _p_45^755 = rsi
 mov rsi, rax
; _p_45^756 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _pc_46^757 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3768
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t4354 = r9
 mov r9, rax
 mov rax, r8
 cmp rax, FALSE
 je L5610
 mov rax, rdi
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, r9
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3768
L5610:
 mov rax, rdi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3770
 mov [ALLOC + 16], r9
 mov rcx, ALLOC
 add ALLOC, 24
 mov rdx, rdi
 mov rsi, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5611:
L5608:
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3771
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
L5609:
f_3771:
; ((t4357 . rcx))
 mov rdx, L5612 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3770:
; ((t4356 . rcx))
 sub rsp, 16
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5613
 mov rax, rcx
 jmp L5614
L5613:
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^762 = rdx
 mov rdx, rax
 mov rax, rdx
 CALL lookup_char
; _x_45^763 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5615
 mov rax, rsi
 jmp L5616
L5615:
 mov rax, rdx
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5616:
L5614:
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3768
f_3768:
; ()
 sub rsp, 16
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3769
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_86
f_3769:
; ((t4353 . rcx))
 mov rdx, L5617 ; 
 mov rsi, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25list] ; %list
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_85:
; ((_t_61^717 . rdx) (k4346 . rcx))
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3765
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [____25string_2d_3enumber] ; %string->number
 mov rsi, 21 ; '10
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3765:
; ((t4347 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5618
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5618:
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [___string_2d_3esymbol] ; string->symbol
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L5619:
f_84:
; ((_c_48^706 . rdx) (k4344 . rcx))
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rsi, rdx
 mov rdx, L5620 ; 
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 4 ; 
 jmp f_83
f_83:
; ((_args_49^698 . rsi) (_msg_48^697 . rdx) (k4338 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, L5621 ; 
 mov r11, 3 ; '1
 mov r15, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov [ALLOC + 24], r15
 mov rax, 720575940379279366 ; 10/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _exn_50^700 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, 7 ; '3
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, rdi
 mov r11, 9 ; '4
 mov r15, L5622 ; 
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, rdi
 mov r11, 11 ; '5
 mov r15, L5623 ; 
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25current_2dexception_2dhandler] ; %current-exception-handler
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_81:
; ((_arg_47^692 . rdx) (k4511 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 16
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5624
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 jmp L5625
L5624:
 sub rsp, 8
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
L5625:
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_79:
; ((k4512 . rcx))
 mov rax, [pending_signals]
  INT2FIX rax
; _n_46^679 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 cmp rax, r11
 jne L5626
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5626:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_47^681 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_80
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4513 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, rdi
 mov rdx, 3 ; '1
 mov rsi, 3 ; '1
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_80
L5627:
f_80:
; ((_i_49^683 . rsi) (_m_48^682 . rdx) (k4515 . rcx))
 mov rax, 1 ; '0
 mov r11, [SELF + 24]
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_50^684 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5628
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5628:
 sub rsp, 8
 mov rax, [SELF + 24]
; _x_44^685 = r8
 mov r8, rax
 mov rax, r8
 mov r11, rdx
 and rax, r11
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5630
 sub rsp, 32
 mov rax, rsi
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_80
L5630:
 mov rax, rsi
 mov r11, 1
  push rcx
  mov rcx, rax
  FIX2INT rcx
  dec rcx
  shl r11, cl
  pop rcx
  not r11
  and [pending_signals], r11
 mov rax, L5632 ; 
 mov r11, 3 ; '1
 mov r15, L5633 ; 
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov [ALLOC + 24], r15
 mov rax, 720575940379279366 ; 10/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _exn_51^690 = r8
 mov r8, rax
; t4521 = r9
 mov r9, r8
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3860
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], r9
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25list] ; %list
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5631:
L5629:
f_3860:
; ((t4524 . rcx))
 mov rax, [SELF + 32]
 mov r11, 7 ; '3
 mov r15, rcx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
 mov r11, 11 ; '5
 mov r15, L5634 ; 
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, [SELF + 16]
; t4517 = rdx
 mov rdx, rax
; _exn_45^689 = rsi
 mov rsi, rdx
 mov rcx, [SELF + 24]
 mov SELF, [____25current_2dexception_2dhandler] ; %current-exception-handler
 mov rdx, rsi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_78:
; ((_args_47^663 . rsi) (_msg_46^662 . rdx) (k4525 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov [ALLOC + 8], rdx
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _msg_46^662 = rdi
 mov rdi, rax
 mov [ALLOC + 8], rsi
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _args_47^663 = r8
 mov r8, rax
 mov [ALLOC + 8], FALSE
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loc_48^664 = r9
 mov r9, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3861
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], r9
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
; t4532 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, rdi
 mov rax, [rax + 8]
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5635
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + 8]
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5637
 mov rax, r8
 mov rax, [rax + 8]
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^667 = r12
 mov r12, rax
 sub rsp, 8
 mov rax, r12
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5638
L5637:
 mov rax, FALSE
L5638:
 jmp L5636
L5635:
 mov rax, FALSE
L5636:
 cmp rax, FALSE
 je L5639
 mov rax, r9
 mov r11, rdi
 mov r11, [r11 + 8]
 mov [rax + 8], r11
 mov rax, r11
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + 8]
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdi
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, r10
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + 8]
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, r8
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rcx, r11
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3861
L5639:
 sub rsp, 8
 mov rax, rdi
 mov rax, [rax + 8]
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5641
 mov rax, FALSE
 jmp L5642
L5641:
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + 8]
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5642:
 cmp rax, FALSE
 je L5643
 mov rax, rdi
 mov r11, L5645 ; 
 mov [rax + 8], r11
 mov rax, r11
 mov SELF, r10
 sub rsp, 8
 mov rax, rdi
 mov rax, [rax + 8]
 mov r11, r8
 mov r11, [r11 + 8]
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, r8
 mov r11, [rsp + 0]
 add rsp, 8
 mov [rax + 8], r11
 mov rcx, r11
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3861
L5643:
 mov SELF, r10
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3861
L5644:
L5640:
f_3861:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3862
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4528 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
; _x_44^677 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5646
 mov rax, L5648 ; 
 mov r11, 3 ; '1
 mov r15, [SELF + 16]
 mov r15, [r15 + 8]
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov [ALLOC + 24], r15
 mov rax, 720575940379279366 ; 10/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _exn_49^678 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 7 ; '3
 mov r15, [SELF + 24]
 mov r15, [r15 + 8]
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, rdx
 mov r11, 9 ; '4
 mov r15, [SELF + 32]
 mov r15, [r15 + 8]
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, rdx
 mov r11, 11 ; '5
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3862
L5646:
 sub rsp, 16
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3862
L5647:
f_3862:
; ((t4527 . rcx))
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25current_2dexception_2dhandler] ; %current-exception-handler
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_76:
; ((_exn_46^630 . rdx) (k4536 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 21 ; '10
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5649
 sub rsp, 8
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5650
L5649:
 mov rax, FALSE
L5650:
; _exn?_47^631 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5651
 mov rax, rdx
 mov r11, 5 ; '2
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5652
L5651:
 mov rax, L5653 ; 
L5652:
; _msg_48^634 = rdi
 mov rdi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5654
 mov rax, rdx
 mov r11, 9 ; '4
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5655
L5654:
 mov rax, FALSE
L5655:
; _loc_49^636 = r8
 mov r8, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3863
 mov [ALLOC + 16], r8
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t4553 = r9
 mov r9, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5656
 mov SELF, r9
 mov rax, rdx
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3863
L5656:
 sub rsp, 8
 mov [rsp + 0], rdx
 mov SELF, [____25list] ; %list
 mov rcx, r9
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5657:
f_3863:
; ((t4537 . rcx))
; _args_50^638 = rdx
 mov rdx, rcx
 mov rax, L5658 ; 
; _x_46^640 = rsi
 mov rsi, rax
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _p_47^641 = rdi
 mov rdi, rax
 sub rsp, 8
 mov [rsp + 0], rdi
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3864
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rcx, ALLOC
 add ALLOC, 48
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rdx, rsi
 mov rsi, FALSE
 mov rdi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3864:
; ()
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3865
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4551 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
 cmp rax, FALSE
 je L5659
 sub rsp, 8
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3873
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rdx, L5661 ; 
 mov rax, [SELF + 16]
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rsi, rax
 mov SELF, [___string_2dappend] ; string-append
 mov rdi, L5662 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5659:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3865
L5660:
f_3873:
; ((t4552 . rcx))
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _p_47^643 = rdx
 mov rdx, rax
 mov rsi, FALSE
 mov rdi, rdx
 mov rdx, rcx
 mov rcx, [SELF + 16]
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
f_3865:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3872
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___string_2dappend] ; string-append
 mov rsi, L5663 ; 
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3872:
; ((t4550 . rcx))
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _p_47^645 = rdx
 mov rdx, rax
 mov rsi, FALSE
 mov rdi, rdx
 mov rdx, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3866
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3866:
; ()
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3867
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4542 = rcx
 mov rcx, rax
 mov rax, [SELF + 16]
; _x_44^647 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_44^646 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 cmp rax, FALSE
 je L5664
 sub rsp, 8
 mov [rsp + 0], rcx
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_77
 mov rdx, ALLOC
 add ALLOC, 16
 mov rsi, [SELF + 16]
 mov SELF, [___for_2deach] ; for-each
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5664:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3867
L5665:
f_77:
; ((_arg_51^648 . rdx) (k4543 . rcx))
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _p_45^649 = rsi
 mov rsi, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^653 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, L5666 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdi
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3868
 mov [ALLOC + 16], rcx
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rdx, rsi
 mov rsi, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3868:
; ()
 mov rax, [SELF + 24]
; _x_46^655 = rcx
 mov rcx, rax
 mov rdx, rcx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3869
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rcx, ALLOC
 add ALLOC, 24
 mov SELF, [____25output_2dto_2dport] ; %output-to-port
 SET_T rsi
 mov rdi, [____25standard_2doutput_2dport] ; %standard-output-port
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3869:
; ()
 mov rax, [____25standard_2derror_2dport] ; %standard-error-port
; _p_45^656 = rcx
 mov rcx, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^660 = rdx
 mov rdx, rax
 sub rsp, 8
 mov rax, L5667 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, rcx
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3867:
; ()
 mov rcx, [SELF + 16]
 mov SELF, [___emergency_2dexit] ; emergency-exit
 mov rdx, 141 ; '70
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_74:
; ((_code_46^619 . rdx) (k4554 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5668
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5669
L5668:
 mov rax, 1 ; '0
L5669:
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _code_47^620 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 mov rax, [rax + 8]
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5670
 mov rax, rsi
 mov rax, rsi
 mov rax, [rax + 8]
 mov r11, 1 ; '0
 mov r15, 141 ; '70
 cmp rax, FALSE
 cmove r11, r15
 mov [rax + 8], r11
 mov rax, r11
 jmp L5671
L5670:
 mov rax, undefined ; 
L5671:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^624 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_75
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4556 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_75
f_75:
; ((k4558 . rcx))
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^625 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5672
 sub rsp, 16
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 FIX2INT rax
  LIBCALL1 exit, rax
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5672:
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^627 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _dw_49^626 = rdx
 mov rdx, rax
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^628 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [____25dynamic_2dwinds], rax ; (set! %dynamic-winds ...)
 sub rsp, 8
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3875
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov SELF, rax
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5673:
f_3875:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 2 ; 
 jmp f_75
f_73:
; ((_code_46^614 . rdx) (k4561 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5674
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5675
L5674:
 mov rax, 1 ; '0
L5675:
; _code_47^615 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 15 ; '7
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5676
 mov rax, rsi
 mov r11, 1 ; '0
 mov r15, 141 ; '70
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 mov rsi, rax
 jmp L5677
L5676:
 mov rax, undefined ; 
L5677:
 mov SELF, rcx
 mov rax, rsi
 FIX2INT rax
  LIBCALL1 _exit, rax
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_65:
; ((_port_48^453 . rdi) (_rd_47^452 . rsi) (_x_46^451 . rdx) (k4563 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _escape-symbol?_49^454 = r8
 mov r8, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_66
 mov r11, ALLOC
 add ALLOC, 16
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _show_52^500 = r9
 mov r9, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_68
 mov [ALLOC + 16], r9
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], r8
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r9
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r9
 mov rax, [rax + 8]
; t4569 = r10
 mov r10, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, r10
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_68
f_68:
; ((_x_53^501 . rdx) (k4571 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 7 ; '3
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5678
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3878
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5680 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5678:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5681
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3880
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5683 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5681:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 35 ; '17
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5684
 mov rax, [SELF + 32]
 cmp rax, FALSE
 je L5686
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3887
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5688 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5686:
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5687:
L5684:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 3 ; '1
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5689
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_54^540 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3896
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t4616 = rdi
 mov rdi, rax
 mov rax, [SELF + 32]
 cmp rax, FALSE
 je L5691
 sub rsp, 8
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 0], rax
 mov rcx, rdi
 mov rdx, rsi
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_66
L5691:
 mov SELF, rdi
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3896
L5692:
L5689:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 9 ; '4
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5693
 mov rax, [SELF + 32]
 cmp rax, FALSE
 je L5695
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3907
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5697 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5695:
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^581 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rsi
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5696:
L5693:
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^584 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5698
 mov rax, rsi
 jmp L5699
L5698:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5699:
 cmp rax, FALSE
 je L5700
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3912
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov SELF, [___number_2d_3estring] ; number->string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5700:
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5702
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5704 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5702:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 19 ; '9
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5705
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5707 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5705:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 21 ; '10
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5708
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^588 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^589 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^590 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], r8
 mov [rsp + 8], r8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3916
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], r8
 mov [ALLOC + 48], rdi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5708:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 37 ; '18
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5710
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3917
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5712 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5710:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 17 ; '8
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5713
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5714
L5713:
 mov rax, FALSE
L5714:
 cmp rax, FALSE
 je L5715
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5717 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5715:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 17 ; '8
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5718
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^611 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, FALSE
 SET_T r15
 cmp rax, FALSE
 cmove r11, r15
 mov rax, r11
 jmp L5719
L5718:
 mov rax, FALSE
L5719:
 cmp rax, FALSE
 je L5720
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5722 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5720:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 65 ; '32
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5723
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5725 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5723:
 sub rsp, 8
 mov rax, eof
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5726
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5728 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5726:
 sub rsp, 8
 mov rax, undefined
 mov [rsp + 0], rax
 mov r11, rdx
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5729
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5731 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5729:
 SET_T rax
 mov r11, rdx
 cmp rax, r11
 jne L5732
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5734 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5732:
 mov rax, FALSE
 mov r11, rdx
 cmp rax, r11
 jne L5735
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5737 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5735:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5738 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5736:
L5733:
L5730:
L5727:
L5724:
L5721:
L5716:
L5711:
L5709:
L5706:
L5703:
L5701:
L5694:
L5690:
L5685:
L5682:
L5679:
f_3917:
; ()
 mov rax, [SELF + 40]
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_54^598 = rcx
 mov rcx, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3918
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
; t4634 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 cmp rax, r11
 jle L5739
 sub rsp, 24
 mov rax, [SELF + 40]
 mov r11, 1 ; '0
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3920
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_68
L5739:
 mov SELF, rdx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3918
L5740:
f_3920:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_55^599 = rcx
 mov rcx, rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_72
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 48], rax
 mov r11, ALLOC
 add ALLOC, 56
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t4636 = rdx
 mov rdx, rax
 mov rcx, [SELF + 48]
 mov SELF, rdx
 mov rdx, 3 ; '1
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_72
f_72:
; ((_i_56^600 . rdx) (k4638 . rcx))
 mov rax, rdx
 mov r11, [SELF + 48]
 cmp rax, r11
 jl L5741
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5741:
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^602 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, L5743 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rsi
 mov rax, [SELF + 40]
 mov [rsp + 8], rax
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3922
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov [ALLOC + 48], rdx
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 16], rax
 mov rax, [SELF + 40]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5742:
f_3922:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov r11, [SELF + 48]
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3923
 mov rax, [SELF + 48]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_68
f_3923:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_72
f_3918:
; ()
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^605 = rcx
 mov rcx, rax
 sub rsp, 8
 mov rax, L5744 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3916:
; ((t4628 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^593 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
; t4626 = rdx
 mov rdx, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3915
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov rax, [SELF + 16]
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rdx, rax
 mov SELF, [___number_2d_3estring] ; number->string
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3915:
; ((t4627 . rcx))
 mov rdx, L5745 ; 
 mov rsi, [SELF + 32]
 mov rdi, L5746 ; 
 mov r8, rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3913
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov SELF, [___string_2dappend] ; string-append
 mov r9, L5747 ; 
 mov rax, [SELF + 8]
 mov r11, 7 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3913:
; ((t4625 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3912:
; ((t4624 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3907:
; ()
 mov rax, [SELF + 32]
; _key_54^568 = rcx
 mov rcx, rax
; _x_44^569 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, L5748 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5749
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5751 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5749:
; _x_44^571 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, L5752 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5753
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5755 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5753:
; _x_44^573 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov r11, L5756 ; 
 CALL structurally_equal
 cmp rax, FALSE
 je L5757
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5759 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5757:
 mov rax, [SELF + 32]
; _x_44^576 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_55^575 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 cmp rax, r11
 jl L5760
 mov rax, rdx
 mov r11, 513 ; '256
 cmp rax, r11
 SET_T rax
 cmovge rax, FALSE
 jmp L5761
L5760:
 mov rax, FALSE
L5761:
 cmp rax, FALSE
 je L5762
 mov rax, [SELF + 32]
; _c_45^577 = rsi
 mov rsi, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^578 = rdi
 mov rdi, rax
 sub rsp, 8
; _x_44^579 = r8
 mov r8, rsi
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdi
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5762:
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3909
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5764 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5763:
L5758:
L5754:
L5750:
f_3909:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3910
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3910:
; ((t4621 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3896:
; ((t4598 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5765
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3897
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5767 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5765:
 sub rsp, 32
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 32]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5766:
f_3897:
; ()
 mov rax, [SELF + 32]
; _str_55^541 = rcx
 mov rcx, rax
; _s_45^543 = rdx
 mov rdx, rcx
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_56^542 = rdx
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_57^544 = rsi
 mov rsi, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_71
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdx
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4600 = rdi
 mov rdi, rax
 mov rcx, [SELF + 24]
 mov SELF, rdi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_71
f_71:
; ((_i_58^545 . rdx) (k4602 . rcx))
 mov rax, rdx
 mov r11, [SELF + 40]
 cmp rax, r11
 jl L5768
 mov rax, L5770 ; 
; _c_45^546 = rsi
 mov rsi, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^547 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdi
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5768:
 mov rax, [SELF + 32]
; _x_45^550 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rdx
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^552 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^553 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5771
 mov rax, r8
 jmp L5772
L5771:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5772:
; _c_59^549 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_60^554 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3900
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t4607 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, L5773 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_61^556 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5774
 mov rax, r9
 jmp L5775
L5774:
 sub rsp, 16
 mov rax, L5776 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5775:
 cmp rax, FALSE
 je L5777
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3901
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5779 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5777:
 mov rax, rdi
 mov r11, 65 ; '32
 cmp rax, r11
 jge L5780
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3903
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5782 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5780:
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^565 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, r9
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rcx, r8
 mov rsi, r9
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5781:
L5778:
L5769:
f_3903:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3905
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3905:
; ((t4613 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3904
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3904:
; ()
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5783 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3901:
; ()
 mov rax, [SELF + 32]
; _c_45^561 = rcx
 mov rcx, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^562 = rdx
 mov rdx, rax
 sub rsp, 8
; _x_44^563 = rsi
 mov rsi, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3900:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_71
f_3887:
; ()
 mov rax, [SELF + 32]
; _s_45^516 = rcx
 mov rcx, rax
 mov rax, rcx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_54^515 = rcx
 mov rcx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_55^517 = rdx
 mov rdx, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_70
 mov rax, [SELF + 24]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, rdx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdx
 mov rax, [rax + 8]
; t4584 = rsi
 mov rsi, rax
 mov rcx, [SELF + 16]
 mov SELF, rsi
 mov rdx, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_70
f_70:
; ((_i_56^518 . rdx) (k4586 . rcx))
 mov rax, rdx
 mov r11, [SELF + 40]
 cmp rax, r11
 jl L5784
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5786 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5784:
 mov rax, [SELF + 32]
; _x_45^520 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rdx
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^522 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^523 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5787
 mov rax, r8
 jmp L5788
L5787:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5788:
; _c_57^519 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _n_58^524 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3889
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
; t4589 = r8
 mov r8, rax
 sub rsp, 16
 mov rax, L5789 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_59^526 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5790
 mov rax, r9
 jmp L5791
L5790:
 sub rsp, 16
 mov rax, L5792 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5791:
 cmp rax, FALSE
 je L5793
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3890
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], r8
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5795 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5793:
 sub rsp, 16
 mov rax, L5796 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 jne L5797
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rcx, r8
 mov rsi, L5799 ; 
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5797:
 mov rax, rdi
 mov r11, 65 ; '32
 cmp rax, r11
 jge L5800
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3892
 mov [ALLOC + 16], r8
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5802 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5800:
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^537 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, r9
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rcx, r8
 mov rsi, r9
 mov rdx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5801:
L5798:
L5794:
L5785:
f_3892:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3894
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 32]
 mov SELF, [___number_2d_3estring] ; number->string
 mov rsi, 33 ; '16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3894:
; ((t4595 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3893
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3893:
; ()
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5803 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3890:
; ()
 mov rax, [SELF + 32]
; _c_45^531 = rcx
 mov rcx, rax
 mov rax, 1224979098644774913 ; 17/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(1)
; _str_46^532 = rdx
 mov rdx, rax
 sub rsp, 8
; _x_44^533 = rsi
 mov rsi, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov [rsp + 0], rdx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3889:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_70
f_3880:
; ()
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^506 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3881
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_68
f_3881:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_54^507 = rcx
 mov rcx, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_69
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t4576 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 40]
; _x_44^513 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_69
f_69:
; ((_x_55^508 . rdx) (k4578 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5804
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5806 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5804:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5807
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3883
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5809 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5807:
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3885
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rcx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5810 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5808:
L5805:
f_3885:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3886
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_68
f_3886:
; ()
 sub rsp, 24
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov r11, 7 ; '3
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 16], rax
 mov rsi, L5811 ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3883:
; ()
 sub rsp, 24
 mov rax, [SELF + 40]
; _x_44^511 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3884
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_68
f_3884:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^512 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_69
f_3878:
; ()
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3879
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [___vector_2d_3elist] ; vector->list
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3879:
; ((t4573 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_68
f_66:
; ((_str_50^455 . rdx) (k4565 . rcx))
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_51^456 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_52^458 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_67
 mov [ALLOC + 16], rdi
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rsi
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4566 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rdx, 1 ; '0
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_67
f_67:
; ((_i_53^459 . rdx) (k4568 . rcx))
 mov rax, rdx
 mov r11, [SELF + 32]
 cmp rax, r11
 jl L5812
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5812:
 mov rax, [SELF + 24]
; _x_45^461 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, rdx
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^463 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL lookup_char
; _x_45^464 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5814
 mov rax, r8
 jmp L5815
L5814:
 mov rax, rdi
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5815:
; _c_54^460 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, L5816 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_55^465 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5817
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5817:
 sub rsp, 16
 mov rax, L5819 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_56^468 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5820
 mov SELF, rcx
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5820:
 sub rsp, 16
 mov rax, L5822 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_57^471 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5823
 mov SELF, rcx
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5823:
 sub rsp, 16
 mov rax, L5825 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_58^474 = r10
 mov r10, rax
 mov rax, r10
 cmp rax, FALSE
 je L5826
 mov SELF, rcx
 mov rcx, r10
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5826:
 sub rsp, 16
 mov rax, L5828 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_59^477 = r12
 mov r12, rax
 mov rax, r12
 cmp rax, FALSE
 je L5829
 mov SELF, rcx
 mov rcx, r12
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5829:
 sub rsp, 16
 mov rax, L5831 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_60^480 = local #0
 mov [locals + 0], rax
 mov rax, [locals + 0] ; _x_60^480
 cmp rax, FALSE
 je L5832
 mov SELF, rcx
 mov rcx, [locals + 0] ; _x_60^480
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5832:
 sub rsp, 16
 mov rax, L5834 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_61^483 = local #1
 mov [locals + 8], rax
 mov rax, [locals + 8] ; _x_61^483
 cmp rax, FALSE
 je L5835
 mov SELF, rcx
 mov rcx, [locals + 8] ; _x_61^483
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5835:
 sub rsp, 16
 mov rax, L5837 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_62^486 = local #2
 mov [locals + 16], rax
 mov rax, [locals + 16] ; _x_62^486
 cmp rax, FALSE
 je L5838
 mov SELF, rcx
 mov rcx, [locals + 16] ; _x_62^486
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5838:
 sub rsp, 16
 mov rax, L5840 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_63^489 = local #3
 mov [locals + 24], rax
 mov rax, [locals + 24] ; _x_63^489
 cmp rax, FALSE
 je L5841
 mov SELF, rcx
 mov rcx, [locals + 24] ; _x_63^489
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5841:
 sub rsp, 16
 mov rax, L5843 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_64^492 = local #4
 mov [locals + 32], rax
 mov rax, [locals + 32] ; _x_64^492
 cmp rax, FALSE
 je L5844
 mov SELF, rcx
 mov rcx, [locals + 32] ; _x_64^492
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5844:
 sub rsp, 16
 mov rax, L5846 ; 
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_65^495 = local #5
 mov [locals + 40], rax
 mov rax, [locals + 40] ; _x_65^495
 cmp rax, FALSE
 je L5847
 mov SELF, rcx
 mov rcx, [locals + 40] ; _x_65^495
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5847:
 sub rsp, 8
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, 65 ; '32
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovg rax, FALSE
; _x_66^498 = local #6
 mov [locals + 48], rax
 mov rax, [locals + 48] ; _x_66^498
 cmp rax, FALSE
 je L5849
 mov SELF, rcx
 mov rcx, [locals + 48] ; _x_66^498
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5849:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_67
L5850:
L5848:
L5845:
L5842:
L5839:
L5836:
L5833:
L5830:
L5827:
L5824:
L5821:
L5818:
L5813:
f_62:
; ((_proc_45^443 . rdx) (k4643 . rcx))
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _topitems_46^444 = rsi
 mov rsi, rax
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_63
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, [____25call_2fcc] ; %call/cc
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_63:
; ((_cont_47^445 . rdx) (k4644 . rcx))
 sub rsp, 24
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_64
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_64:
; ((_results_48^446 . rdx) (k4645 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _items2_49^447 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3925
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov rax, ALLOC
 add ALLOC, 40
; t4647 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, [SELF + 24]
 cmp rax, r11
 jne L5851
 mov SELF, rdi
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_3925
L5851:
 sub rsp, 8
 sub rsp, 16
 mov rax, [SELF + 24]
; _x_45^450 = r8
 mov r8, rax
 mov rax, r8
 CALL list_length
 mov [rsp + 0], rax
 mov rax, rsi
 CALL list_length
 mov [rsp + 8], rax
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 sub rax, r11
  inc rax
 mov [rsp + 0], rax
 mov rcx, rdi
 mov rdx, [SELF + 24]
 mov SELF, [____25dynamic_2dunwind] ; %dynamic-unwind
 mov rsi, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5852:
f_3925:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rsi, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_61:
; ((_n_46^432 . rsi) (_topitems_45^431 . rdx) (k4648 . rcx))
 mov rax, rdx
 mov r11, [____25dynamic_2dwinds] ; %dynamic-winds
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_47^433 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5853
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5853:
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 jge L5855
 sub rsp, 24
 mov rax, rsi
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3926
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov SELF, [____25dynamic_2dunwind] ; %dynamic-unwind
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5855:
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^439 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^440 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _after_48^438 = r8
 mov r8, rax
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^442 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [____25dynamic_2dwinds], rax ; (set! %dynamic-winds ...)
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3928
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, r8
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5856:
L5854:
f_3928:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 32]
 mov rax, [SELF + 16]
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
 mov rsi, rax
 mov SELF, [____25dynamic_2dunwind] ; %dynamic-unwind
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3926:
; ()
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3927
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^435 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^436 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3927:
; ()
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [____25dynamic_2dwinds], rax ; (set! %dynamic-winds ...)
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_59:
; ((_after_47^424 . rdi) (_thunk_46^423 . rsi) (_before_45^422 . rdx) (k4653 . rcx))
 sub rsp, 8
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3929
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdi
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 0], rax
 mov SELF, rdx
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3929:
; ()
 mov rax, [SELF + 40]
; _x_45^427 = rcx
 mov rcx, rax
 mov rax, [SELF + 32]
; _y_46^428 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _x_45^425 = rcx
 mov rcx, rax
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _y_46^426 = rdx
 mov rdx, rax
 mov rax, rcx
 mov r11, rdx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [____25dynamic_2dwinds], rax ; (set! %dynamic-winds ...)
 mov rcx, [SELF + 24]
 mov rdx, [SELF + 16]
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_60
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rsi, ALLOC
 add ALLOC, 24
 mov SELF, [___call_2dwith_2dvalues] ; call-with-values
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_60:
; ((_results_48^429 . rdx) (k4656 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, [____25dynamic_2dwinds] ; %dynamic-winds
; _x_44^430 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [____25dynamic_2dwinds], rax ; (set! %dynamic-winds ...)
 sub rsp, 16
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3930
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3930:
; ()
 mov rcx, [SELF + 24]
 mov rdx, [___values] ; values
 mov rsi, [SELF + 16]
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_54:
; ((_lsts_47^385 . rdi) (_lst1_46^384 . rsi) (_proc_45^383 . rdx) (k4659 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L5857
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^387 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_55
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4660 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_55
L5857:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^394 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_56
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4665 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rdx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rdx
 mov rdx, ALLOC
 add ALLOC, 24
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_56
L5858:
f_56:
; ((_lsts_49^395 . rdx) (k4667 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop2_50^397 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_57
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4676 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3935
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rdx
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_57
f_3935:
; ((t4668 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5859
 mov rdx, [SELF + 16]
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3936
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5859:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, null ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5860:
f_3936:
; ((t4669 . rcx))
; _x_45^409 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop3_51^411 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_58
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4672 = rdi
 mov rdi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3938
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_58
f_3938:
; ((t4671 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3937
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_56
f_3937:
; ((t4670 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_58:
; ((_lsts_52^412 . rdx) (k4674 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5861
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5861:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^417 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^414 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3940
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_58
L5862:
f_3940:
; ((t4675 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_57:
; ((_lsts_51^398 . rdx) (k4678 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5863
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5863:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_52^400 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L5865
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5865:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3942
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_57
L5866:
L5864:
f_3942:
; ((t4679 . rcx))
 sub rsp, 16
 mov rax, rcx
 cmp rax, FALSE
 je L5867
 mov rax, [SELF + 16]
; _x_44^408 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^406 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L5868
L5867:
 mov rax, FALSE
L5868:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_55:
; ((_lst_49^388 . rdx) (k4662 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5869
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5869:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3932
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5870:
f_3932:
; ((t4663 . rcx))
; _x_45^390 = rdx
 mov rdx, rcx
 sub rsp, 24
 mov rax, [SELF + 32]
; _x_44^393 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3933
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_55
f_3933:
; ((t4664 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_49:
; ((_lsts_47^349 . rdi) (_lst1_46^348 . rsi) (_proc_45^347 . rdx) (k4680 . rcx))
 mov rax, 4 ; 
 call consrest
 mov rdi, rax
 mov rax, rdi
 mov r11, null ; 
 cmp rax, r11
 jne L5871
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^351 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_50
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4681 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_50
L5871:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^357 = r8
 mov r8, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_51
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], r8
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4685 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rax, rsi
 mov r11, rdi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rdx, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rdx
 mov rdx, ALLOC
 add ALLOC, 24
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_51
L5872:
f_51:
; ((_lsts_49^358 . rdx) (k4687 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop2_50^360 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_52
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4695 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3946
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rdx
 mov [ALLOC + 32], rcx
 mov rax, [SELF + 24]
 mov [ALLOC + 40], rax
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 8], rax
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_52
f_3946:
; ((t4688 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L5873
 mov rdx, [SELF + 16]
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3947
 mov rax, [SELF + 40]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25apply] ; %apply
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5873:
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rcx, undefined ; 
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5874:
f_3947:
; ()
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop3_51^372 = rcx
 mov rcx, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_53
 mov [ALLOC + 16], rcx
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rcx
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rcx
 mov rax, [rax + 8]
; t4691 = rdx
 mov rdx, rax
 sub rsp, 24
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3948
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov [rsp + 16], rdx
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_53
f_3948:
; ((t4690 . rcx))
 sub rsp, 24
 mov [rsp + 0], rcx
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_51
f_53:
; ((_lsts_52^373 . rdx) (k4693 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5875
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5875:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^378 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^375 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3950
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_53
L5876:
f_3950:
; ((t4694 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_52:
; ((_lsts_51^361 . rdx) (k4697 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5877
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5877:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_52^363 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 jne L5879
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5879:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3952
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_52
L5880:
L5878:
f_3952:
; ((t4698 . rcx))
 sub rsp, 16
 mov rax, rcx
 cmp rax, FALSE
 je L5881
 mov rax, [SELF + 16]
; _x_44^371 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^369 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 jmp L5882
L5881:
 mov rax, FALSE
L5882:
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_50:
; ((_lst_49^352 . rdx) (k4683 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5883
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5883:
 sub rsp, 24
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3944
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5884:
f_3944:
; ()
 sub rsp, 24
 mov rax, [SELF + 16]
; _x_44^356 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov r11, 3 ; 
 jmp f_50
f_48:
; ((_i_46^336 . rdx) (k4701 . rcx))
 mov rax, rdx
 FIX2INT rax
  mov rax, [symbol_literals + rax * CELLS(1)]
; _sl_47^337 = rsi
 mov rsi, rax
 mov rax, rsi
 cmp rax, FALSE
 je L5885
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _str_45^339 = rdi
 mov rdi, rax
 mov rax, rdi
 CALL hash_string
; _h_48^338 = rdi
 mov rdi, rax
 mov rax, [____25symbol_2dtable] ; %symbol-table
; _x_45^340 = r8
 mov r8, rax
 mov rax, [____25symbol_2dtable] ; %symbol-table
; _x_45^345 = r9
 mov r9, rax
 mov rax, r9
 mov r11, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_46^344 = r9
 mov r9, rax
 mov rax, rsi
 mov r11, r9
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_47^342 = r9
 mov r9, rax
 mov rax, r8
 mov r11, rdi
 mov r15, r9
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_48
L5885:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5886:
f_46:
; ((_str_45^307 . rdx) (k4703 . rcx))
 mov rax, rdx
 CALL hash_string
; _i_46^308 = rsi
 mov rsi, rax
 mov rax, [____25symbol_2dtable] ; %symbol-table
; _x_45^311 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _b_47^310 = rdi
 mov rdi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^313 = r8
 mov r8, rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_47
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], r8
 mov r11, ALLOC
 add ALLOC, 48
 mov rax, r8
 mov [rax + 8], r11
 mov rax, r11
 mov rax, r8
 mov rax, [rax + 8]
; t4704 = r9
 mov r9, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r9
 mov rdx, rdi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_47
f_47:
; ((_bucket_49^314 . rdx) (k4706 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5887
 mov rax, [SELF + 16]
; _str_45^317 = rsi
 mov rsi, rax
; _s_45^319 = rdi
 mov rdi, rsi
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_46^318 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3957
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov [ALLOC + 40], rdi
 mov [ALLOC + 48], rsi
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rsi, rdi
 mov r8, rdi
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5887:
 mov rax, [SELF + 16]
; _x_44^330 = rsi
 mov rsi, rax
 sub rsp, 8
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_45^331 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, rdi
 CALL structurally_equal
 cmp rax, FALSE
 je L5889
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5889:
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 40]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_47
L5890:
L5888:
f_3957:
; ((t4711 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 48]
; _x_45^321 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 40]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 mov rax, rcx
 mov [ALLOC + 8], rax
 mov rax, 72057594037927937 ; 1/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; t4707 = rdx
 mov rdx, rax
 mov rax, [____25symbol_2dtable] ; %symbol-table
; _x_45^325 = rsi
 mov rsi, rax
 mov rax, [SELF + 24]
; _i_46^326 = rdi
 mov rdi, rax
 mov rax, [SELF + 32]
; _y_46^329 = r8
 mov r8, rax
 mov rax, rdx
 mov r11, r8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; _y_47^327 = r8
 mov r8, rax
 mov rax, rsi
 mov r11, rdi
 mov r15, r8
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov rcx, rdx
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_45:
; ((_cs_45^302 . rdx) (k4715 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___list_2d_3estring] ; list->string
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_44:
; ((_xs_45^301 . rdx) (k4716 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [___list_2d_3evector] ; list->vector
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
f_42:
; ((_str_45^289 . rdx) (k4717 . rcx))
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _n_46^290 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_47^292 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_43
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4718 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rax, rsi
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
 mov rdx, rax
 mov rsi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_43
f_43:
; ((_lst_49^294 . rsi) (_i_48^293 . rdx) (k4720 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 cmp rax, r11
 jge L5891
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5891:
 sub rsp, 32
 mov rax, [SELF + 16]
; _x_45^297 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rdx
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  mov al, [rax + CELLS(1)]
  and rax, 0xff
  INT2FIX rax
; _x_44^299 = r8
 mov r8, rax
 mov rax, r8
 CALL lookup_char
; _x_45^300 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5893
 mov rax, r9
 jmp L5894
L5893:
 mov rax, r8
 mov [ALLOC + 8], rax
 mov rax, 288230376151711745 ; 4/1
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
L5894:
; _x_45^295 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_43
L5892:
f_40:
; ((_lst_45^276 . rdx) (k4721 . rcx))
 mov rax, rdx
 CALL list_length
; _n_46^277 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3960
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3960:
; ((t4722 . rcx))
; _s_47^279 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^280 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_41
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4723 = rdi
 mov rdi, rax
 mov rcx, [SELF + 24]
 mov rdx, 1 ; '0
 mov rsi, [SELF + 16]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_41
f_41:
; ((_lst_50^282 . rsi) (_i_49^281 . rdx) (k4725 . rcx))
 mov rax, rdx
 mov r11, [SELF + 32]
 cmp rax, r11
 jl L5895
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5895:
 mov rax, [SELF + 16]
; _x_45^283 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_47^285 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdi
 mov r11, rdx
 mov r15, [rsp + 0]
 add rsp, 8
 CHECK_BYTE_ACCESS rax, r11
  FIX2INT r11
  add rax, r11
  xchg rax, r15
  FIX2INT rax
  mov [r15 + CELLS(1)], al
  mov rax, FALSE
 sub rsp, 32
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_41
L5896:
f_38:
; ((_vec_45^266 . rdx) (k4728 . rcx))
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _n_46^267 = rsi
 mov rsi, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_47^269 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_39
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4729 = r8
 mov r8, rax
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, r8
 mov rax, rsi
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
 mov rdx, rax
 mov rsi, null ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_39
f_39:
; ((_lst_49^271 . rsi) (_i_48^270 . rdx) (k4731 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 cmp rax, r11
 jge L5897
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5897:
 sub rsp, 32
 mov rax, [SELF + 16]
; _x_45^274 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rdx
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^272 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_39
L5898:
f_36:
; ((_lst_45^254 . rdx) (k4732 . rcx))
 mov rax, rdx
 CALL list_length
; _n_46^255 = rsi
 mov rsi, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, rsi
 shl rax, CELL_SHIFT
  or rax, 1
 mov [rsp + 8], rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3963
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rsi
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 7 ; '3
 mov rdi, FALSE
 SET_T r9
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3963:
; ((t4733 . rcx))
; _v_47^257 = rdx
 mov rdx, rcx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_48^258 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_37
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4734 = rdi
 mov rdi, rax
 mov rcx, [SELF + 24]
 mov rdx, 1 ; '0
 mov rsi, [SELF + 16]
 mov SELF, rdi
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_37
f_37:
; ((_lst_50^260 . rsi) (_i_49^259 . rdx) (k4736 . rcx))
 mov rax, rdx
 mov r11, [SELF + 32]
 cmp rax, r11
 jl L5899
 sub rsp, 16
 mov rax, [SELF + 16]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5899:
 mov rax, [SELF + 16]
; _x_45^261 = rdi
 mov rdi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _y_47^263 = r8
 mov r8, rax
 mov rax, rdi
 mov r11, rdx
 mov r15, r8
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 32
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 dec rax
  add rax, r11
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_37
L5900:
f_35:
; ((_base_46^228 . rsi) (_num_45^227 . rdx) (k4739 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 mov rax, rdx
 test rax, 1
 je L5901
 mov rax, FALSE
 jmp L5902
L5901:
 sub rsp, 8
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 51
  and rax, 0xfff
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 4095 ; '2047
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5903
 sub rsp, 8
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  mov r11, 0x000fffffffffffff
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
 jmp L5904
L5903:
 mov rax, FALSE
L5904:
L5902:
 cmp rax, FALSE
 je L5905
 mov SELF, rcx
 mov rcx, L5907 ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5905:
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^234 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L5908
 mov rax, rdi
 jmp L5909
L5908:
 sub rsp, 8
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 51
  and rax, 0xfff
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 4095 ; '2047
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
; _x_46^236 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5910
 mov rax, r8
 jmp L5911
L5910:
 sub rsp, 8
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  mov r11, 0x000fffffffffffff
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
L5911:
L5909:
 cmp rax, FALSE
 je L5912
 sub rsp, 8
 sub rsp, 8
 mov rax, rsi
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5914
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 jmp L5915
L5914:
 mov rax, 21 ; '10
L5915:
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, [rsp + 0]
 add rsp, 8
 CALL num2str
; _str_47^239 = rdi
 mov rdi, rax
 mov rax, rdx
 test rax, 1
 je L5916
 mov rax, FALSE
 jmp L5917
L5916:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 33 ; '16
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5917:
 cmp rax, FALSE
 je L5918
 mov rax, rdx
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^245 = r8
 mov r8, rax
 mov rax, r8
 cmp rax, FALSE
 je L5920
 mov rax, r8
 jmp L5921
L5920:
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 51
  and rax, 0xfff
  or rax, 1
; _e_46^247 = r9
 mov r9, rax
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  mov r11, 0x000fffffffffffff
  and rax, r11
  INT2FIX rax
; _m_47^248 = r10
 mov r10, rax
 mov rax, 4095 ; '2047
 mov r11, r9
 cmp rax, r11
 jne L5922
 mov rax, FALSE
 jmp L5923
L5922:
 mov rax, 1 ; '0
 mov r11, r9
 cmp rax, r11
 jne L5924
 mov rax, 1 ; '0
 mov r11, r10
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5925
L5924:
 mov rax, r9
 mov r11, 2151 ; '1075
 cmp rax, r11
 SET_T rax
 cmovl rax, FALSE
; _x_48^249 = r12
 mov r12, rax
 mov rax, r12
 cmp rax, FALSE
 je L5926
 mov rax, r12
 jmp L5927
L5926:
 mov rax, r9
 mov r11, 2047 ; '1023
 cmp rax, r11
 jge L5928
 mov rax, FALSE
 jmp L5929
L5928:
 sub rsp, 8
 mov rax, r9
 mov r11, 2025 ; '1012
 sub rax, r11
  inc rax
; _y_45^251 = local #0
 mov [locals + 0], rax
 mov rax, r10
 mov r11, [locals + 0] ; _y_45^251
 push rcx
  mov rcx, r11
  FIX2INT rax
  FIX2INT rcx
  if l
  neg rcx
  sar rax, cl
  else
  shl rax, cl
  endif
  INT2FIX rax
  pop rcx
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
L5929:
L5927:
L5925:
L5923:
L5921:
 jmp L5919
L5918:
 mov rax, FALSE
L5919:
 cmp rax, FALSE
 je L5930
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [___string_2dappend] ; string-append
 mov rdx, rdi
 mov rsi, L5932 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5930:
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5931:
L5912:
 mov SELF, rcx
 sub rsp, 8
 mov rax, rdx
 test rax, 1
 je L5933
 mov rax, rdx
 jmp L5934
L5933:
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
L5934:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, L5935 ; 
 mov r11, L5936 ; 
 mov rcx, r11
 cmovl rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5913:
L5906:
f_34:
; ((_base_46^196 . rsi) (_str_45^195 . rdx) (k4740 . rcx))
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^197 = rdi
 mov rdi, rax
 mov SELF, rcx
 mov rax, rdi
 mov r11, 1 ; '0
 cmp rax, r11
 jne L5937
 mov rcx, FALSE
 jmp L5938
L5937:
 mov rax, L5939 ; 
; _y_46^201 = r8
 mov r8, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^202 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r9
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5940
 sub rsp, 8
 mov rax, rdx
 mov r11, r8
 mov r15, r9
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 jmp L5941
L5940:
 mov rax, FALSE
L5941:
; _x_48^199 = r8
 mov r8, rax
 mov rcx, r8
 cmp rcx, FALSE
 je L5942
 mov rcx, r8
 jmp L5943
L5942:
 mov rax, L5944 ; 
; _y_46^206 = r9
 mov r9, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^207 = r10
 mov r10, rax
 sub rsp, 8
 mov rax, r9
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r10
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5945
 sub rsp, 8
 mov rax, rdx
 mov r11, r9
 mov r15, r10
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 jmp L5946
L5945:
 mov rcx, FALSE
L5946:
L5943:
 cmp rcx, FALSE
 je L5947
 lea rax, [ieee754_nan]
 mov rcx, rax
 jmp L5948
L5947:
 mov rax, L5949 ; 
; _y_46^211 = r8
 mov r8, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^212 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r9
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5950
 sub rsp, 8
 mov rax, rdx
 mov r11, r8
 mov r15, r9
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 jmp L5951
L5950:
 mov rcx, FALSE
L5951:
 cmp rcx, FALSE
 je L5952
 lea rax, [ieee754_inf]
 mov rcx, rax
 jmp L5953
L5952:
 mov rax, L5954 ; 
; _y_46^216 = r8
 mov r8, rax
 mov rax, rdx
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_47^217 = r9
 mov r9, rax
 sub rsp, 8
 mov rax, r8
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, r9
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5955
 sub rsp, 8
 mov rax, rdx
 mov r11, r8
 mov r15, r9
 CALL compare_strings_ci
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 SET_T rcx
 cmovne rcx, FALSE
 jmp L5956
L5955:
 mov rcx, FALSE
L5956:
 cmp rcx, FALSE
 je L5957
 lea rax, [ieee754_ninf]
 mov rcx, rax
 jmp L5958
L5957:
 mov rax, rdx
 mov r11, rsi
 CALL str2num
; _n_48^220 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, r8
 test rax, 1
 SET_T rax
 cmove rax, FALSE
; _x_45^222 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L5959
 mov rax, r9
 jmp L5960
L5959:
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + CELLS(1)]
  sar rax, 51
  and rax, 0xfff
  or rax, 1
 mov [rsp + 0], rax
 mov rax, 4095 ; '2047
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
; _x_46^224 = r10
 mov r10, rax
 mov rax, r10
 cmp rax, FALSE
 je L5961
 mov rax, r10
 jmp L5962
L5961:
 sub rsp, 8
 mov rax, r8
 mov rax, [rax + CELLS(1)]
  mov r11, 0x000fffffffffffff
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, 1 ; '0
 mov r11, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 mov rax, FALSE
 SET_T r11
 cmove r11, rax
 mov rax, r11
L5962:
L5960:
 mov [rsp + 0], rax
 mov r11, r8
 mov r15, FALSE
 mov rax, [rsp + 0]
 add rsp, 8
 mov rcx, r11
 cmp rax, FALSE
 cmove rcx, r15
L5958:
L5953:
L5948:
L5938:
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_31:
; ((_slst_45^170 . rdx) (k4741 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_46^171 = rsi
 mov rsi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_32
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4742 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rsi, 1 ; '0
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_32
f_32:
; ((_n_48^173 . rsi) (_ss_47^172 . rdx) (k4744 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5963
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3968
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5963:
 sub rsp, 32
 sub rsp, 8
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _s_45^193 = rdi
 mov rdi, rax
 mov rax, rdi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, rsi
 mov r11, [rsp + 0]
 add rsp, 8
 dec rax
  add rax, r11
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_32
L5964:
f_3968:
; ((t4751 . rcx))
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
; t4745 = rdx
 mov rdx, rax
; _dest_49^175 = rsi
 mov rsi, rdx
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_50^178 = rdi
 mov rdi, rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_33
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdi
 mov r11, ALLOC
 add ALLOC, 32
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4746 = r8
 mov r8, rax
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, r8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_33
f_33:
; ((_ss_51^179 . rdx) (k4748 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5965
 mov rax, [SELF + 16]
; _x_44^181 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5965:
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _src_52^182 = rsi
 mov rsi, rax
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
; _len_53^184 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, rsi
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov r11, [SELF + 16]
 mov r15, rdi
 mov rax, [rsp + 0]
 add rsp, 8
 CALL copy_bytes
 mov rax, [SELF + 16]
; _x_44^188 = r8
 mov r8, rax
 sub rsp, 8
 mov rax, [SELF + 16]
; _x_44^190 = r9
 mov r9, rax
 mov rax, r9
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov r11, rdi
 mov rax, [rsp + 0]
 add rsp, 8
 dec rax
  add rax, r11
; _y_45^189 = r9
 mov r9, rax
 mov rax, r8
 mov r11, 3 ; '1
 mov r15, r9
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_33
L5966:
f_30:
; ((_name_45^168 . rdx) (k4752 . rcx))
 sub rsp, 16
 sub rsp, 8
 sub rsp, 8
 mov rax, 65 ; '32
 mov r11, 9 ; '4
 or rax, r11
 mov [rsp + 0], rax
 mov rax, 257 ; '128
 mov r11, [rsp + 0]
 add rsp, 8
 or rax, r11
 mov [rsp + 0], rax
 mov rax, 513 ; '256
 mov r11, [rsp + 0]
 add rsp, 8
 or rax, r11
 mov [rsp + 0], rax
 sub rsp, 8
 mov rax, 1025 ; '512
 mov r11, 2049 ; '1024
 or rax, r11
 mov [rsp + 0], rax
 mov rax, 3 ; '1
 mov r11, [rsp + 0]
 add rsp, 8
 or rax, r11
 mov [rsp + 8], rax
 mov rax, rdx
 mov r15, [rsp + 0]
 mov r11, [rsp + 8]
 add rsp, 16
 CALL copy_to_buffer
  FIX2INT r11
  FIX2INT r15
  LIBCALL3 open, buffer, r11, r15
  INT2FIX rax
; _fd_46^169 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 jge L5967
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25file_2derror] ; %file-error
 mov rsi, rdx
 mov rdx, L5969 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5967:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25make_2dfile_2doutput_2dport] ; %make-file-output-port
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L5968:
f_29:
; ((_name_45^166 . rdx) (k4753 . rcx))
 mov rax, rdx
 mov r11, 1 ; '0
 CALL copy_to_buffer
  FIX2INT r11
  LIBCALL3 open, buffer, r11, 0
  INT2FIX rax
; _fd_46^167 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 jge L5970
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25file_2derror] ; %file-error
 mov rsi, rdx
 mov rdx, L5972 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5970:
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25make_2dfile_2dinput_2dport] ; %make-file-input-port
 mov rdx, rsi
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L5971:
f_26:
; ((_fd_45^155 . rdx) (k4760 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_27
 mov rax, ALLOC
 add ALLOC, 16
; _close_47^158 = rsi
 mov rsi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_28
 mov rax, ALLOC
 add ALLOC, 16
; _r/w_48^159 = rdi
 mov rdi, rax
 mov rax, rdx
 mov r11, FALSE
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 576460752303423494 ; 8/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _p_50^165 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 5 ; '2
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r8
 mov r11, 7 ; '3
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r8
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r8
 mov r11, 11 ; '5
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, rcx
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_28:
; ((_str_47^163 . rsi) (_p_46^162 . rdx) (k4762 . rcx))
 sub rsp, 8
 sub rsp, 16
 mov rax, rsi
 mov rax, [rax]
  mov r11, SIZE_MASK
  and rax, r11
  INT2FIX rax
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov rax, rsi
 mov r15, [rsp + 0]
 mov r11, [rsp + 8]
 add rsp, 16
 FIX2INT r11
  FIX2INT r15
  add rax, CELLS(1)
  LIBCALL3 write, r11, rax, r15
  INT2FIX rax
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jge L5973
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25file_2derror] ; %file-error
 mov rdi, rsi
 mov rsi, rdx
 mov rdx, L5975 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 jmp rax
L5973:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5974:
f_27:
; ((_p_46^161 . rdx) (k4761 . rcx))
 sub rsp, 8
 sub rsp, 8
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [rsp + 0]
 add rsp, 8
 FIX2INT rax
  LIBCALL1 close, rax
  INT2FIX rax
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jge L5976
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25file_2derror] ; %file-error
 mov rsi, rdx
 mov rdx, L5978 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5976:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5977:
f_23:
; ((_fd_45^138 . rdx) (k4767 . rcx))
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_24
 mov rax, ALLOC
 add ALLOC, 16
; _close_47^141 = rsi
 mov rsi, rax
 mov rax, 2305843009213693953
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_25
 mov rax, ALLOC
 add ALLOC, 16
; _r/w_48^142 = rdi
 mov rdi, rax
 mov rax, rdx
 SET_T r11
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 576460752303423494 ; 8/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _p_50^154 = r8
 mov r8, rax
 mov rax, r8
 mov r11, 5 ; '2
 mov r15, rsi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r8
 mov r11, 7 ; '3
 mov r15, rdi
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r8
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, r8
 mov r11, 11 ; '5
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov SELF, rcx
 mov rcx, r8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_25:
; ((_n_47^146 . rsi) (_p_46^145 . rdx) (k4770 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3972
 mov [ALLOC + 16], rdx
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rcx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3972:
; ((t4771 . rcx))
; _str_48^147 = rdx
 mov rdx, rcx
 sub rsp, 8
 mov rax, [SELF + 16]
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, rcx
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 add rsp, 8
 FIX2INT r11
  FIX2INT r15
  add rax, CELLS(1)
  LIBCALL3 read, r11, rax, r15
  INT2FIX rax
; _nr_49^148 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 jne L5979
 sub rsp, 8
 mov rax, [SELF + 32]
 mov [rsp + 0], rax
 mov rax, eof
 mov rcx, rax
 mov SELF, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5979:
 mov rax, [SELF + 24]
 mov r11, rsi
 cmp rax, r11
 jne L5981
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5981:
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 jle L5983
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rsi
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3973
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov [ALLOC + 24], rsi
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 16], rax
 mov SELF, [____25allocate_2dblock] ; %allocate-block
 mov rdx, 35 ; '17
 mov rdi, FALSE
 mov r9, FALSE
 mov r10, FALSE
 mov r8, [rsp + 0]
 mov rsi, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 8 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5983:
 mov rcx, [SELF + 32]
 mov rdx, L5985 ; 
 mov rsi, [SELF + 16]
 mov rdi, [SELF + 24]
 mov SELF, [____25file_2derror] ; %file-error
 mov rax, [SELF + 8]
 mov r11, 5 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5984:
L5982:
L5980:
f_3973:
; ((t4772 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 32]
; _x_45^150 = rdx
 mov rdx, rax
 mov rax, rdx
 mov r11, 1 ; '0
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 8], rax
 mov r15, [SELF + 24]
 mov r11, [rsp + 0]
 mov rax, [rsp + 8]
 add rsp, 16
 CALL copy_bytes
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_24:
; ((_p_46^144 . rdx) (k4768 . rcx))
 mov rax, rdx
 mov r11, 9 ; '4
 mov r15, FALSE
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 sub rsp, 8
 sub rsp, 8
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [rsp + 0]
 add rsp, 8
 FIX2INT rax
  LIBCALL1 close, rax
  INT2FIX rax
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jge L5986
 sub rsp, 8
 mov [rsp + 0], rcx
 mov SELF, [____25file_2derror] ; %file-error
 mov rsi, rdx
 mov rdx, L5988 ; 
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
L5986:
 mov SELF, rcx
 mov rcx, undefined ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5987:
f_22:
; ((_args_46^135 . rsi) (_loc_45^134 . rdx) (k4778 . rcx))
 mov rax, 3 ; 
 call consrest
 mov rsi, rax
 sub rsp, 8
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3974
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov [ALLOC + 32], rdx
 mov rax, ALLOC
 add ALLOC, 40
 mov [rsp + 0], rax
 mov SELF, [____25interrupt_2dhook] ; %interrupt-hook
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3974:
; ()
 sub rsp, 8
 CALL get_last_error
 mov [rsp + 0], rax
 mov rax, L5989 ; 
 mov r11, 3 ; '1
 mov r15, [rsp + 0]
 add rsp, 8
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov [ALLOC + 24], r15
 mov rax, 720575940379279366 ; 10/6
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 56
; _exn_47^137 = rcx
 mov rcx, rax
 mov rax, rcx
 mov r11, 7 ; '3
 mov r15, [SELF + 16]
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, rcx
 mov r11, 9 ; '4
 mov r15, [SELF + 32]
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rax, rcx
 mov r11, 11 ; '5
 mov r15, L5990 ; 
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  WRITE_BARRIER [rax + r11 + 4], r15
  mov rax, r15
 mov rdx, rcx
 mov rcx, [SELF + 24]
 mov SELF, [____25current_2dexception_2dhandler] ; %current-exception-handler
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_19:
; ((_lsts_45^118 . rdx) (k4784 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 jne L5991
 mov SELF, rcx
 mov rcx, null ; 
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5991:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_46^120 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_20
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4785 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_20
L5992:
f_20:
; ((_lsts_47^121 . rdx) (k4787 . rcx))
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_44^122 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
 cmp rax, FALSE
 je L5993
 mov SELF, rcx
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5993:
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _copy_48^125 = rsi
 mov rsi, rax
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_21
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 32], rax
 mov r11, ALLOC
 add ALLOC, 40
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4788 = rdi
 mov rdi, rax
 sub rsp, 16
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_21
L5994:
f_21:
; ((_node_49^126 . rdx) (k4790 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5995
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^128 = rsi
 mov rsi, rax
 sub rsp, 24
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3978
 mov [ALLOC + 16], rsi
 mov [ALLOC + 24], rcx
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_21
L5995:
 sub rsp, 24
 mov rax, [SELF + 24]
; _x_44^132 = rsi
 mov rsi, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov [rsp + 8], rcx
 mov rax, [SELF + 32]
 mov rax, [rax + 8]
 mov [rsp + 16], rax
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 mov SELF, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_20
L5996:
f_3978:
; ((t4791 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_17:
; ((_lst_45^109 . rdx) (k4792 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_46^110 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_18
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4793 = rdi
 mov rdi, rax
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, rdi
 mov rsi, null ; 
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_18
f_18:
; ((_rest_48^112 . rsi) (_lst_47^111 . rdx) (k4795 . rcx))
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L5997
 sub rsp, 32
 mov rax, rdx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _x_45^115 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rsi
 mov [ALLOC + 8], rax
 mov [ALLOC + 16], r11
 mov rax, 144115188075855874 ; 2/2
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_18
L5997:
 mov SELF, rcx
 mov rcx, rsi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L5998:
f_16:
; ((_i_47^107 . rsi) (_lst_46^106 . rdx) (k4796 . rcx))
 sub rsp, 32
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3980
 mov [ALLOC + 16], rcx
 mov rax, ALLOC
 add ALLOC, 24
 mov [rsp + 16], rax
 mov rax, [SELF + 16]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3980:
; ((t4797 . rcx))
 sub rsp, 16
 mov rax, rcx
 mov r11, 1 ; '0
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_14:
; ((_i_46^100 . rsi) (_lst_45^99 . rdx) (k4798 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_47^101 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_15
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4799 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r8
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_15
f_15:
; ((_i_49^103 . rsi) (_lst_48^102 . rdx) (k4801 . rcx))
 mov rax, rsi
 mov r11, 1 ; '0
 cmp rax, r11
 jne L5999
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L5999:
 sub rsp, 32
 mov rax, rsi
 mov r11, 3 ; '1
 sub rax, r11
  inc rax
 mov [rsp + 0], rax
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
 mov [rsp + 8], rax
 mov [rsp + 16], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_15
L6000:
f_12:
; ((_x_45^82 . rdx) (k4802 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_46^83 = rsi
 mov rsi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_13
 mov [ALLOC + 16], rsi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rsi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rsi
 mov rax, [rax + 8]
; t4803 = rdi
 mov rdi, rax
 sub rsp, 24
 mov [rsp + 0], rdx
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, rdi
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_13
f_13:
; ((_slow_48^85 . rsi) (_fast_47^84 . rdx) (k4805 . rcx))
 mov rax, rdx
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_49^86 = rdi
 mov rdi, rax
 mov rax, rdi
 cmp rax, FALSE
 je L6001
 mov SELF, rcx
 mov rcx, rdi
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6001:
 sub rsp, 8
 mov rax, rdx
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L6003
 mov rax, rdx
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _fast_50^89 = r8
 mov r8, rax
 mov rax, r8
 mov r11, null ; 
 cmp rax, r11
 SET_T rax
 cmovne rax, FALSE
; _x_51^91 = r9
 mov r9, rax
 mov rax, r9
 cmp rax, FALSE
 je L6005
 mov SELF, rcx
 mov rcx, r9
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6005:
 sub rsp, 8
 mov rax, r8
 test rax, 1
  if z
  mov rax, [rax]
  shr rax, HEADER_SHIFT
  and rax, 0x7f
  INT2FIX rax
  else
  mov rax, (TYPENUMBER(FIXNUM) << 1) | 1
  endif
 mov [rsp + 0], rax
 mov r11, 5 ; '2
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L6007
 mov rax, r8
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _fast_52^94 = r10
 mov r10, rax
 mov rax, rsi
 mov r11, 3 ; '1
 CHECK_SLOT_ACCESS rax, r11
  shl r11, 2
  mov rax, [rax + r11 + 4]
; _slow_53^95 = r12
 mov r12, rax
 mov rax, r10
 mov r11, r12
 cmp rax, r11
 jne L6009
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6009:
 sub rsp, 16
 mov [rsp + 0], rcx
 mov rax, [SELF + 16]
 mov rax, [rax + 8]
 mov [rsp + 8], rax
 mov rdx, r10
 mov rsi, r12
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov r11, 4 ; 
 jmp f_13
L6010:
L6007:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6008:
L6006:
L6003:
 mov SELF, rcx
 mov rcx, FALSE
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6004:
L6002:
f_7:
; ((_y_50^45 . rsi) (_x_49^44 . rdx) (k4814 . rcx))
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3986
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov SELF, [____25_2a] ; %*
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3986:
; ((t4815 . rcx))
; _x_44^46 = rdx
 mov rdx, rcx
 sub rsp, 32
 mov rax, [SELF + 40]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3987
 mov [ALLOC + 16], rdx
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, ALLOC
 add ALLOC, 32
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_5
f_3987:
; ((t4816 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 CALL quotient
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_5:
; ((_y_50^32 . rsi) (_x_49^31 . rdx) (k4807 . rcx))
 mov rax, undefined ; 
 mov [ALLOC + 8], rax
 mov rax, VECTOR | 1 ; 
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 16
; _loop_51^33 = rdi
 mov rdi, rax
 mov rax, 2305843009213693954
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_6
 mov [ALLOC + 16], rdi
 mov r11, ALLOC
 add ALLOC, 24
 mov rax, rdi
 mov [rax + 8], r11
 mov rax, r11
 mov rax, rdi
 mov rax, [rax + 8]
; t4808 = r8
 mov r8, rax
 sub rsp, 24
 mov [rsp + 0], rsi
 mov [rsp + 8], rdx
 mov [rsp + 16], rcx
 mov SELF, r8
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp f_6
f_6:
; ((_y_53^35 . rsi) (_x_52^34 . rdx) (k4810 . rcx))
 sub rsp, 8
 mov rax, rsi
 test rax, 1
 je L6011
 mov rax, rsi
 jmp L6012
L6011:
 mov rax, rsi
 mov rax, [rax + CELLS(1)]
  INT2FIX rax
L6012:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jne L6013
 sub rsp, 8
 mov rax, rdx
 test rax, 1
 je L6015
 mov rax, rdx
 jmp L6016
L6015:
 mov rax, rdx
 mov rax, [rax + CELLS(1)]
  sar rax, 63
  or rax, 1
L6016:
 mov [rsp + 0], rax
 mov r11, 1 ; '0
 mov rax, [rsp + 0]
 add rsp, 8
 cmp rax, r11
 jge L6017
 sub rsp, 16
 mov [rsp + 0], rdx
 mov [rsp + 8], rcx
 mov SELF, [____25_2d] ; %-
 mov rdx, [rsp + 0]
 mov rcx, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L6017:
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6018:
L6013:
; _a_54^40 = rdi
 mov rdi, rdx
 sub rsp, 24
 mov [rsp + 0], rsi
 mov rax, rdx
 mov r11, rsi
 CALL quotient
 mov [rsp + 8], rax
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3985
 mov [ALLOC + 16], rcx
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov [ALLOC + 40], rdi
 mov rax, ALLOC
 add ALLOC, 48
 mov [rsp + 16], rax
 mov SELF, [____25_2a] ; %*
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 add rsp, 24
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6014:
f_3985:
; ((t4812 . rcx))
 mov rdx, [SELF + 40]
 mov rsi, rcx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3984
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 32], rax
 mov rcx, ALLOC
 add ALLOC, 40
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3984:
; ((t4811 . rcx))
 sub rsp, 32
 mov [rsp + 0], rcx
 mov rax, [SELF + 32]
 mov [rsp + 8], rax
 mov rax, [SELF + 16]
 mov [rsp + 16], rax
 mov rax, [SELF + 24]
 mov rax, [rax + 8]
 mov [rsp + 24], rax
 mov rsi, [rsp + 0]
 mov rdx, [rsp + 8]
 mov rcx, [rsp + 16]
 mov SELF, [rsp + 24]
 add rsp, 32
 mov r11, 4 ; 
 jmp f_6
f_4:
 cmp r11, 3
 jne f_c_4_1
; ((_x_46^18 . rdx) (k4833 . rcx))
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _r_47^19 = rsi
 mov rsi, rax
 mov SELF, rcx
 mov rax, rsi
 mov r11, rdx
 fld qword [r11 + CELLS(1)]
  fld1
  fpatan
  fstp qword [rax + CELLS(1)]
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_c_4_1:
; ((_x_47^21 . rsi) (_y_46^20 . rdx) (k4834 . rcx))
 mov rax, rdx
 test rax, 1
 je L6019
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _tmp_45^25 = rdi
 mov rdi, rax
 mov rax, rdi
 mov r11, rdx
 FIX2INT r11
  mov [rsp - CELLS(1)], r11
  fild qword [rsp - CELLS(1)]
  fstp qword [rax + CELLS(1)]
 jmp L6020
L6019:
 mov rax, rdx
L6020:
; _y_48^22 = rdi
 mov rdi, rax
 sub rsp, 8
 mov rax, 2305843009213693958
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3996
 mov [ALLOC + 16], rdi
 mov rax, [SELF + 16]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rcx
 mov [ALLOC + 40], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 48], rax
 mov rax, ALLOC
 add ALLOC, 56
 mov [rsp + 0], rax
 mov SELF, [____25_3d] ; %=
 mov rdx, rsi
 mov rsi, 1 ; '0
 mov rcx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
f_3996:
; ((t4835 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L6021
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3997
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov SELF, [____25_3e] ; %>
 mov rsi, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6021:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3998
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 48]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 40]
 mov SELF, [____25_3e] ; %>
 mov rsi, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6022:
f_3998:
; ((t4837 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L6023
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _r_49^26 = rdx
 mov rdx, rax
; t4838 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693955
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_3999
 mov [ALLOC + 16], rsi
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov rcx, ALLOC
 add ALLOC, 32
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 32]
 mov SELF, [____25_2f] ; %/
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6023:
 mov rax, 2305843009213693957
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_4000
 mov rax, [SELF + 16]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 40]
 mov [ALLOC + 24], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 32], rax
 mov rax, [SELF + 32]
 mov [ALLOC + 40], rax
 mov rcx, ALLOC
 add ALLOC, 48
 mov rdx, [SELF + 16]
 mov SELF, [____25_3c] ; %<
 mov rsi, 1 ; '0
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6024:
f_4000:
; ((t4841 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L6025
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _r_49^27 = rdx
 mov rdx, rax
; t4843 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_4002
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 40]
 mov SELF, [____25_2f] ; %/
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6025:
 mov rax, 1152921504606846984 ; 16/8
 mov [ALLOC + 0], rax
 mov rax, ALLOC
 add ALLOC, 8 + ALIGNED(8)
; _r_49^28 = rdx
 mov rdx, rax
; t4847 = rsi
 mov rsi, rdx
 mov rax, 2305843009213693956
 mov [ALLOC], rax
 mov qword [ALLOC + 8], f_4004
 mov rax, [SELF + 32]
 mov [ALLOC + 16], rax
 mov rax, [SELF + 24]
 mov [ALLOC + 24], rax
 mov [ALLOC + 32], rsi
 mov rcx, ALLOC
 add ALLOC, 40
 mov rdx, [SELF + 16]
 mov rsi, [SELF + 40]
 mov SELF, [____25_2f] ; %/
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 cmp ALLOC, LIMIT
 ja reclaim
 jmp rax
L6026:
f_4004:
; ((t4849 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 fld qword [r11 + CELLS(1)]
  fld1
  fpatan
  fstp qword [rax + CELLS(1)]
; t4846 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rdx
 mov rcx, [SELF + 16]
 mov rsi, [SELF + 24]
 mov SELF, [____25_2b] ; %+
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_4002:
; ((t4845 . rcx))
 mov rax, [SELF + 32]
 mov r11, rcx
 fld qword [r11 + CELLS(1)]
  fld1
  fpatan
  fstp qword [rax + CELLS(1)]
; t4842 = rdx
 mov rdx, rax
 sub rsp, 8
 mov [rsp + 0], rdx
 mov rcx, [SELF + 16]
 mov rsi, [SELF + 24]
 mov SELF, [____25_2d] ; %-
 mov rdx, [rsp + 0]
 add rsp, 8
 mov rax, [SELF + 8]
 mov r11, 4 ; 
 jmp rax
f_3999:
; ((t4840 . rcx))
 sub rsp, 16
 mov rax, [SELF + 16]
 mov r11, rcx
 fld qword [r11 + CELLS(1)]
  fld1
  fpatan
  fstp qword [rax + CELLS(1)]
 mov [rsp + 0], rax
 mov rax, [SELF + 24]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_3997:
; ((t4836 . rcx))
 mov rax, rcx
 cmp rax, FALSE
 je L6027
 sub rsp, 16
 mov rax, [SELF + 24]
 mov [rsp + 0], rax
 mov rax, [SELF + 16]
 mov [rsp + 8], rax
 mov rcx, [rsp + 0]
 mov SELF, [rsp + 8]
 add rsp, 16
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
L6027:
 mov rcx, [SELF + 16]
 mov rdx, [SELF + 24]
 mov SELF, [____25_2d] ; %-
 mov rax, [SELF + 8]
 mov r11, 3 ; 
 jmp rax
L6028:
f_2:
; ((k4851 . rcx))
 mov SELF, rcx
 mov rax, undefined
 mov rcx, rax
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
f_1:
; ((_lst_44^1 . rdx) (k4852 . rcx))
 mov rax, 2 ; 
 call consrest
 mov rdx, rax
 mov SELF, rcx
 mov rcx, rdx
 mov rax, [SELF + 8]
 mov r11, 2 ; 
 jmp rax
 section .data
globals:
____25list:
 dq undefined
___void:
 dq undefined
____25_3d:
 dq undefined
____25_3e:
 dq undefined
____25_3c:
 dq undefined
____3e_3d:
 dq undefined
____3c_3d:
 dq undefined
____25_2a:
 dq undefined
____25_2b:
 dq undefined
____25_2d:
 dq undefined
____25_2f:
 dq undefined
___max:
 dq undefined
___min:
 dq undefined
____25allocate_2dblock:
 dq undefined
___modulo:
 dq undefined
___atan:
 dq undefined
___gcd:
 dq undefined
___lcm:
 dq undefined
___list_3f:
 dq undefined
___list_2dtail:
 dq undefined
___list_2dref:
 dq undefined
___reverse:
 dq undefined
___append:
 dq undefined
____25apply:
 dq undefined
____25file_2derror:
 dq undefined
____25make_2dfile_2dinput_2dport:
 dq undefined
____25make_2dfile_2doutput_2dport:
 dq undefined
____25standard_2dinput_2dport:
 dq undefined
____25standard_2doutput_2dport:
 dq undefined
____25standard_2derror_2dport:
 dq undefined
___open_2dinput_2dfile:
 dq undefined
___open_2doutput_2dfile:
 dq undefined
___string_2dappend:
 dq undefined
____25string_2d_3enumber:
 dq undefined
___number_2d_3estring:
 dq undefined
___list_2d_3evector:
 dq undefined
___vector_2d_3elist:
 dq undefined
___list_2d_3estring:
 dq undefined
___string_2d_3elist:
 dq undefined
___vector:
 dq undefined
___string:
 dq undefined
____25symbol_2dtable:
 dq undefined
___string_2d_3esymbol:
 dq undefined
___for_2deach:
 dq undefined
___map:
 dq undefined
___values:
 dq undefined
___call_2dwith_2dvalues:
 dq undefined
____25call_2fcc:
 dq undefined
____25dynamic_2dwinds:
 dq undefined
___dynamic_2dwind:
 dq undefined
____25dynamic_2dunwind:
 dq undefined
___call_2dwith_2dcurrent_2dcontinuation:
 dq undefined
____25output_2dto_2dport:
 dq undefined
___emergency_2dexit:
 dq undefined
___exit:
 dq undefined
____25current_2dexception_2dhandler:
 dq undefined
____25error:
 dq undefined
____25interrupt_2dhook:
 dq undefined
___case_2dsensitive:
 dq undefined
___read:
 dq undefined
___call_2dwith_2doutput_2dfile:
 dq undefined
___call_2dwith_2dinput_2dfile:
 dq undefined
___with_2dinput_2dfrom_2dfile:
 dq undefined
___with_2doutput_2dto_2dfile:
 dq undefined
____25make_2dpromise:
 dq undefined
___open_2dinput_2dstring:
 dq undefined
___open_2doutput_2dstring:
 dq undefined
___get_2doutput_2dstring:
 dq undefined
___command_2dline:
 dq undefined
___read_2dstring:
 dq undefined
___current_2ddirectory:
 dq undefined
___reclaim:
 dq undefined
___open_2dappend_2doutput_2dfile:
 dq undefined
___print:
 dq undefined
___make_2dparameter:
 dq undefined
____25record_2dtype_2did_2dcounter:
 dq undefined
___make_2ddisjoint_2dtype:
 dq undefined
___bytevector:
 dq undefined
___with_2dinput_2dfrom_2dstring:
 dq undefined
___with_2doutput_2dto_2dstring:
 dq undefined
___bones_2dversion:
 dq undefined
___id:
 dq undefined
___read_2dforms:
 dq undefined
___emit:
 dq undefined
___stringify:
 dq undefined
___symbolify:
 dq undefined
___listify:
 dq undefined
___join:
 dq undefined
___every:
 dq undefined
___any:
 dq undefined
___const:
 dq undefined
___compl:
 dq undefined
___o:
 dq undefined
___foldl:
 dq undefined
___foldr:
 dq undefined
___flip:
 dq undefined
___equal_3d_3f:
 dq undefined
___alist_2dcons:
 dq undefined
___make_2dlist:
 dq undefined
___symbol_3c_3f:
 dq undefined
___symbol_2dappend:
 dq undefined
___car_2bcdr:
 dq undefined
___tail_3f:
 dq undefined
___sublist_3f:
 dq undefined
___butlast:
 dq undefined
___last:
 dq undefined
___last_2dpair:
 dq undefined
___filter:
 dq undefined
___filter_2dmap:
 dq undefined
___append_2dmap:
 dq undefined
___find:
 dq undefined
___find_2dtail:
 dq undefined
___position:
 dq undefined
___posq:
 dq undefined
___append_21:
 dq undefined
___adjoin:
 dq undefined
___difference:
 dq undefined
___union:
 dq undefined
___intersection:
 dq undefined
___delete:
 dq undefined
___delete_2dduplicates:
 dq undefined
___iota:
 dq undefined
___print_2a:
 dq undefined
___show:
 dq undefined
___concatenate:
 dq undefined
___interleave:
 dq undefined
___split_2dat:
 dq undefined
___partition:
 dq undefined
___span:
 dq undefined
___take:
 dq undefined
___drop:
 dq undefined
___cons_2a:
 dq undefined
___option:
 dq undefined
___collect_2doptions:
 dq undefined
___flatten:
 dq undefined
___chomp:
 dq undefined
___read_2dline:
 dq undefined
___read_2dfile:
 dq undefined
___write_2dline:
 dq undefined
___read_2dall:
 dq undefined
___dribble:
 dq undefined
___sleep:
 dq undefined
___sub1:
 dq undefined
___add1:
 dq undefined
___numberize:
 dq undefined
___string_2dsplit:
 dq undefined
___delete_2dfile_2a:
 dq undefined
___scan:
 dq undefined
___eql:
 dq undefined
___padl:
 dq undefined
___padr:
 dq undefined
___pad:
 dq undefined
___trim:
 dq undefined
___absolute_2dpathname_3f:
 dq undefined
___directory_3f:
 dq undefined
___basename:
 dq undefined
___dirname:
 dq undefined
___strip_2dsuffix:
 dq undefined
___replace_2dsuffix:
 dq undefined
___with_2dinput_2dfrom_2dport:
 dq undefined
___with_2doutput_2dto_2dport:
 dq undefined
___call_2dwith_2dinput_2dstring:
 dq undefined
___call_2dwith_2doutput_2dstring:
 dq undefined
___gentemp:
 dq undefined
___atom_3f:
 dq undefined
___vector_2dresize:
 dq undefined
___vector_2dcopy_21:
 dq undefined
___copy_2dlist:
 dq undefined
____48_4f_4d_45:
 dq undefined
___ep:
 dq undefined
___qs:
 dq undefined
____2atemporary_2dfiles_2a:
 dq undefined
___temporary_2ddirectory:
 dq undefined
___with_2dtemporary_2dfiles:
 dq undefined
___make_2dtemporary_2dfilename:
 dq undefined
___temporary_2dfile:
 dq undefined
___run_2dverbose:
 dq undefined
___run_2ddry_2drun:
 dq undefined
___execute:
 dq undefined
___check_2dstatus:
 dq undefined
___system_2dsoftware:
 dq undefined
___system_2darchitecture:
 dq undefined
___file_2dexecutable_3f:
 dq undefined
___file_2dsize:
 dq undefined
___file_2dmodification_2dtime:
 dq undefined
___limited:
 dq undefined
____2apretty_2dprint_2dwidth_2a:
 dq undefined
___pretty_2dprint_2dhook:
 dq undefined
___pretty_2dprint:
 dq undefined
___pp:
 dq undefined
___expand_2derror_2dhook:
 dq undefined
___expand_2dsyntax:
 dq undefined
___i_3aundefined:
 dq undefined
___uncons:
 dq undefined
___uncons_2d2:
 dq undefined
___uncons_2d3:
 dq undefined
___uncons_2d4:
 dq undefined
___uncons_2dcons:
 dq undefined
___unlist:
 dq undefined
___unvector:
 dq undefined
___parse_2dlambda_2dlist:
 dq undefined
___build_2dlambda_2dlist:
 dq undefined
___fragment:
 dq undefined
___procedure_2dcall_2dexpression_3f:
 dq undefined
___lambda_2did_2dcounter:
 dq undefined
___canonicalize_2dexpression:
 dq undefined
___rename_2dcounter:
 dq undefined
___renamed_2dvariables:
 dq undefined
___rename_2dvar:
 dq undefined
___genvar:
 dq undefined
___genvar_2fprefix:
 dq undefined
___dump_2dexpressions:
 dq undefined
___pure_2dexpression_3f:
 dq undefined
___cp1:
 dq undefined
___cp:
 dq undefined
___simplify:
 dq undefined
___implicitly_2dretained_2dglobals:
 dq undefined
___detect_2dunused_2dvariables:
 dq undefined
___cc_2dbox_2dcounts:
 dq undefined
___cc:
 dq undefined
___cps:
 dq undefined
___mangle_2didentifier:
 dq undefined
___mangle_2dstring_2dconstant:
 dq undefined
___mangle_2dfeature_2dname:
 dq undefined
___implementation_2dfeatures:
 dq undefined
___file_2dsearch_2dpath:
 dq undefined
___program_2dfile_2dfilename:
 dq undefined
___expand_2dprogram:
 dq undefined
___generate_2dcond_2dexpand:
 dq undefined
___topological_2dsort:
 dq undefined
___available_2dregisters:
 dq undefined
___blocked_2dregister_3f:
 dq undefined
___trivial_2dregister_2dexpression_3f:
 dq undefined
___simple_2dexpression_3f:
 dq undefined
___translate_2fregisters:
 dq undefined
___used_2dregisters:
 dq undefined
___argument_2dregister:
 dq undefined
___basic_2dimplementation_2dfeatures:
 dq undefined
___argument_2dregister_2dcount:
 dq undefined
___primitives:
 dq undefined
___closures_2dto_2dbe_2dtranslated:
 dq undefined
___literals_2dto_2dbe_2dtranslated:
 dq undefined
___string_2dliterals:
 dq undefined
___symbol_2dtable:
 dq undefined
___label_2dcounter:
 dq undefined
___allocating:
 dq undefined
___emit_2dexpr_2dcomments:
 dq undefined
___enable_2dchecks:
 dq undefined
___enable_2dpic:
 dq undefined
___verbose:
 dq undefined
___environment:
 dq undefined
___locals_2dcounter:
 dq undefined
___unused_2dglobal_2dvariables:
 dq undefined
___dropped_2dglobal_2dcount:
 dq undefined
___cells:
 dq undefined
___bytes:
 dq undefined
___default_2dconfiguration:
 dq undefined
___compile:
 dq undefined
___compile_2dfile:
 dq undefined
____4e_42:
 dq undefined
___generate_2dcode:
 dq undefined
___generate_2dglobals:
 dq undefined
___generate_2dclosures:
 dq undefined
___generate_2dliterals:
 dq undefined
___typecode:
 dq undefined
___generate_2dstrings:
 dq undefined
___generate_2dsymbol_2dtable:
 dq undefined
___fixnum_3f:
 dq undefined
___register_2dliteral:
 dq undefined
___label:
 dq undefined
___translate_2dinline_2darguments:
 dq undefined
___translate:
 dq undefined
___translate_2dstore:
 dq undefined
___translate_2dcall:
 dq undefined
___translate_2dcall_2dto_2dknown_2dtarget:
 dq undefined
___translate_2dclosure:
 dq undefined
___translate_2dllist:
 dq undefined
___translate_2dliteral:
 dq undefined
___encode_2dfixnum:
 dq undefined
___lookup_2dvariable:
 dq undefined
___command_2dline_2doption_3f:
 dq undefined
___usage:
 dq undefined
___main:
 dq undefined
___fixnum_2drange:
 dq undefined
___temporary_2dregisters:
 dq undefined
___argument_2dregisters:
 dq undefined
___word_2dsize:
 dq undefined
___target_2darch:
 dq undefined
___target_2dendianness:
 dq undefined
___arg_2dregister:
 dq undefined
___alloc_2dregister:
 dq undefined
___self_2dregister:
 dq undefined
___false_2dregister:
 dq undefined
___count_2dregister:
 dq undefined
___stack_2dregister:
 dq undefined
___generate_2dheader:
 dq undefined
___generate_2dtrailer:
 dq undefined
___generate_2dprimitives:
 dq undefined
___generate_2dsection:
 dq undefined
___generate_2ddefword:
 dq undefined
___generate_2ddefbyte:
 dq undefined
___generate_2ddefstring:
 dq undefined
___generate_2ddeffloat:
 dq undefined
___generate_2dalign:
 dq undefined
___generate_2dpadding:
 dq undefined
___generate_2dequ:
 dq undefined
___generate_2dclosure_2dalloc:
 dq undefined
___generate_2dmove:
 dq undefined
___generate_2dadd:
 dq undefined
___generate_2dmove_2dto_2dlocal:
 dq undefined
___generate_2dreserve_2don_2dstack:
 dq undefined
___generate_2dpop_2dstack:
 dq undefined
___generate_2dcomment:
 dq undefined
___generate_2dexpr_2dcomment:
 dq undefined
___generate_2dglobal_2dstore:
 dq undefined
___generate_2dglobal_2dref:
 dq undefined
___generate_2dlocal_2dref:
 dq undefined
___generate_2dlocal_2dstore:
 dq undefined
___generate_2dconditional_2dbranch:
 dq undefined
___generate_2djump:
 dq undefined
___generate_2dimmediate_2dref:
 dq undefined
___generate_2dslot_2dref:
 dq undefined
___generate_2dslot_2dstore:
 dq undefined
___generate_2dtrue_2dref:
 dq undefined
___generate_2dalloc_2dcheck:
 dq undefined
___generate_2dtail_2dcall:
 dq undefined
___generate_2ddirect_2dtail_2dcall:
 dq undefined
___generate_2dcall:
 dq undefined
___generate_2dargc_2dcheck:
 dq undefined
___generate_2dconditional_2dmove:
 dq undefined
___generate_2dalloc_2dalignment:
 dq undefined
___generate_2dprocedure_2dcheck:
 dq undefined
___generate_2dconditional_2dset:
 dq undefined
___generate_2dconditional_2dbranch_2fcond:
 dq undefined
___generate_2dconditional_2dmove_2fcond:
 dq undefined
___real_2dcondition:
 dq undefined
___inverted_2dcondition:
 dq undefined
___generate_2dlabel:
 dq undefined
___generate_2dinstruction:
 dq undefined
endglobals:
 section .data
 align 8
L5990:
 dq 72057594037927937
 dq L6029
 align 8
L5989:
 dq 72057594037927937
 dq L6030
 align 8
L5988:
 dq 72057594037927937
 dq L6031
 align 8
L5985:
 dq 72057594037927937
 dq L6032
 align 8
L5978:
 dq 72057594037927937
 dq L6033
 align 8
L5975:
 dq 72057594037927937
 dq L6034
 align 8
L5972:
 dq 72057594037927937
 dq L6035
 align 8
L5969:
 dq 72057594037927937
 dq L6036
 align 8
L5846:
 dq 288230376151711745
 dq 251
 align 8
L5843:
 dq 288230376151711745
 dq 247
 align 8
L5840:
 dq 288230376151711745
 dq 187
 align 8
L5837:
 dq 288230376151711745
 dq 183
 align 8
L5834:
 dq 288230376151711745
 dq 69
 align 8
L5831:
 dq 288230376151711745
 dq 71
 align 8
L5828:
 dq 288230376151711745
 dq 119
 align 8
L5825:
 dq 288230376151711745
 dq 83
 align 8
L5822:
 dq 288230376151711745
 dq 81
 align 8
L5819:
 dq 288230376151711745
 dq 185
 align 8
L5816:
 dq 288230376151711745
 dq 249
 align 8
L5796:
 dq 288230376151711745
 dq 21
 align 8
L5792:
 dq 288230376151711745
 dq 69
 align 8
L5789:
 dq 288230376151711745
 dq 185
 align 8
L5776:
 dq 288230376151711745
 dq 249
 align 8
L5773:
 dq 288230376151711745
 dq 185
 align 8
L5756:
 dq 288230376151711745
 dq 19
 align 8
L5752:
 dq 288230376151711745
 dq 65
 align 8
L5748:
 dq 288230376151711745
 dq 21
 align 8
L5744:
 dq 288230376151711745
 dq 83
 align 8
L5743:
 dq 288230376151711745
 dq 65
 align 8
L5667:
 dq 288230376151711745
 dq 21
 align 8
L5666:
 dq 288230376151711745
 dq 21
L5648 equ L5989
 align 8
L5634:
 dq 72057594037927937
 dq L6037
L5632 equ L5989
 align 8
L5623:
 dq 72057594037927937
 dq L6038
L5622 equ L5623
L5621 equ L5989
 align 8
L5617:
 dq 72057594037927937
 dq L6039
 align 8
L5612:
 dq 72057594037927937
 dq L6040
 align 8
L5607:
 dq 288230376151711745
 dq 129
 align 8
L5602:
 dq 72057594037927937
 dq L6041
 align 8
L5601:
 dq 72057594037927937
 dq L6042
 align 8
L5588:
 dq 288230376151711745
 dq 251
 align 8
L5585:
 dq 288230376151711745
 dq 187
 align 8
L5582:
 dq 288230376151711745
 dq 83
 align 8
L5581:
 dq 288230376151711745
 dq 249
 align 8
L5578:
 dq 288230376151711745
 dq 249
 align 8
L5575:
 dq 288230376151711745
 dq 69
 align 8
L5572:
 dq 288230376151711745
 dq 119
 align 8
L5569:
 dq 288230376151711745
 dq 79
 align 8
L5566:
 dq 288230376151711745
 dq 193
 align 8
L5561:
 dq 288230376151711745
 dq 89
 align 8
L5560:
 dq 288230376151711745
 dq 251
 align 8
L5557:
 dq 288230376151711745
 dq 247
 align 8
L5556:
 dq 288230376151711745
 dq 187
 align 8
L5553:
 dq 288230376151711745
 dq 183
 align 8
L5552:
 dq 288230376151711745
 dq 83
 align 8
L5549:
 dq 288230376151711745
 dq 81
 align 8
L5546:
 dq 288230376151711745
 dq 71
 align 8
L5535:
 dq 288230376151711745
 dq 21
 align 8
L5473:
 dq 288230376151711745
 dq 83
 align 8
L5461:
 dq 288230376151711745
 dq 71
 align 8
L5441:
 dq 288230376151711745
 dq 241
 align 8
L5430:
 dq 288230376151711745
 dq 27
 align 8
L5424:
 dq 288230376151711745
 dq 65
 align 8
L5418:
 dq 288230376151711745
 dq 19
 align 8
L5412:
 dq 288230376151711745
 dq 21
 align 8
L5406:
 dq 72057594037927937
 dq L6043
 align 8
L5402:
 dq 288230376151711745
 dq 79
 align 8
L5399:
 dq 288230376151711745
 dq 185
 align 8
L5396:
 dq 288230376151711745
 dq 67
 align 8
L5393:
 dq 288230376151711745
 dq 75
 align 8
L5390:
 dq 288230376151711745
 dq 119
 align 8
L5389:
 dq 288230376151711745
 dq 83
 align 8
L5386:
 dq 288230376151711745
 dq 81
 align 8
L5383:
 dq 288230376151711745
 dq 171
 align 8
L5380:
 dq 288230376151711745
 dq 235
 align 8
L5377:
 dq 288230376151711745
 dq 139
 align 8
L5374:
 dq 288230376151711745
 dq 203
 align 8
L5371:
 dq 288230376151711745
 dq 147
 align 8
L5368:
 dq 288230376151711745
 dq 211
 align 8
L5365:
 dq 288230376151711745
 dq 133
 align 8
L5362:
 dq 288230376151711745
 dq 197
 align 8
L5359:
 dq 288230376151711745
 dq 159
 align 8
L5356:
 dq 288230376151711745
 dq 223
 align 8
L5353:
 dq 288230376151711745
 dq 177
 align 8
L5350:
 dq 288230376151711745
 dq 241
 align 8
L5347:
 dq 288230376151711745
 dq 169
 align 8
L5344:
 dq 288230376151711745
 dq 233
 align 8
L5341:
 dq 288230376151711745
 dq 141
 align 8
L5338:
 dq 288230376151711745
 dq 205
 align 8
L5307:
 dq 288230376151711745
 dq 93
 align 8
L5296:
 dq 288230376151711745
 dq 141
 align 8
L5293:
 dq 288230376151711745
 dq 131
 align 8
L5290:
 dq 288230376151711745
 dq 205
 align 8
L5287:
 dq 288230376151711745
 dq 195
 align 8
L5284:
 dq 288230376151711745
 dq 115
 align 8
L5281:
 dq 288230376151711745
 dq 97
 align 8
L5276:
 dq 288230376151711745
 dq 119
 align 8
L5264:
 dq 288230376151711745
 dq 241
 align 8
L5263:
 dq 288230376151711745
 dq 19
 align 8
L5260:
 dq 288230376151711745
 dq 233
 align 8
L5259:
 dq 288230376151711745
 dq 27
 align 8
L5256:
 dq 288230376151711745
 dq 229
 align 8
L5251:
 dq 288230376151711745
 dq 195
 align 8
L5250:
 dq 288230376151711745
 dq 21
 align 8
L5247:
 dq 288230376151711745
 dq 221
 align 8
L5235:
 dq 288230376151711745
 dq 185
 align 8
L5223:
 dq 288230376151711745
 dq 69
 align 8
L5204:
 dq 144115188075855874
 dq L6044
 dq L6045
 align 8
L6045:
 dq 144115188075855874
 dq L6046
 dq L6047
 align 8
L6047:
 dq 144115188075855874
 dq L6048
 dq L6049
 align 8
L6049:
 dq 144115188075855874
 dq L6050
 dq L6051
 align 8
L6051:
 dq 144115188075855874
 dq L6052
 dq L6053
 align 8
L6053:
 dq 144115188075855874
 dq L6054
 dq L6055
 align 8
L6055:
 dq 144115188075855874
 dq L6056
 dq L6057
 align 8
L6057:
 dq 144115188075855874
 dq L6058
 dq L6059
L6059 equ null
 align 8
L6058:
 dq 288230376151711745
 dq 69
 align 8
L6056:
 dq 288230376151711745
 dq 119
 align 8
L6054:
 dq 288230376151711745
 dq 187
 align 8
L6052:
 dq 288230376151711745
 dq 183
 align 8
L6050:
 dq 288230376151711745
 dq 83
 align 8
L6048:
 dq 288230376151711745
 dq 81
 align 8
L6046:
 dq 288230376151711745
 dq 251
 align 8
L6044:
 dq 288230376151711745
 dq 247
 align 8
L5178:
 dq 288230376151711745
 dq 21
 align 8
L5163:
 dq 72057594037927937
 dq L6060
 align 8
L5031:
 dq 72057594037927937
 dq L6061
 align 8
L4977:
 dq 288230376151711745
 dq 65
 align 8
L4974:
 dq 288230376151711745
 dq 95
 align 8
L4951:
 dq 144115188075855874
 dq L6062
 dq L6063
 align 8
L6063:
 dq 144115188075855874
 dq L6064
 dq L6065
L6065 equ null
 align 8
L6062:
 dq 72057594037927937
 dq L6066
 align 8
L4950:
 dq 72057594037927937
 dq L6067
 align 8
L4949:
 dq 144115188075855874
 dq L6068
 dq L6069
 align 8
L6069:
 dq 144115188075855874
 dq L6070
 dq L6071
L6071 equ null
L6068 equ L6062
L4942 equ L5617
L4939 equ L5612
L4936 equ L5602
L4933 equ L5601
L4931 equ L5617
L4927 equ L5612
L4923 equ L5602
L4919 equ L5601
 align 8
L4913:
 dq 288230376151711745
 dq 19
 align 8
L4909:
 dq 288230376151711745
 dq 27
 align 8
L4905:
 dq 288230376151711745
 dq 21
 align 8
L4901:
 dq 288230376151711745
 dq 65
 align 8
L4872:
 dq 288230376151711745
 dq 69
 align 8
L4869:
 dq 288230376151711745
 dq 185
 align 8
L4793:
 dq 288230376151711745
 dq 21
 align 8
L4736:
 dq 72057594037927937
 dq L6072
L4733 equ L5163
 align 8
L4730:
 dq 72057594037927937
 dq L6073
 align 8
L4727:
 dq 72057594037927937
 dq L6074
 align 8
L4724:
 dq 72057594037927937
 dq L6075
 align 8
L4721:
 dq 72057594037927937
 dq L6076
 align 8
L4718:
 dq 72057594037927937
 dq L6077
 align 8
L4715:
 dq 72057594037927937
 dq L6078
 align 8
L4712:
 dq 72057594037927937
 dq L6079
 align 8
L4709:
 dq 72057594037927937
 dq L6080
 align 8
L4706:
 dq 72057594037927937
 dq L6081
 align 8
L4703:
 dq 72057594037927937
 dq L6082
 align 8
L4700:
 dq 72057594037927937
 dq L6083
 align 8
L4699:
 dq 288230376151711745
 dq 21
 align 8
L4658:
 dq 72057594037927937
 dq L6084
L4657 equ L4658
 align 8
L4635:
 dq 288230376151711745
 dq 191
L4624 equ L4715
L4621 equ L5601
 align 8
L4618:
 dq 72057594037927937
 dq L6085
L4615 equ L4700
L4612 equ L4712
 align 8
L4609:
 dq 72057594037927937
 dq L6086
L4606 equ L4709
L4603 equ L5163
L4598 equ L5163
L4529 equ L4712
L4526 equ L4609
L4523 equ L4715
L4520 equ L5601
L4517 equ L4700
L4505 equ L4709
 align 8
L4496:
 dq 72057594037927937
 dq L6087
L4493 equ L4709
L4488 equ L5163
 align 8
L4485:
 dq 72057594037927937
 dq L6088
 align 8
L4482:
 dq 72057594037927937
 dq L6089
L4473 equ L4700
L4466 equ L5601
L4431 equ L4709
L4428 equ L4496
L4422 equ L4496
L4415 equ L4618
L4402 equ L4709
L4399 equ L4709
 align 8
L4394:
 dq 72057594037927937
 dq L6090
L4271 equ L4394
L4245 equ L4394
L4157 equ L5163
 align 8
L4147:
 dq 144115188075855874
 dq L6091
 dq L6092
L6092 equ null
L6091 equ L4394
L4136 equ L4394
L4128 equ L5031
L4122 equ L4709
L4113 equ L4709
L4110 equ L4715
L4101 equ L4715
L4098 equ L4712
L4087 equ L4712
L4084 equ L4712
 align 8
L4083:
 dq 144115188075855874
 dq L6093
 dq L6094
L6094 equ null
 align 8
L6093:
 dq 144115188075855874
 dq L6095
 dq L6096
L6096 equ null
 align 8
L6095:
 dq 72057594037927937
 dq L6097
L4074 equ L4712
 align 8
L4071:
 dq 72057594037927937
 dq L6098
L4070 equ L5163
L4063 equ L4700
L4054 equ L4071
L4051 equ L4700
L4044 equ L4700
L4035 equ L4071
 align 8
L4032:
 dq 72057594037927937
 dq L6099
L4031 equ L5163
L4022 equ L4700
L4019 equ L5163
L4018 equ L5163
L4011 equ L5163
L4002 equ L5163
 align 8
L3999:
 dq 72057594037927937
 dq L6100
L3990 equ L3999
 align 8
L3987:
 dq 72057594037927937
 dq L6101
L3978 equ L3987
 align 8
L3975:
 dq 72057594037927937
 dq L6102
L3968 equ L3975
 align 8
L3959:
 dq 72057594037927937
 dq L6103
L3956 equ L5163
L3949 equ L5163
L3942 equ L5163
L3939 equ L4730
L3938 equ L5163
L3937 equ L5163
L3918 equ L4730
L3915 equ L4618
L3914 equ L5163
L3913 equ L5163
L3894 equ L4618
L3891 equ L5163
L3882 equ L4730
L3879 equ L4618
L3876 equ L4730
L3875 equ L4730
 align 8
L3874:
 dq 72057594037927937
 dq L6104
L3853 equ L4700
L3844 equ L4071
L3839 equ L4730
L3838 equ L4730
L3837 equ L3874
L3815 equ L4700
L3804 equ L5601
L3799 equ L5601
L3782 equ L5031
L3765 equ L4618
L3762 equ L4730
 align 8
L3759:
 dq 72057594037927937
 dq L6105
 align 8
L3758:
 dq 144115188075855874
 dq L6106
 dq L6107
L6107 equ null
L6106 equ L4394
L3753 equ L3759
L3750 equ L4071
 align 8
L3749:
 dq 144115188075855874
 dq L6108
 dq L6109
L6109 equ null
L6108 equ L4394
L3744 equ L4071
L3741 equ L4032
 align 8
L3740:
 dq 144115188075855874
 dq L6110
 dq L6111
L6111 equ null
L6110 equ L4394
L3735 equ L4032
L3724 equ L5601
L3710 equ L5031
L3709 equ L3759
L3692 equ L3759
L3689 equ L4071
L3678 equ L4071
L3675 equ L4032
L3666 equ L4032
L3656 equ L5031
 align 8
L3649:
 dq 72057594037927937
 dq L6112
 align 8
L3640:
 dq 72057594037927937
 dq L6113
 align 8
L3629:
 dq 72057594037927937
 dq L6114
 align 8
L3620:
 dq 72057594037927937
 dq L6115
 align 8
L3615:
 dq 144115188075855874
 dq L6116
 dq L6117
L6117 equ null
 align 8
L6116:
 dq 72057594037927937
 dq L6118
 align 8
L3612:
 dq 144115188075855874
 dq L6119
 dq L6120
L6120 equ null
L6119 equ L6095
L3599 equ L3999
L3584 equ L3759
L3575 equ L5601
L3559 equ L5031
L3554 equ L4071
L3541 equ L4032
 align 8
L3536:
 dq 144115188075855874
 dq L6121
 dq L6122
L6122 equ null
L6121 equ L6116
L3523 equ L5601
L3519 equ L5031
L3505 equ L3999
L3494 equ L3987
L3485 equ L3975
L3476 equ L3959
L3465 equ L4709
L3461 equ L5031
 align 8
L3454:
 dq 144115188075855874
 dq L6123
 dq L6124
L6124 equ null
L6123 equ L6116
L3441 equ L4715
L3428 equ L4712
L3411 equ L4071
L3398 equ L4032
L3391 equ L5163
L3388 equ L4618
L3369 equ L4730
L3366 equ L4618
L3357 equ L5601
L3347 equ L5031
L3336 equ L5601
 align 8
L3329:
 dq 144115188075855874
 dq L6125
 dq L6126
L6126 equ null
L6125 equ L6116
L3321 equ L5031
 align 8
L3319:
 dq 72057594037927937
 dq L6127
L3306 equ L3999
L3297 equ L3999
L3294 equ L3987
L3285 equ L3987
L3282 equ L3975
L3275 equ L3975
L3266 equ L3959
L3263 equ L4709
L3254 equ L4709
L3251 equ L4715
L3242 equ L4715
L3239 equ L4712
L3234 equ L4712
L3231 equ L4071
L3216 equ L4071
L3213 equ L4032
L3202 equ L4032
L3199 equ L5163
L3194 equ L5163
L3189 equ L4618
L3170 equ L4730
L3167 equ L4618
L3158 equ L5601
L3154 equ L5031
L3147 equ L5601
L3125 equ L5031
L3121 equ L3319
L3114 equ L3319
L3111 equ L3999
L3102 equ L3999
L3099 equ L3987
L3090 equ L3987
L3087 equ L3975
L3080 equ L3975
L3071 equ L3959
L3068 equ L4709
L3059 equ L4709
L3056 equ L4715
L3045 equ L4715
L3042 equ L4071
L3027 equ L4071
L3024 equ L4032
L3013 equ L4032
L3009 equ L5031
L3008 equ L4712
L3007 equ L4712
 align 8
L3004:
 dq 144115188075855874
 dq L6128
 dq L6129
 align 8
L6129:
 dq 144115188075855874
 dq L6130
 dq L6131
L6131 equ null
L6130 equ false
L6128 equ L5601
 align 8
L2997:
 dq 144115188075855874
 dq L6132
 dq L6133
 align 8
L6133:
 dq 144115188075855874
 dq L6134
 dq L6135
L6135 equ null
L6134 equ true
L6132 equ L5601
L2990 equ L4712
L2987 equ L4712
 align 8
L2984:
 dq 144115188075855874
 dq L6136
 dq L6137
 align 8
L6137:
 dq 144115188075855874
 dq L6138
 dq L6139
L6139 equ null
L6138 equ true
L6136 equ L5601
 align 8
L2977:
 dq 144115188075855874
 dq L6140
 dq L6141
 align 8
L6141:
 dq 144115188075855874
 dq L6142
 dq L6143
L6143 equ null
L6142 equ false
L6140 equ L5601
L2970 equ L4712
L2957 equ L4712
L2954 equ L5163
L2945 equ L5163
L2942 equ L4618
L2923 equ L4618
L2920 equ L4712
L2919 equ L4730
L2915 equ L5031
L2913 equ L5031
L2904 equ L4712
L2897 equ L3987
L2872 equ L4730
L2863 equ L5601
L2843 equ L5031
L2837 equ L3319
L2830 equ L3319
L2827 equ L3999
L2818 equ L3999
L2815 equ L3987
L2806 equ L3987
L2803 equ L3975
L2796 equ L3975
L2787 equ L3959
L2784 equ L4709
L2775 equ L4709
L2772 equ L4715
L2761 equ L4715
L2758 equ L4712
L2747 equ L4712
L2744 equ L4071
 align 8
L2743:
 dq 72057594037927937
 dq L6144
L2738 equ L2743
L2721 equ L4071
L2718 equ L4032
L2717 equ L2743
L2712 equ L2743
L2699 equ L4032
L2696 equ L5163
L2695 equ L5163
L2688 equ L5163
L2679 equ L5163
L2676 equ L2743
L2667 equ L4618
L2648 equ L4730
L2645 equ L4618
L2636 equ L5601
 align 8
L2621:
 dq 72057594037927937
 dq L6145
L2618 equ L3629
 align 8
L2617:
 dq 72057594037927937
 dq L6146
 align 8
L2616:
 dq 72057594037927937
 dq L6147
 align 8
L2615:
 dq 72057594037927937
 dq L6148
 align 8
L2612:
 dq 72057594037927937
 dq L6149
 align 8
L2611:
 dq 72057594037927937
 dq L6150
 align 8
L2610:
 dq 72057594037927937
 dq L6151
L2609 equ L2616
 align 8
L2608:
 dq 72057594037927937
 dq L6152
L2605 equ L2612
 align 8
L2604:
 dq 72057594037927937
 dq L6153
 align 8
L2603:
 dq 72057594037927937
 dq L6154
L2602 equ L2616
 align 8
L2601:
 dq 72057594037927937
 dq L6155
L2598 equ L2612
L2596 equ L5031
L2594 equ L5031
L2593 equ L3649
 align 8
L2582:
 dq 72057594037927937
 dq L6156
L2579 equ L3649
L2570 equ L3649
L2567 equ L3620
L2558 equ L3620
L2544 equ L5031
L2538 equ L3319
L2531 equ L3319
L2528 equ L4730
L2524 equ L5031
L2523 equ L3649
L2510 equ L2743
L2509 equ L3759
L2494 equ L4071
L2491 equ L3759
L2490 equ L4730
L2486 equ L5031
L2485 equ L3649
L2472 equ L2743
L2461 equ L4032
L2458 equ L3620
 align 8
L2457:
 dq 72057594037927937
 dq L6157
L2452 equ L2582
L2439 equ L4715
L2435 equ L5031
 align 8
L2428:
 dq 72057594037927937
 dq L6158
L2413 equ L4730
L2392 equ L4730
L2389 equ L4712
L2382 equ L4712
L2373 equ L3959
L2370 equ L3999
L2361 equ L3999
L2358 equ L3987
L2349 equ L3987
L2346 equ L3975
L2339 equ L3975
L2334 equ L6095
L2331 equ L6116
L2320 equ L5601
L2317 equ L3640
L2316 equ L3620
L2311 equ L3649
L2303 equ L5031
L2297 equ L3319
L2290 equ L3319
L2287 equ L2610
L2280 equ L2610
L2277 equ L2608
L2270 equ L2608
L2267 equ L2611
L2260 equ L2611
L2257 equ L3759
L2255 equ L5031
L2248 equ L3629
L2245 equ L2617
L2242 equ L2615
L2223 equ L3759
L2220 equ L3999
L2211 equ L3999
L2208 equ L4730
L2189 equ L4730
L2186 equ L4712
L2181 equ L4712
L2178 equ L3987
L2169 equ L3987
L2160 equ L4715
L2157 equ L3959
L2154 equ L3975
L2149 equ L6116
L2146 equ L6095
L2143 equ L5601
L2140 equ L3640
L2137 equ L3649
L2134 equ L3620
L2127 equ L3620
L2121 equ L5031
L2113 equ L3620
L2110 equ L3649
L2101 equ L3629
L2098 equ L2617
L2095 equ L2615
L2086 equ L3620
L2083 equ L3649
L2077 equ L4032
L2074 equ L5031
L2064 equ L4715
L2055 equ L4709
L2052 equ L4712
L2051 equ L4032
L2050 equ L4712
L2037 equ L4712
L2034 equ L4032
L2033 equ L4730
 align 8
L2032:
 dq 144115188075855874
 dq L6159
 dq L6160
 align 8
L6160:
 dq 144115188075855874
 dq L6161
 dq L6162
L6162 equ null
L6161 equ false
L6159 equ L5601
L2031 equ L4715
L2022 equ L4715
L2011 equ L3959
L2008 equ L4730
L2007 equ L3999
L1998 equ L3999
L1983 equ L3999
L1980 equ L4730
L1979 equ L3987
L1970 equ L3987
L1955 equ L3987
L1952 equ L4730
L1951 equ L3975
L1944 equ L3975
L1931 equ L3975
L1928 equ L4730
L1927 equ L5163
L1926 equ L4032
L1925 equ L5163
L1916 equ L5163
L1907 equ L5163
 align 8
L1904:
 dq 144115188075855874
 dq L6163
 dq L6164
L6164 equ null
L6163 equ L6095
L1901 equ L5163
L1896 equ L4730
L1895 equ L4715
 align 8
L1894:
 dq 144115188075855874
 dq L6165
 dq L6166
L6166 equ null
L6165 equ L6116
L1877 equ L4618
L1874 equ L4730
L1873 equ L4730
L1872 equ L4032
L1871 equ L4730
L1870 equ L4730
L1853 equ L4730
L1850 equ L5163
L1841 equ L4730
L1837 equ L5031
L1833 equ L4730
L1814 equ L4730
L1809 equ L3959
L1806 equ L6116
L1803 equ L6095
L1800 equ L5601
L1797 equ L4715
L1788 equ L4715
L1785 equ L3999
L1776 equ L3999
L1773 equ L3987
L1764 equ L3987
L1761 equ L3975
L1754 equ L3975
L1751 equ L4712
L1746 equ L4712
L1743 equ L4071
L1727 equ L4071
L1724 equ L4032
L1712 equ L4032
L1707 equ L4730
L1704 equ L4730
L1701 equ L4032
L1695 equ L5031
L1684 equ L4715
L1669 equ L3999
L1654 equ L3987
L1641 equ L3975
L1616 equ L4730
L1605 equ L4712
L1598 equ L3959
L1595 equ L6116
L1592 equ L6095
L1589 equ L5601
L1586 equ L4071
L1583 equ L4032
 align 8
L1578:
 dq 288230376151711745
 dq 97
 align 8
L1577:
 dq 288230376151711745
 dq 97
 align 8
L1559:
 dq 288230376151711745
 dq 191
 align 8
L1556:
 dq 288230376151711745
 dq 91
 align 8
L1534:
 dq 144115188075855874
 dq L6167
 dq L6168
 align 8
L6168:
 dq 144115188075855874
 dq L6169
 dq L6170
L6170 equ null
 align 8
L6169:
 dq 288230376151711745
 dq 95
 align 8
L6167:
 dq 288230376151711745
 dq 185
L1524 equ L5031
 align 8
L1514:
 dq 72057594037927937
 dq L6171
L1507 equ L4727
L1500 equ L4724
L1496 equ L5031
L1493 equ L5031
L1491 equ L5163
L1482 equ L5163
 align 8
L1477:
 dq 72057594037927937
 dq L6172
 align 8
L1463:
 dq 72057594037927937
 dq L6173
 align 8
L1460:
 dq 72057594037927937
 dq L6174
L1457 equ L5163
L1456 equ L5163
 align 8
L1451:
 dq 72057594037927937
 dq L6175
 align 8
L1442:
 dq 72057594037927937
 dq L6176
 align 8
L1439:
 dq 144115188075855874
 dq L6177
 dq L6178
 align 8
L6178:
 dq 144115188075855874
 dq L6179
 dq L6180
L6180 equ null
L6179 equ true
L6177 equ L5163
 align 8
L1434:
 dq 72057594037927937
 dq L6181
L1431 equ L5163
 align 8
L1426:
 dq 72057594037927937
 dq L6182
L1423 equ L5163
 align 8
L1418:
 dq 72057594037927937
 dq L6183
 align 8
L1415:
 dq 144115188075855874
 dq L6184
 dq L6185
L6185 equ null
 align 8
L6184:
 dq 72057594037927937
 dq L6186
 align 8
L1407:
 dq 72057594037927937
 dq L6187
L1403 equ L5031
L1401 equ L5163
 align 8
L1396:
 dq 72057594037927937
 dq L6188
L1385 equ L1460
L1384 equ L4496
L1383 equ L4485
 align 8
L1382:
 dq 144115188075855874
 dq L6189
 dq L6190
 align 8
L6190:
 dq 144115188075855874
 dq L6191
 dq L6192
 align 8
L6192:
 dq 144115188075855874
 dq L6193
 dq L6194
 align 8
L6194:
 dq 144115188075855874
 dq L6195
 dq L6196
 align 8
L6196:
 dq 144115188075855874
 dq L6197
 dq L6198
 align 8
L6198:
 dq 144115188075855874
 dq L6199
 dq L6200
 align 8
L6200:
 dq 144115188075855874
 dq L6201
 dq L6202
L6202 equ null
 align 8
L6201:
 dq 144115188075855874
 dq L6203
 dq L6204
 align 8
L6204:
 dq 144115188075855874
 dq L6205
 dq L6206
L6206 equ null
 align 8
L6205:
 dq 144115188075855874
 dq L6207
 dq L6208
 align 8
L6208:
 dq 144115188075855874
 dq L6209
 dq L6210
 align 8
L6210:
 dq 144115188075855874
 dq L6211
 dq L6212
L6212 equ null
L6211 equ L4394
 align 8
L6209:
 dq 72057594037927937
 dq L6213
L6207 equ L1460
 align 8
L6203:
 dq 144115188075855874
 dq L6214
 dq L6215
 align 8
L6215:
 dq 144115188075855874
 dq L6216
 dq L6217
 align 8
L6217:
 dq 144115188075855874
 dq L6218
 dq L6219
 align 8
L6219:
 dq 144115188075855874
 dq L6220
 dq L6221
L6221 equ null
L6220 equ L4394
L6218 equ L6209
 align 8
L6216:
 dq 144115188075855874
 dq L6222
 dq L6223
 align 8
L6223:
 dq 144115188075855874
 dq L6224
 dq L6225
 align 8
L6225:
 dq 144115188075855874
 dq L6226
 dq L6227
L6227 equ null
L6226 equ L4394
 align 8
L6224:
 dq 72057594037927937
 dq L6228
 align 8
L6222:
 dq 72057594037927937
 dq L6229
L6214 equ L1460
 align 8
L6199:
 dq 144115188075855874
 dq L6230
 dq L6231
 align 8
L6231:
 dq 144115188075855874
 dq L6232
 dq L6233
L6233 equ null
 align 8
L6232:
 dq 144115188075855874
 dq L6234
 dq L6235
 align 8
L6235:
 dq 144115188075855874
 dq L6236
 dq L6237
 align 8
L6237:
 dq 144115188075855874
 dq L6238
 dq L6239
L6239 equ null
 align 8
L6238:
 dq 144115188075855874
 dq L6240
 dq L6241
 align 8
L6241:
 dq 144115188075855874
 dq L6242
 dq L6243
 align 8
L6243:
 dq 144115188075855874
 dq L6244
 dq L6245
L6245 equ null
L6244 equ L4394
L6242 equ L6224
L6240 equ L1477
 align 8
L6236:
 dq 144115188075855874
 dq L6246
 dq L6247
 align 8
L6247:
 dq 144115188075855874
 dq L6248
 dq L6249
L6249 equ null
 align 8
L6248:
 dq 144115188075855874
 dq L6250
 dq L6251
 align 8
L6251:
 dq 144115188075855874
 dq L6252
 dq L6253
 align 8
L6253:
 dq 144115188075855874
 dq L6254
 dq L6255
L6255 equ null
L6254 equ L4394
L6252 equ L6209
L6250 equ L1460
 align 8
L6246:
 dq 72057594037927937
 dq L6256
L6234 equ L1460
 align 8
L6230:
 dq 144115188075855874
 dq L6257
 dq L6258
 align 8
L6258:
 dq 144115188075855874
 dq L6259
 dq L6260
 align 8
L6260:
 dq 144115188075855874
 dq L6261
 dq L6262
 align 8
L6262:
 dq 144115188075855874
 dq L6263
 dq L6264
L6264 equ null
L6263 equ L4394
L6261 equ L6209
 align 8
L6259:
 dq 144115188075855874
 dq L6265
 dq L6266
 align 8
L6266:
 dq 144115188075855874
 dq L6267
 dq L6268
 align 8
L6268:
 dq 144115188075855874
 dq L6269
 dq L6270
L6270 equ null
L6269 equ L4394
L6267 equ L6224
 align 8
L6265:
 dq 144115188075855874
 dq L6271
 dq L6272
 align 8
L6272:
 dq 144115188075855874
 dq L6273
 dq L6274
L6274 equ null
L6273 equ L6246
L6271 equ L1514
L6257 equ L1460
 align 8
L6197:
 dq 144115188075855874
 dq L6275
 dq L6276
 align 8
L6276:
 dq 144115188075855874
 dq L6277
 dq L6278
L6278 equ null
 align 8
L6277:
 dq 144115188075855874
 dq L6279
 dq L6280
 align 8
L6280:
 dq 144115188075855874
 dq L6281
 dq L6282
 align 8
L6282:
 dq 144115188075855874
 dq L6283
 dq L6284
L6284 equ null
 align 8
L6283:
 dq 144115188075855874
 dq L6285
 dq L6286
 align 8
L6286:
 dq 144115188075855874
 dq L6287
 dq L6288
L6288 equ null
 align 8
L6287:
 dq 144115188075855874
 dq L6289
 dq L6290
 align 8
L6290:
 dq 144115188075855874
 dq L6291
 dq L6292
 align 8
L6292:
 dq 144115188075855874
 dq L6293
 dq L6294
 align 8
L6294:
 dq 144115188075855874
 dq L6295
 dq L6296
L6296 equ null
L6295 equ L4394
L6293 equ L6209
 align 8
L6291:
 dq 144115188075855874
 dq L6297
 dq L6298
 align 8
L6298:
 dq 144115188075855874
 dq L6299
 dq L6300
 align 8
L6300:
 dq 144115188075855874
 dq L6301
 dq L6302
L6302 equ null
L6301 equ L4394
L6299 equ L6224
 align 8
L6297:
 dq 144115188075855874
 dq L6303
 dq L6304
 align 8
L6304:
 dq 144115188075855874
 dq L6305
 dq L6306
 align 8
L6306:
 dq 144115188075855874
 dq L6307
 dq L6308
L6308 equ null
L6307 equ L4394
 align 8
L6305:
 dq 72057594037927937
 dq L6309
L6303 equ L4727
L6289 equ L1460
L6285 equ L1477
 align 8
L6281:
 dq 144115188075855874
 dq L6310
 dq L6311
 align 8
L6311:
 dq 144115188075855874
 dq L6312
 dq L6313
L6313 equ null
 align 8
L6312:
 dq 144115188075855874
 dq L6314
 dq L6315
 align 8
L6315:
 dq 144115188075855874
 dq L6316
 dq L6317
 align 8
L6317:
 dq 144115188075855874
 dq L6318
 dq L6319
L6319 equ null
L6318 equ L4394
L6316 equ L6224
L6314 equ L5163
 align 8
L6310:
 dq 72057594037927937
 dq L6320
L6279 equ L1460
 align 8
L6275:
 dq 144115188075855874
 dq L6321
 dq L6322
 align 8
L6322:
 dq 144115188075855874
 dq L6323
 dq L6324
 align 8
L6324:
 dq 144115188075855874
 dq L6325
 dq L6326
 align 8
L6326:
 dq 144115188075855874
 dq L6327
 dq L6328
L6328 equ null
L6327 equ L4394
L6325 equ L6209
 align 8
L6323:
 dq 144115188075855874
 dq L6329
 dq L6330
 align 8
L6330:
 dq 144115188075855874
 dq L6331
 dq L6332
 align 8
L6332:
 dq 144115188075855874
 dq L6333
 dq L6334
L6334 equ null
L6333 equ L4394
L6331 equ L6224
 align 8
L6329:
 dq 144115188075855874
 dq L6335
 dq L6336
 align 8
L6336:
 dq 144115188075855874
 dq L6337
 dq L6338
 align 8
L6338:
 dq 144115188075855874
 dq L6339
 dq L6340
 align 8
L6340:
 dq 144115188075855874
 dq L6341
 dq L6342
L6342 equ null
L6341 equ L4394
L6339 equ L6305
L6337 equ L6310
L6335 equ L4727
L6321 equ L1460
 align 8
L6195:
 dq 144115188075855874
 dq L6343
 dq L6344
 align 8
L6344:
 dq 144115188075855874
 dq L6345
 dq L6346
L6346 equ null
 align 8
L6345:
 dq 144115188075855874
 dq L6347
 dq L6348
 align 8
L6348:
 dq 144115188075855874
 dq L6349
 dq L6350
 align 8
L6350:
 dq 144115188075855874
 dq L6351
 dq L6352
L6352 equ null
L6351 equ L4394
L6349 equ L6209
L6347 equ L1460
 align 8
L6343:
 dq 144115188075855874
 dq L6353
 dq L6354
 align 8
L6354:
 dq 144115188075855874
 dq L6355
 dq L6356
 align 8
L6356:
 dq 144115188075855874
 dq L6357
 dq L6358
 align 8
L6358:
 dq 144115188075855874
 dq L6359
 dq L6360
L6360 equ null
L6359 equ L4394
L6357 equ L6209
 align 8
L6355:
 dq 144115188075855874
 dq L6361
 dq L6362
 align 8
L6362:
 dq 144115188075855874
 dq L6363
 dq L6364
 align 8
L6364:
 dq 144115188075855874
 dq L6365
 dq L6366
L6366 equ null
L6365 equ L4394
L6363 equ L6224
 align 8
L6361:
 dq 144115188075855874
 dq L6367
 dq L6368
L6368 equ null
L6367 equ L4727
L6353 equ L1460
 align 8
L6193:
 dq 144115188075855874
 dq L6369
 dq L6370
 align 8
L6370:
 dq 144115188075855874
 dq L6371
 dq L6372
L6372 equ null
 align 8
L6371:
 dq 144115188075855874
 dq L6373
 dq L6374
 align 8
L6374:
 dq 144115188075855874
 dq L6375
 dq L6376
 align 8
L6376:
 dq 144115188075855874
 dq L6377
 dq L6378
 align 8
L6378:
 dq 144115188075855874
 dq L6379
 dq L6380
L6380 equ null
L6379 equ L4394
L6377 equ L6209
 align 8
L6375:
 dq 144115188075855874
 dq L6381
 dq L6382
 align 8
L6382:
 dq 144115188075855874
 dq L6383
 dq L6384
L6384 equ null
 align 8
L6383:
 dq 144115188075855874
 dq L6385
 dq L6386
 align 8
L6386:
 dq 144115188075855874
 dq L6387
 dq L6388
 align 8
L6388:
 dq 144115188075855874
 dq L6389
 dq L6390
 align 8
L6390:
 dq 144115188075855874
 dq L6391
 dq L6392
L6392 equ null
L6391 equ L4394
L6389 equ L6209
 align 8
L6387:
 dq 144115188075855874
 dq L6393
 dq L6394
 align 8
L6394:
 dq 144115188075855874
 dq L6395
 dq L6396
 align 8
L6396:
 dq 144115188075855874
 dq L6397
 dq L6398
L6398 equ null
L6397 equ L4394
L6395 equ L6224
 align 8
L6393:
 dq 144115188075855874
 dq L6399
 dq L6400
 align 8
L6400:
 dq 144115188075855874
 dq L6401
 dq L6402
 align 8
L6402:
 dq 144115188075855874
 dq L6403
 dq L6404
L6404 equ null
L6403 equ L4394
L6401 equ L6305
L6399 equ L4724
L6385 equ L1460
L6381 equ L6310
L6373 equ L1460
 align 8
L6369:
 dq 144115188075855874
 dq L6405
 dq L6406
 align 8
L6406:
 dq 144115188075855874
 dq L6407
 dq L6408
 align 8
L6408:
 dq 144115188075855874
 dq L6409
 dq L6410
 align 8
L6410:
 dq 144115188075855874
 dq L6411
 dq L6412
L6412 equ null
L6411 equ L4394
L6409 equ L6209
 align 8
L6407:
 dq 144115188075855874
 dq L6413
 dq L6414
 align 8
L6414:
 dq 144115188075855874
 dq L6415
 dq L6416
 align 8
L6416:
 dq 144115188075855874
 dq L6417
 dq L6418
L6418 equ null
L6417 equ L4394
L6415 equ L6224
 align 8
L6413:
 dq 144115188075855874
 dq L6419
 dq L6420
 align 8
L6420:
 dq 144115188075855874
 dq L6421
 dq L6422
 align 8
L6422:
 dq 144115188075855874
 dq L6423
 dq L6424
 align 8
L6424:
 dq 144115188075855874
 dq L6425
 dq L6426
L6426 equ null
L6425 equ L4394
L6423 equ L6305
L6421 equ L6310
L6419 equ L4724
L6405 equ L1460
 align 8
L6191:
 dq 144115188075855874
 dq L6427
 dq L6428
 align 8
L6428:
 dq 144115188075855874
 dq L6429
 dq L6430
L6430 equ null
 align 8
L6429:
 dq 144115188075855874
 dq L6431
 dq L6432
 align 8
L6432:
 dq 144115188075855874
 dq L6433
 dq L6434
 align 8
L6434:
 dq 144115188075855874
 dq L6435
 dq L6436
L6436 equ null
L6435 equ L4394
L6433 equ L6224
L6431 equ L5163
 align 8
L6427:
 dq 144115188075855874
 dq L6437
 dq L6438
 align 8
L6438:
 dq 144115188075855874
 dq L6439
 dq L6440
 align 8
L6440:
 dq 144115188075855874
 dq L6441
 dq L6442
 align 8
L6442:
 dq 144115188075855874
 dq L6443
 dq L6444
L6444 equ null
L6443 equ L4394
L6441 equ L6209
 align 8
L6439:
 dq 144115188075855874
 dq L6445
 dq L6446
 align 8
L6446:
 dq 144115188075855874
 dq L6447
 dq L6448
 align 8
L6448:
 dq 144115188075855874
 dq L6449
 dq L6450
L6450 equ null
L6449 equ L4394
L6447 equ L6224
 align 8
L6445:
 dq 144115188075855874
 dq L6451
 dq L6452
L6452 equ null
L6451 equ L4724
L6437 equ L1460
 align 8
L6189:
 dq 144115188075855874
 dq L6453
 dq L6454
 align 8
L6454:
 dq 144115188075855874
 dq L6455
 dq L6456
L6456 equ null
 align 8
L6455:
 dq 144115188075855874
 dq L6457
 dq L6458
 align 8
L6458:
 dq 144115188075855874
 dq L6459
 dq L6460
 align 8
L6460:
 dq 144115188075855874
 dq L6461
 dq L6462
L6462 equ null
L6461 equ L4394
L6459 equ L6224
L6457 equ L5163
 align 8
L6453:
 dq 144115188075855874
 dq L6463
 dq L6464
 align 8
L6464:
 dq 144115188075855874
 dq L6465
 dq L6466
L6466 equ null
 align 8
L6465:
 dq 144115188075855874
 dq L6467
 dq L6468
 align 8
L6468:
 dq 144115188075855874
 dq L6469
 dq L6470
 align 8
L6470:
 dq 144115188075855874
 dq L6471
 dq L6472
L6472 equ null
L6471 equ L4394
L6469 equ L6224
L6467 equ L1477
L6463 equ L1460
 align 8
L1381:
 dq 144115188075855874
 dq L6473
 dq L6474
L6474 equ null
 align 8
L6473:
 dq 144115188075855874
 dq L6475
 dq L6476
 align 8
L6476:
 dq 144115188075855874
 dq L6477
 dq L6478
 align 8
L6478:
 dq 144115188075855874
 dq L6479
 dq L6480
L6480 equ null
L6479 equ L4394
L6477 equ L6224
L6475 equ L5163
L1380 equ L1460
L1379 equ L6209
 align 8
L1378:
 dq 144115188075855874
 dq L6481
 dq L6482
 align 8
L6482:
 dq 144115188075855874
 dq L6483
 dq L6484
L6484 equ null
L6483 equ L4394
L6481 equ L6224
 align 8
L1377:
 dq 144115188075855874
 dq L6485
 dq L6486
 align 8
L6486:
 dq 144115188075855874
 dq L6487
 dq L6488
L6488 equ null
 align 8
L6487:
 dq 144115188075855874
 dq L6489
 dq L6490
 align 8
L6490:
 dq 144115188075855874
 dq L6491
 dq L6492
 align 8
L6492:
 dq 144115188075855874
 dq L6493
 dq L6494
L6494 equ null
 align 8
L6491:
 dq 144115188075855874
 dq L6495
 dq L6496
 align 8
L6496:
 dq 144115188075855874
 dq L6497
 dq L6498
L6498 equ null
L6497 equ L1460
L6495 equ L5601
L6489 equ L1442
 align 8
L6485:
 dq 144115188075855874
 dq L6499
 dq L6500
L6500 equ null
L6499 equ L1460
L1376 equ L4724
L1375 equ L4727
L1374 equ L1514
L1373 equ L1477
 align 8
L1367:
 dq 72057594037927937
 dq L6501
 align 8
L1364:
 dq 72057594037927937
 dq L6502
L1359 equ L1367
L1356 equ L1364
L1352 equ L5031
 align 8
L1351:
 dq 72057594037927937
 dq L6503
L1342 equ L5601
L1333 equ L3649
L1329 equ L5031
L1322 equ L3649
L1313 equ L3640
L1302 equ L3629
L1293 equ L3620
 align 8
L1288:
 dq 144115188075855874
 dq L6504
 dq L6505
L6505 equ null
L6504 equ L6116
 align 8
L1285:
 dq 144115188075855874
 dq L6506
 dq L6507
L6507 equ null
L6506 equ L6095
L1278 equ L5601
L1272 equ L5031
L1258 equ L5031
L1244 equ L5031
L1224 equ L5031
L1214 equ L5031
L1194 equ L5031
L1186 equ L5031
L1174 equ L3319
L1165 equ L5601
L1156 equ L3620
L1151 equ L6116
L1148 equ L6095
L1135 equ L3999
L1124 equ L3987
L1115 equ L3975
L1104 equ L2604
L1095 equ L3629
L1086 equ L2611
L1077 equ L5601
L1068 equ L3959
L1055 equ L4712
L1044 equ L2582
L1035 equ L3649
L1026 equ L3640
L1015 equ L2457
L1006 equ L2743
L987 equ L4730
L978 equ L3759
L974 equ L5031
L967 equ L3649
L963 equ L5031
 align 8
L962:
 dq 144115188075855874
 dq L6508
 dq L6509
 align 8
L6509:
 dq 144115188075855874
 dq L6510
 dq L6511
L6511 equ null
L6508 equ L1451
L961 equ L1396
L960 equ L1426
 align 8
L957:
 dq 72057594037927937
 dq L6512
 align 8
L949:
 dq 72057594037927937
 dq L6513
 align 8
L948:
 dq 72057594037927937
 dq L6514
 align 8
L946:
 dq 288230376151711745
 dq 21
 align 8
L943:
 dq 72057594037927937
 dq L6515
 align 8
L940:
 dq 72057594037927937
 dq L6516
 align 8
L937:
 dq 72057594037927937
 dq L6517
 align 8
L929:
 dq 72057594037927937
 dq L6518
 align 8
L928:
 dq 72057594037927937
 dq L6519
 align 8
L927:
 dq 72057594037927937
 dq L6520
 align 8
L926:
 dq 72057594037927937
 dq L6521
 align 8
L923:
 dq 72057594037927937
 dq L6522
 align 8
L919:
 dq 72057594037927937
 dq L6523
 align 8
L918:
 dq 72057594037927937
 dq L6524
 align 8
L915:
 dq 72057594037927937
 dq L6525
L912 equ L1396
L903 equ L5163
 align 8
L900:
 dq 72057594037927937
 dq L6526
 align 8
L899:
 dq 144115188075855874
 dq L6527
 dq L6528
 align 8
L6528:
 dq 144115188075855874
 dq L6529
 dq L6530
L6530 equ null
 align 8
L898:
 dq 144115188075855874
 dq L6531
 dq L6532
L6532 equ null
 align 8
L893:
 dq 72057594037927937
 dq L6533
 align 8
L892:
 dq 72057594037927937
 dq L6534
 align 8
L891:
 dq 288230376151711745
 dq 21
L879 equ L5031
 align 8
L870:
 dq 72057594037927937
 dq L6535
 align 8
L867:
 dq 72057594037927937
 dq L6536
 align 8
L864:
 dq 72057594037927937
 dq L6537
 align 8
L861:
 dq 72057594037927937
 dq L6538
 align 8
L858:
 dq 72057594037927937
 dq L6539
 align 8
L855:
 dq 72057594037927937
 dq L6540
 align 8
L852:
 dq 72057594037927937
 dq L6541
 align 8
L849:
 dq 72057594037927937
 dq L6542
 align 8
L846:
 dq 72057594037927937
 dq L6543
 align 8
L843:
 dq 72057594037927937
 dq L6544
 align 8
L840:
 dq 72057594037927937
 dq L6545
 align 8
L837:
 dq 72057594037927937
 dq L6546
 align 8
L834:
 dq 72057594037927937
 dq L6547
 align 8
L831:
 dq 72057594037927937
 dq L6548
 align 8
L828:
 dq 72057594037927937
 dq L6549
L826 equ L5031
L819 equ L864
L804 equ L5031
L792 equ L3319
L773 equ L5601
L764 equ L3620
L758 equ L6116
L755 equ L6095
L726 equ L5601
L715 equ L5601
L708 equ L3999
L691 equ L5601
L680 equ L5601
L673 equ L3987
L656 equ L5601
L649 equ L3975
L645 equ L5031
L630 equ L2604
L621 equ L3629
L611 equ L2611
L602 equ L5601
L593 equ L3959
L589 equ L5031
L562 equ L4712
L558 equ L5031
L523 equ L3987
L516 equ L4712
L503 equ L2582
L492 equ L3649
L483 equ L3640
L466 equ L2457
L457 equ L2743
L438 equ L4730
L427 equ L3759
L412 equ L5031
L373 equ L3759
L365 equ L2743
L360 equ L2743
L357 equ L2743
L333 equ L861
L330 equ L834
L329 equ L837
L326 equ L867
L324 equ L5031
L323 equ L831
L322 equ L840
L286 equ L5031
 align 8
L280:
 dq 288230376151711745
 dq 91
 align 8
L275:
 dq 144115188075855874
 dq L6550
 dq L6551
 align 8
L6551:
 dq 144115188075855874
 dq L6552
 dq L6553
 align 8
L6553:
 dq 144115188075855874
 dq L6554
 dq L6555
L6555 equ null
L273 equ L5031
L265 equ L892
L252 equ L893
L243 equ L929
L219 equ L5031
L218 equ L870
 align 8
L211:
 dq 288230376151711745
 dq 89
L179 equ L870
 align 8
L96:
 dq 72057594037927937
 dq L6556
 align 8
L95:
 dq 72057594037927937
 dq L6557
 align 8
L94:
 dq 72057594037927937
 dq L6558
 align 8
L91:
 dq 72057594037927937
 dq L6559
 align 8
L90:
 dq 72057594037927937
 dq L6560
 align 8
L87:
 dq 72057594037927937
 dq L6561
 align 8
L85:
 dq 72057594037927937
 dq L6562
 align 8
L82:
 dq 72057594037927937
 dq L6563
 align 8
L81:
 dq 72057594037927937
 dq L6564
 align 8
L78:
 dq 72057594037927937
 dq L6565
L77 equ L78
L74 equ L81
L73 equ L82
L70 equ L85
L69 equ L96
 align 8
L66:
 dq 72057594037927937
 dq L6566
L65 equ L94
 align 8
L62:
 dq 72057594037927937
 dq L6567
L61 equ L62
L58 equ L91
L57 equ L66
L54 equ L95
L53 equ L90
 align 8
L50:
 dq 72057594037927937
 dq L6568
L49 equ L50
L46 equ L87
 align 8
L42:
 dq 72057594037927937
 dq L6569
 align 8
L41:
 dq 72057594037927937
 dq L6570
L40 equ L1351
 align 8
L39:
 dq 72057594037927937
 dq L6571
 align 8
L38:
 dq 72057594037927937
 dq L6572
 align 8
L37:
 dq 72057594037927937
 dq L6573
 align 8
L36:
 dq 72057594037927937
 dq L6574
 align 8
L35:
 dq 72057594037927937
 dq L6575
 align 8
L34:
 dq 144115188075855874
 dq L6576
 dq L6577
 align 8
L6577:
 dq 144115188075855874
 dq L6578
 dq L6579
 align 8
L6579:
 dq 144115188075855874
 dq L6580
 dq L6581
 align 8
L6581:
 dq 144115188075855874
 dq L6582
 dq L6583
 align 8
L6583:
 dq 144115188075855874
 dq L6584
 dq L6585
 align 8
L6585:
 dq 144115188075855874
 dq L6586
 dq L6587
 align 8
L6587:
 dq 144115188075855874
 dq L6588
 dq L6589
 align 8
L6589:
 dq 144115188075855874
 dq L6590
 dq L6591
 align 8
L6591:
 dq 144115188075855874
 dq L6592
 dq L6593
L6593 equ null
 align 8
L6592:
 dq 72057594037927937
 dq L6594
 align 8
L6590:
 dq 72057594037927937
 dq L6595
 align 8
L6588:
 dq 72057594037927937
 dq L6596
 align 8
L6586:
 dq 72057594037927937
 dq L6597
 align 8
L6584:
 dq 72057594037927937
 dq L6598
 align 8
L6582:
 dq 72057594037927937
 dq L6599
 align 8
L6580:
 dq 72057594037927937
 dq L6600
 align 8
L6578:
 dq 72057594037927937
 dq L6601
L6576 equ L39
 align 8
L33:
 dq 144115188075855874
 dq L6602
 dq L6603
 align 8
L6603:
 dq 144115188075855874
 dq L6604
 dq L6605
 align 8
L6605:
 dq 144115188075855874
 dq L6606
 dq L6607
L6607 equ null
 align 8
L6606:
 dq 72057594037927937
 dq L6608
L6604 equ L41
L6602 equ L37
 align 8
L32:
 dq 144115188075855874
 dq L6609
 dq L6610
L6610 equ (4611686018427387903 << 1) | 1
L6609 equ (-4611686018427387904 << 1) | 1
 align 8
L31:
 dq 72057594037927937
 dq L6611
 align 8
L30:
 dq 144115188075855874
 dq L6612
 dq L6613
 align 8
L6613:
 dq 144115188075855874
 dq L6614
 dq L6615
 align 8
L6615:
 dq 144115188075855874
 dq L6616
 dq L6617
 align 8
L6617:
 dq 144115188075855874
 dq L6618
 dq L6619
 align 8
L6619:
 dq 144115188075855874
 dq L6620
 dq L6621
L6621 equ null
 align 8
L6620:
 dq 72057594037927937
 dq L6622
 align 8
L6618:
 dq 72057594037927937
 dq L6623
 align 8
L6616:
 dq 72057594037927937
 dq L6624
 align 8
L6614:
 dq 72057594037927937
 dq L6625
 align 8
L6612:
 dq 72057594037927937
 dq L6626
 align 8
L29:
 dq 144115188075855874
 dq L6627
 dq L6628
L6628 equ null
 align 8
L28:
 dq 144115188075855874
 dq L6629
 dq L6630
 align 8
L6630:
 dq 144115188075855874
 dq L6631
 dq L6632
L6632 equ null
 align 8
L6631:
 dq 144115188075855874
 dq L6633
 dq L6634
 align 8
L6634:
 dq 144115188075855874
 dq L6635
 dq L6636
 align 8
L6636:
 dq 144115188075855874
 dq L6637
 dq L6638
 align 8
L6638:
 dq 144115188075855874
 dq L6639
 dq L6640
 align 8
L6640:
 dq 144115188075855874
 dq L6641
 dq L6642
 align 8
L6642:
 dq 144115188075855874
 dq L6643
 dq L6644
L6644 equ null
 align 8
L6643:
 dq 144115188075855874
 dq L6645
 dq L6646
 align 8
L6646:
 dq 144115188075855874
 dq L6647
 dq L6648
 align 8
L6648:
 dq 144115188075855874
 dq L6649
 dq L6650
 align 8
L6650:
 dq 144115188075855874
 dq L6651
 dq L6652
L6652 equ null
 align 8
L6651:
 dq 144115188075855874
 dq L6653
 dq L6654
 align 8
L6654:
 dq 144115188075855874
 dq L6655
 dq L6656
 align 8
L6656:
 dq 144115188075855874
 dq L6657
 dq L6658
 align 8
L6658:
 dq 144115188075855874
 dq L6659
 dq L6660
 align 8
L6660:
 dq 144115188075855874
 dq L6661
 dq L6662
L6662 equ null
 align 8
L6661:
 dq 144115188075855874
 dq L6663
 dq L6664
 align 8
L6664:
 dq 144115188075855874
 dq L6665
 dq L6666
 align 8
L6666:
 dq 144115188075855874
 dq L6667
 dq L6668
L6668 equ null
 align 8
L6667:
 dq 144115188075855874
 dq L6669
 dq L6670
 align 8
L6670:
 dq 144115188075855874
 dq L6671
 dq L6672
 align 8
L6672:
 dq 144115188075855874
 dq L6673
 dq L6674
 align 8
L6674:
 dq 144115188075855874
 dq L6675
 dq L6676
 align 8
L6676:
 dq 144115188075855874
 dq L6677
 dq L6678
 align 8
L6678:
 dq 144115188075855874
 dq L6679
 dq L6680
 align 8
L6680:
 dq 144115188075855874
 dq L6681
 dq L6682
 align 8
L6682:
 dq 144115188075855874
 dq L6683
 dq L6684
 align 8
L6684:
 dq 144115188075855874
 dq L6685
 dq L6686
 align 8
L6686:
 dq 144115188075855874
 dq L6687
 dq L6688
 align 8
L6688:
 dq 144115188075855874
 dq L6689
 dq L6690
 align 8
L6690:
 dq 144115188075855874
 dq L6691
 dq L6692
 align 8
L6692:
 dq 144115188075855874
 dq L6693
 dq L6694
L6694 equ null
 align 8
L6693:
 dq 144115188075855874
 dq L6695
 dq L6696
 align 8
L6696:
 dq 144115188075855874
 dq L6697
 dq L6698
 align 8
L6698:
 dq 144115188075855874
 dq L6699
 dq L6700
L6700 equ null
 align 8
L6699:
 dq 144115188075855874
 dq L6701
 dq L6702
 align 8
L6702:
 dq 144115188075855874
 dq L6703
 dq L6704
L6704 equ null
 align 8
L6703:
 dq 144115188075855874
 dq L6705
 dq L6706
 align 8
L6706:
 dq 144115188075855874
 dq L6707
 dq L6708
 align 8
L6708:
 dq 144115188075855874
 dq L6709
 dq L6710
L6710 equ null
 align 8
L6709:
 dq 144115188075855874
 dq L6711
 dq L6712
 align 8
L6712:
 dq 144115188075855874
 dq L6713
 dq L6714
 align 8
L6714:
 dq 144115188075855874
 dq L6715
 dq L6716
 align 8
L6716:
 dq 144115188075855874
 dq L6717
 dq L6718
L6718 equ null
 align 8
L6717:
 dq 72057594037927937
 dq L6719
L6715 equ null
L6713 equ L6717
 align 8
L6711:
 dq 72057594037927937
 dq L6720
L6707 equ null
L6705 equ L4730
 align 8
L6701:
 dq 144115188075855874
 dq L6721
 dq L6722
 align 8
L6722:
 dq 144115188075855874
 dq L6723
 dq L6724
L6724 equ null
L6723 equ L6717
 align 8
L6721:
 dq 72057594037927937
 dq L6725
L6697 equ null
L6695 equ L4485
 align 8
L6691:
 dq 144115188075855874
 dq L6726
 dq L6727
 align 8
L6727:
 dq 144115188075855874
 dq L6728
 dq L6729
 align 8
L6729:
 dq 144115188075855874
 dq L6730
 dq L6731
L6731 equ null
 align 8
L6730:
 dq 144115188075855874
 dq L6732
 dq L6733
 align 8
L6733:
 dq 144115188075855874
 dq L6734
 dq L6735
 align 8
L6735:
 dq 144115188075855874
 dq L6736
 dq L6737
 align 8
L6737:
 dq 144115188075855874
 dq L6738
 dq L6739
 align 8
L6739:
 dq 144115188075855874
 dq L6740
 dq L6741
 align 8
L6741:
 dq 144115188075855874
 dq L6742
 dq L6743
 align 8
L6743:
 dq 144115188075855874
 dq L6744
 dq L6745
 align 8
L6745:
 dq 144115188075855874
 dq L6746
 dq L6747
 align 8
L6747:
 dq 144115188075855874
 dq L6748
 dq L6749
 align 8
L6749:
 dq 144115188075855874
 dq L6750
 dq L6751
 align 8
L6751:
 dq 144115188075855874
 dq L6752
 dq L6753
L6753 equ null
 align 8
L6752:
 dq 144115188075855874
 dq L6754
 dq L6755
 align 8
L6755:
 dq 144115188075855874
 dq L6756
 dq L6757
L6757 equ null
 align 8
L6756:
 dq 144115188075855874
 dq L6758
 dq L6759
 align 8
L6759:
 dq 144115188075855874
 dq L6760
 dq L6761
L6761 equ null
 align 8
L6760:
 dq 144115188075855874
 dq L6762
 dq L6763
 align 8
L6763:
 dq 144115188075855874
 dq L6764
 dq L6765
L6765 equ null
 align 8
L6764:
 dq 144115188075855874
 dq L6766
 dq L6767
 align 8
L6767:
 dq 144115188075855874
 dq L6768
 dq L6769
 align 8
L6769:
 dq 144115188075855874
 dq L6770
 dq L6771
L6771 equ null
 align 8
L6770:
 dq 72057594037927937
 dq L6772
 align 8
L6768:
 dq 72057594037927937
 dq L6773
 align 8
L6766:
 dq 72057594037927937
 dq L6774
 align 8
L6762:
 dq 72057594037927937
 dq L6775
 align 8
L6758:
 dq 72057594037927937
 dq L6776
 align 8
L6754:
 dq 144115188075855874
 dq L6777
 dq L6778
 align 8
L6778:
 dq 144115188075855874
 dq L6779
 dq L6780
 align 8
L6780:
 dq 144115188075855874
 dq L6781
 dq L6782
L6782 equ null
L6781 equ L6768
 align 8
L6779:
 dq 144115188075855874
 dq L6783
 dq L6784
 align 8
L6784:
 dq 144115188075855874
 dq L6785
 dq L6786
L6786 equ null
L6785 equ L6770
L6783 equ L6762
L6777 equ L6721
 align 8
L6750:
 dq 144115188075855874
 dq L6787
 dq L6788
 align 8
L6788:
 dq 144115188075855874
 dq L6789
 dq L6790
L6790 equ null
 align 8
L6789:
 dq 144115188075855874
 dq L6791
 dq L6792
 align 8
L6792:
 dq 144115188075855874
 dq L6793
 dq L6794
L6794 equ null
 align 8
L6793:
 dq 144115188075855874
 dq L6795
 dq L6796
 align 8
L6796:
 dq 144115188075855874
 dq L6797
 dq L6798
L6798 equ null
 align 8
L6797:
 dq 144115188075855874
 dq L6799
 dq L6800
 align 8
L6800:
 dq 144115188075855874
 dq L6801
 dq L6802
 align 8
L6802:
 dq 144115188075855874
 dq L6803
 dq L6804
L6804 equ null
L6803 equ L6770
L6801 equ L6768
 align 8
L6799:
 dq 72057594037927937
 dq L6805
L6795 equ L6762
L6791 equ L6758
 align 8
L6787:
 dq 144115188075855874
 dq L6806
 dq L6807
 align 8
L6807:
 dq 144115188075855874
 dq L6808
 dq L6809
 align 8
L6809:
 dq 144115188075855874
 dq L6810
 dq L6811
L6811 equ null
 align 8
L6810:
 dq 144115188075855874
 dq L6812
 dq L6813
 align 8
L6813:
 dq 144115188075855874
 dq L6814
 dq L6815
L6815 equ null
L6814 equ L6768
 align 8
L6812:
 dq 72057594037927937
 dq L6816
 align 8
L6808:
 dq 144115188075855874
 dq L6817
 dq L6818
 align 8
L6818:
 dq 144115188075855874
 dq L6819
 dq L6820
L6820 equ null
L6819 equ L6770
L6817 equ L6762
L6806 equ L6721
 align 8
L6748:
 dq 144115188075855874
 dq L6821
 dq L6822
 align 8
L6822:
 dq 144115188075855874
 dq L6823
 dq L6824
L6824 equ null
 align 8
L6823:
 dq 144115188075855874
 dq L6825
 dq L6826
 align 8
L6826:
 dq 144115188075855874
 dq L6827
 dq L6828
L6828 equ null
 align 8
L6827:
 dq 144115188075855874
 dq L6829
 dq L6830
 align 8
L6830:
 dq 144115188075855874
 dq L6831
 dq L6832
L6832 equ null
 align 8
L6831:
 dq 144115188075855874
 dq L6833
 dq L6834
 align 8
L6834:
 dq 144115188075855874
 dq L6835
 dq L6836
 align 8
L6836:
 dq 144115188075855874
 dq L6837
 dq L6838
L6838 equ null
 align 8
L6837:
 dq 144115188075855874
 dq L6839
 dq L6840
 align 8
L6840:
 dq 144115188075855874
 dq L6841
 dq L6842
 align 8
L6842:
 dq 144115188075855874
 dq L6843
 dq L6844
L6844 equ null
L6843 equ L4394
L6841 equ L6770
L6839 equ L6812
L6835 equ L6768
L6833 equ L6766
L6829 equ L6762
L6825 equ L6758
 align 8
L6821:
 dq 144115188075855874
 dq L6845
 dq L6846
 align 8
L6846:
 dq 144115188075855874
 dq L6847
 dq L6848
 align 8
L6848:
 dq 144115188075855874
 dq L6849
 dq L6850
L6850 equ null
L6849 equ L6768
 align 8
L6847:
 dq 144115188075855874
 dq L6851
 dq L6852
 align 8
L6852:
 dq 144115188075855874
 dq L6853
 dq L6854
 align 8
L6854:
 dq 144115188075855874
 dq L6855
 dq L6856
L6856 equ null
L6855 equ L4394
L6853 equ L6770
 align 8
L6851:
 dq 72057594037927937
 dq L6857
L6845 equ L6721
 align 8
L6746:
 dq 144115188075855874
 dq L6858
 dq L6859
 align 8
L6859:
 dq 144115188075855874
 dq L6860
 dq L6861
L6861 equ null
 align 8
L6860:
 dq 144115188075855874
 dq L6862
 dq L6863
 align 8
L6863:
 dq 144115188075855874
 dq L6864
 dq L6865
L6865 equ null
 align 8
L6864:
 dq 144115188075855874
 dq L6866
 dq L6867
 align 8
L6867:
 dq 144115188075855874
 dq L6868
 dq L6869
 align 8
L6869:
 dq 144115188075855874
 dq L6870
 dq L6871
 align 8
L6871:
 dq 144115188075855874
 dq L6872
 dq L6873
L6873 equ null
L6872 equ L4394
L6870 equ L6770
L6868 equ L6768
L6866 equ L6851
L6862 equ L6758
 align 8
L6858:
 dq 144115188075855874
 dq L6874
 dq L6875
 align 8
L6875:
 dq 144115188075855874
 dq L6876
 dq L6877
 align 8
L6877:
 dq 144115188075855874
 dq L6878
 dq L6879
L6879 equ null
 align 8
L6878:
 dq 144115188075855874
 dq L6880
 dq L6881
 align 8
L6881:
 dq 144115188075855874
 dq L6882
 dq L6883
L6883 equ null
L6882 equ L6768
L6880 equ L6812
 align 8
L6876:
 dq 144115188075855874
 dq L6884
 dq L6885
 align 8
L6885:
 dq 144115188075855874
 dq L6886
 dq L6887
 align 8
L6887:
 dq 144115188075855874
 dq L6888
 dq L6889
L6889 equ null
L6888 equ L4394
L6886 equ L6770
L6884 equ L6851
L6874 equ L6721
 align 8
L6744:
 dq 144115188075855874
 dq L6890
 dq L6891
 align 8
L6891:
 dq 144115188075855874
 dq L6892
 dq L6893
L6893 equ null
 align 8
L6892:
 dq 144115188075855874
 dq L6894
 dq L6895
 align 8
L6895:
 dq 144115188075855874
 dq L6896
 dq L6897
 align 8
L6897:
 dq 144115188075855874
 dq L6898
 dq L6899
L6899 equ null
 align 8
L6898:
 dq 144115188075855874
 dq L6900
 dq L6901
 align 8
L6901:
 dq 144115188075855874
 dq L6902
 dq L6903
L6903 equ null
 align 8
L6902:
 dq 144115188075855874
 dq L6904
 dq L6905
 align 8
L6905:
 dq 144115188075855874
 dq L6906
 dq L6907
L6907 equ null
L6906 equ L6768
L6904 equ L5601
L6900 equ L6812
L6896 equ L6770
 align 8
L6894:
 dq 72057594037927937
 dq L6908
 align 8
L6890:
 dq 144115188075855874
 dq L6909
 dq L6910
 align 8
L6910:
 dq 144115188075855874
 dq L6911
 dq L6912
 align 8
L6912:
 dq 144115188075855874
 dq L6913
 dq L6914
L6914 equ null
 align 8
L6913:
 dq 144115188075855874
 dq L6915
 dq L6916
 align 8
L6916:
 dq 144115188075855874
 dq L6917
 dq L6918
L6918 equ null
 align 8
L6917:
 dq 144115188075855874
 dq L6919
 dq L6920
L6920 equ null
L6919 equ L6768
L6915 equ L5601
L6911 equ L6770
L6909 equ L6721
 align 8
L6742:
 dq 144115188075855874
 dq L6921
 dq L6922
 align 8
L6922:
 dq 144115188075855874
 dq L6923
 dq L6924
L6924 equ null
 align 8
L6923:
 dq 144115188075855874
 dq L6925
 dq L6926
 align 8
L6926:
 dq 144115188075855874
 dq L6927
 dq L6928
L6928 equ null
 align 8
L6927:
 dq 144115188075855874
 dq L6929
 dq L6930
 align 8
L6930:
 dq 144115188075855874
 dq L6931
 dq L6932
L6932 equ null
 align 8
L6931:
 dq 144115188075855874
 dq L6933
 dq L6934
 align 8
L6934:
 dq 144115188075855874
 dq L6935
 dq L6936
 align 8
L6936:
 dq 144115188075855874
 dq L6937
 dq L6938
L6938 equ null
 align 8
L6937:
 dq 144115188075855874
 dq L6939
 dq L6940
 align 8
L6940:
 dq 144115188075855874
 dq L6941
 dq L6942
L6942 equ null
 align 8
L6941:
 dq 144115188075855874
 dq L6943
 dq L6944
 align 8
L6944:
 dq 144115188075855874
 dq L6945
 dq L6946
L6946 equ null
L6945 equ L4394
L6943 equ L6770
L6939 equ L5601
L6935 equ L6768
L6933 equ L6766
L6929 equ L6762
L6925 equ L6758
 align 8
L6921:
 dq 144115188075855874
 dq L6947
 dq L6948
 align 8
L6948:
 dq 144115188075855874
 dq L6949
 dq L6950
 align 8
L6950:
 dq 144115188075855874
 dq L6951
 dq L6952
L6952 equ null
L6951 equ L6768
 align 8
L6949:
 dq 144115188075855874
 dq L6953
 dq L6954
 align 8
L6954:
 dq 144115188075855874
 dq L6955
 dq L6956
L6956 equ null
 align 8
L6955:
 dq 216172782113783810
 dq L6957
 dq L6958
L6958 equ L4394
L6957 equ L6770
L6953 equ L5601
L6947 equ L6721
 align 8
L6740:
 dq 144115188075855874
 dq L6959
 dq L6960
 align 8
L6960:
 dq 144115188075855874
 dq L6961
 dq L6962
L6962 equ null
 align 8
L6961:
 dq 144115188075855874
 dq L6963
 dq L6964
 align 8
L6964:
 dq 144115188075855874
 dq L6965
 dq L6966
L6966 equ null
 align 8
L6965:
 dq 144115188075855874
 dq L6967
 dq L6968
 align 8
L6968:
 dq 144115188075855874
 dq L6969
 dq L6970
L6970 equ null
L6969 equ L6768
L6967 equ L6762
L6963 equ L6758
 align 8
L6959:
 dq 144115188075855874
 dq L6971
 dq L6972
 align 8
L6972:
 dq 144115188075855874
 dq L6973
 dq L6974
 align 8
L6974:
 dq 144115188075855874
 dq L6975
 dq L6976
L6976 equ null
L6975 equ L6768
 align 8
L6973:
 dq 144115188075855874
 dq L6977
 dq L6978
 align 8
L6978:
 dq 144115188075855874
 dq L6979
 dq L6980
L6980 equ null
 align 8
L6979:
 dq 216172782113783808
L6977 equ L5601
L6971 equ L6721
 align 8
L6738:
 dq 144115188075855874
 dq L6981
 dq L6982
 align 8
L6982:
 dq 144115188075855874
 dq L6983
 dq L6984
L6984 equ null
 align 8
L6983:
 dq 144115188075855874
 dq L6985
 dq L6986
 align 8
L6986:
 dq 144115188075855874
 dq L6987
 dq L6988
L6988 equ null
 align 8
L6987:
 dq 144115188075855874
 dq L6989
 dq L6990
 align 8
L6990:
 dq 144115188075855874
 dq L6991
 dq L6992
 align 8
L6992:
 dq 144115188075855874
 dq L6993
 dq L6994
 align 8
L6994:
 dq 144115188075855874
 dq L6995
 dq L6996
L6996 equ null
L6995 equ L4394
 align 8
L6993:
 dq 144115188075855874
 dq L6997
 dq L6998
 align 8
L6998:
 dq 144115188075855874
 dq L6999
 dq L7000
L7000 equ null
L6999 equ L6770
L6997 equ L5601
L6991 equ L6768
L6989 equ L6851
L6985 equ L6758
 align 8
L6981:
 dq 144115188075855874
 dq L7001
 dq L7002
 align 8
L7002:
 dq 144115188075855874
 dq L7003
 dq L7004
 align 8
L7004:
 dq 144115188075855874
 dq L7005
 dq L7006
L7006 equ null
 align 8
L7005:
 dq 144115188075855874
 dq L7007
 dq L7008
 align 8
L7008:
 dq 144115188075855874
 dq L7009
 dq L7010
L7010 equ null
L7009 equ L6768
L7007 equ L6812
 align 8
L7003:
 dq 144115188075855874
 dq L7011
 dq L7012
 align 8
L7012:
 dq 144115188075855874
 dq L7013
 dq L7014
L7014 equ null
 align 8
L7013:
 dq 216172782113783810
 dq L7015
 dq L7016
L7016 equ L4394
L7015 equ L6770
L7011 equ L5601
L7001 equ L6721
 align 8
L6736:
 dq 144115188075855874
 dq L7017
 dq L7018
 align 8
L7018:
 dq 144115188075855874
 dq L7019
 dq L7020
L7020 equ null
 align 8
L7019:
 dq 144115188075855874
 dq L7021
 dq L7022
 align 8
L7022:
 dq 144115188075855874
 dq L7023
 dq L7024
L7024 equ null
 align 8
L7023:
 dq 144115188075855874
 dq L7025
 dq L7026
 align 8
L7026:
 dq 144115188075855874
 dq L7027
 dq L7028
L7028 equ null
 align 8
L7027:
 dq 216172782113783811
 dq L7029
 dq L7030
 dq L7031
L7031 equ L4394
L7030 equ L6770
L7029 equ L6768
L7025 equ L5601
L7021 equ L6758
 align 8
L7017:
 dq 144115188075855874
 dq L7032
 dq L7033
 align 8
L7033:
 dq 144115188075855874
 dq L7034
 dq L7035
 align 8
L7035:
 dq 144115188075855874
 dq L7036
 dq L7037
L7037 equ null
 align 8
L7036:
 dq 144115188075855874
 dq L7038
 dq L7039
 align 8
L7039:
 dq 144115188075855874
 dq L7040
 dq L7041
L7041 equ null
 align 8
L7040:
 dq 144115188075855874
 dq L7042
 dq L7043
L7043 equ null
L7042 equ L6768
L7038 equ L5601
 align 8
L7034:
 dq 144115188075855874
 dq L7044
 dq L7045
 align 8
L7045:
 dq 144115188075855874
 dq L7046
 dq L7047
L7047 equ null
 align 8
L7046:
 dq 216172782113783810
 dq L7048
 dq L7049
L7049 equ L4394
L7048 equ L6770
L7044 equ L5601
L7032 equ L6721
 align 8
L6734:
 dq 144115188075855874
 dq L7050
 dq L7051
 align 8
L7051:
 dq 144115188075855874
 dq L7052
 dq L7053
 align 8
L7053:
 dq 144115188075855874
 dq L7054
 dq L7055
 align 8
L7055:
 dq 144115188075855874
 dq L7056
 dq L7057
L7057 equ null
L7056 equ L6762
L7054 equ L6851
L7052 equ L6812
L7050 equ L5601
 align 8
L6732:
 dq 72057594037927937
 dq L7058
L6728 equ L6894
L6726 equ L4496
 align 8
L6689:
 dq 144115188075855874
 dq L7059
 dq L7060
 align 8
L7060:
 dq 144115188075855874
 dq L7061
 dq L7062
 align 8
L7062:
 dq 144115188075855874
 dq L7063
 dq L7064
L7064 equ null
 align 8
L7063:
 dq 144115188075855874
 dq L7065
 dq L7066
 align 8
L7066:
 dq 144115188075855874
 dq L7067
 dq L7068
 align 8
L7068:
 dq 144115188075855874
 dq L7069
 dq L7070
 align 8
L7070:
 dq 144115188075855874
 dq L7071
 dq L7072
L7072 equ null
 align 8
L7071:
 dq 144115188075855874
 dq L7073
 dq L7074
 align 8
L7074:
 dq 144115188075855874
 dq L7075
 dq L7076
L7076 equ null
 align 8
L7075:
 dq 144115188075855874
 dq L7077
 dq L7078
 align 8
L7078:
 dq 144115188075855874
 dq L7079
 dq L7080
L7080 equ null
 align 8
L7079:
 dq 144115188075855874
 dq L7081
 dq L7082
 align 8
L7082:
 dq 144115188075855874
 dq L7083
 dq L7084
 align 8
L7084:
 dq 144115188075855874
 dq L7085
 dq L7086
L7086 equ null
L7085 equ L6770
L7083 equ L6768
L7081 equ L6766
L7077 equ L6758
 align 8
L7073:
 dq 144115188075855874
 dq L7087
 dq L7088
 align 8
L7088:
 dq 144115188075855874
 dq L7089
 dq L7090
 align 8
L7090:
 dq 144115188075855874
 dq L7091
 dq L7092
L7092 equ null
L7091 equ L6768
L7089 equ L6770
L7087 equ L6721
 align 8
L7069:
 dq 144115188075855874
 dq L7093
 dq L7094
 align 8
L7094:
 dq 144115188075855874
 dq L7095
 dq L7096
L7096 equ null
 align 8
L7095:
 dq 144115188075855874
 dq L7097
 dq L7098
 align 8
L7098:
 dq 144115188075855874
 dq L7099
 dq L7100
L7100 equ null
L7099 equ L6768
L7097 equ L6758
 align 8
L7093:
 dq 144115188075855874
 dq L7101
 dq L7102
 align 8
L7102:
 dq 144115188075855874
 dq L7103
 dq L7104
 align 8
L7104:
 dq 144115188075855874
 dq L7105
 dq L7106
L7106 equ null
L7105 equ L6768
 align 8
L7103:
 dq 144115188075855874
 dq L7107
 dq L7108
 align 8
L7108:
 dq 144115188075855874
 dq L7109
 dq L7110
L7110 equ null
L7109 equ null
L7107 equ L5601
L7101 equ L6721
L7067 equ null
L7065 equ L6732
 align 8
L7061:
 dq 72057594037927937
 dq L7111
L7059 equ L4496
 align 8
L6687:
 dq 144115188075855874
 dq L7112
 dq L7113
 align 8
L7113:
 dq 144115188075855874
 dq L7114
 dq L7115
 align 8
L7115:
 dq 144115188075855874
 dq L7116
 dq L7117
L7117 equ null
 align 8
L7116:
 dq 144115188075855874
 dq L7118
 dq L7119
 align 8
L7119:
 dq 144115188075855874
 dq L7120
 dq L7121
 align 8
L7121:
 dq 144115188075855874
 dq L7122
 dq L7123
L7123 equ null
 align 8
L7122:
 dq 144115188075855874
 dq L7124
 dq L7125
 align 8
L7125:
 dq 144115188075855874
 dq L7126
 dq L7127
L7127 equ null
 align 8
L7126:
 dq 144115188075855874
 dq L7128
 dq L7129
 align 8
L7129:
 dq 144115188075855874
 dq L7130
 dq L7131
 align 8
L7131:
 dq 144115188075855874
 dq L7132
 dq L7133
 align 8
L7133:
 dq 144115188075855874
 dq L7134
 dq L7135
 align 8
L7135:
 dq 144115188075855874
 dq L7136
 dq L7137
L7137 equ null
L7136 equ L6768
 align 8
L7134:
 dq 72057594037927937
 dq L7138
L7132 equ L6770
 align 8
L7130:
 dq 144115188075855874
 dq L7139
 dq L7140
 align 8
L7140:
 dq 144115188075855874
 dq L7141
 dq L7142
L7142 equ null
L7141 equ null
L7139 equ L5601
L7128 equ L7134
 align 8
L7124:
 dq 144115188075855874
 dq L7143
 dq L7144
 align 8
L7144:
 dq 144115188075855874
 dq L7145
 dq L7146
 align 8
L7146:
 dq 144115188075855874
 dq L7147
 dq L7148
L7148 equ null
L7147 equ L6768
L7145 equ L6770
L7143 equ L6721
 align 8
L7120:
 dq 144115188075855874
 dq L7149
 dq L7150
L7150 equ null
L7149 equ L5601
L7118 equ L6732
 align 8
L7114:
 dq 72057594037927937
 dq L7151
L7112 equ L4496
 align 8
L6685:
 dq 144115188075855874
 dq L7152
 dq L7153
 align 8
L7153:
 dq 144115188075855874
 dq L7154
 dq L7155
 align 8
L7155:
 dq 144115188075855874
 dq L7156
 dq L7157
L7157 equ null
 align 8
L7156:
 dq 144115188075855874
 dq L7158
 dq L7159
 align 8
L7159:
 dq 144115188075855874
 dq L7160
 dq L7161
 align 8
L7161:
 dq 144115188075855874
 dq L7162
 dq L7163
 align 8
L7163:
 dq 144115188075855874
 dq L7164
 dq L7165
 align 8
L7165:
 dq 144115188075855874
 dq L7166
 dq L7167
 align 8
L7167:
 dq 144115188075855874
 dq L7168
 dq L7169
L7169 equ null
 align 8
L7168:
 dq 144115188075855874
 dq L7170
 dq L7171
 align 8
L7171:
 dq 144115188075855874
 dq L7172
 dq L7173
L7173 equ null
 align 8
L7172:
 dq 144115188075855874
 dq L7174
 dq L7175
 align 8
L7175:
 dq 144115188075855874
 dq L7176
 dq L7177
L7177 equ null
 align 8
L7176:
 dq 144115188075855874
 dq L7178
 dq L7179
 align 8
L7179:
 dq 144115188075855874
 dq L7180
 dq L7181
 align 8
L7181:
 dq 144115188075855874
 dq L7182
 dq L7183
L7183 equ null
L7182 equ L6770
L7180 equ L6768
L7178 equ L6799
L7174 equ L6758
 align 8
L7170:
 dq 144115188075855874
 dq L7184
 dq L7185
 align 8
L7185:
 dq 144115188075855874
 dq L7186
 dq L7187
 align 8
L7187:
 dq 144115188075855874
 dq L7188
 dq L7189
L7189 equ null
L7188 equ L6768
L7186 equ L6770
L7184 equ L6721
 align 8
L7166:
 dq 144115188075855874
 dq L7190
 dq L7191
 align 8
L7191:
 dq 144115188075855874
 dq L7192
 dq L7193
L7193 equ null
 align 8
L7192:
 dq 144115188075855874
 dq L7194
 dq L7195
 align 8
L7195:
 dq 144115188075855874
 dq L7196
 dq L7197
L7197 equ null
 align 8
L7196:
 dq 144115188075855874
 dq L7198
 dq L7199
 align 8
L7199:
 dq 144115188075855874
 dq L7200
 dq L7201
 align 8
L7201:
 dq 72057594037927937
 dq L7202
L7200 equ L6768
L7198 equ L6812
L7194 equ L6758
 align 8
L7190:
 dq 144115188075855874
 dq L7203
 dq L7204
 align 8
L7204:
 dq 144115188075855874
 dq L7205
 dq L7206
 align 8
L7206:
 dq 144115188075855874
 dq L7207
 dq L7208
L7208 equ null
L7207 equ L6768
 align 8
L7205:
 dq 144115188075855874
 dq L7209
 dq L7210
L7210 equ L7201
L7209 equ L6812
L7203 equ L6721
 align 8
L7164:
 dq 144115188075855874
 dq L7211
 dq L7212
 align 8
L7212:
 dq 144115188075855874
 dq L7213
 dq L7214
L7214 equ null
 align 8
L7213:
 dq 144115188075855874
 dq L7215
 dq L7216
 align 8
L7216:
 dq 144115188075855874
 dq L7217
 dq L7218
L7218 equ null
 align 8
L7217:
 dq 144115188075855874
 dq L7219
 dq L7220
 align 8
L7220:
 dq 144115188075855874
 dq L7221
 dq L7222
L7222 equ null
L7221 equ L6768
L7219 equ L6812
L7215 equ L6758
 align 8
L7211:
 dq 144115188075855874
 dq L7223
 dq L7224
 align 8
L7224:
 dq 144115188075855874
 dq L7225
 dq L7226
 align 8
L7226:
 dq 144115188075855874
 dq L7227
 dq L7228
L7228 equ null
L7227 equ L6768
 align 8
L7225:
 dq 144115188075855874
 dq L7229
 dq L7230
 align 8
L7230:
 dq 144115188075855874
 dq L7231
 dq L7232
L7232 equ null
L7231 equ null
L7229 equ L5601
L7223 equ L6721
 align 8
L7162:
 dq 144115188075855874
 dq L7233
 dq L7234
 align 8
L7234:
 dq 144115188075855874
 dq L7235
 dq L7236
L7236 equ null
 align 8
L7235:
 dq 144115188075855874
 dq L7237
 dq L7238
 align 8
L7238:
 dq 144115188075855874
 dq L7239
 dq L7240
L7240 equ null
 align 8
L7239:
 dq 144115188075855874
 dq L7241
 dq L7242
 align 8
L7242:
 dq 144115188075855874
 dq L7243
 dq L7244
L7244 equ null
 align 8
L7243:
 dq 144115188075855874
 dq L7245
 dq L7246
L7246 equ L6770
L7245 equ L6768
L7241 equ L5601
L7237 equ L6758
 align 8
L7233:
 dq 144115188075855874
 dq L7247
 dq L7248
 align 8
L7248:
 dq 144115188075855874
 dq L7249
 dq L7250
 align 8
L7250:
 dq 144115188075855874
 dq L7251
 dq L7252
L7252 equ null
 align 8
L7251:
 dq 144115188075855874
 dq L7253
 dq L7254
 align 8
L7254:
 dq 144115188075855874
 dq L7255
 dq L7256
L7256 equ null
L7255 equ L6768
L7253 equ L5601
 align 8
L7249:
 dq 144115188075855874
 dq L7257
 dq L7258
 align 8
L7258:
 dq 144115188075855874
 dq L7259
 dq L7260
L7260 equ null
L7259 equ L6770
L7257 equ L5601
L7247 equ L6721
 align 8
L7160:
 dq 144115188075855874
 dq L7261
 dq L7262
 align 8
L7262:
 dq 144115188075855874
 dq L7263
 dq L7264
L7264 equ null
L7263 equ L6812
L7261 equ L5601
L7158 equ L6732
L7154 equ L7134
L7152 equ L4496
 align 8
L6683:
 dq 144115188075855874
 dq L7265
 dq L7266
 align 8
L7266:
 dq 144115188075855874
 dq L7267
 dq L7268
 align 8
L7268:
 dq 144115188075855874
 dq L7269
 dq L7270
L7270 equ null
 align 8
L7269:
 dq 144115188075855874
 dq L7271
 dq L7272
 align 8
L7272:
 dq 144115188075855874
 dq L7273
 dq L7274
 align 8
L7274:
 dq 144115188075855874
 dq L7275
 dq L7276
 align 8
L7276:
 dq 144115188075855874
 dq L7277
 dq L7278
 align 8
L7278:
 dq 144115188075855874
 dq L7279
 dq L7280
 align 8
L7280:
 dq 144115188075855874
 dq L7281
 dq L7282
L7282 equ null
 align 8
L7281:
 dq 144115188075855874
 dq L7283
 dq L7284
 align 8
L7284:
 dq 144115188075855874
 dq L7285
 dq L7286
L7286 equ null
 align 8
L7285:
 dq 144115188075855874
 dq L7287
 dq L7288
 align 8
L7288:
 dq 144115188075855874
 dq L7289
 dq L7290
L7290 equ null
 align 8
L7289:
 dq 144115188075855874
 dq L7291
 dq L7292
 align 8
L7292:
 dq 144115188075855874
 dq L7293
 dq L7294
 align 8
L7294:
 dq 144115188075855874
 dq L7295
 dq L7296
L7296 equ null
 align 8
L7295:
 dq 72057594037927937
 dq L7297
 align 8
L7293:
 dq 144115188075855874
 dq L7298
 dq L7299
 align 8
L7299:
 dq 144115188075855874
 dq L7300
 dq L7301
 align 8
L7301:
 dq 144115188075855874
 dq L7302
 dq L7303
L7303 equ null
 align 8
L7302:
 dq 144115188075855874
 dq L7304
 dq L7305
 align 8
L7305:
 dq 144115188075855874
 dq L7306
 dq L7307
 align 8
L7307:
 dq 144115188075855874
 dq L7308
 dq L7309
L7309 equ null
L7308 equ L6768
 align 8
L7306:
 dq 144115188075855874
 dq L7310
 dq L7311
 align 8
L7311:
 dq 144115188075855874
 dq L7312
 dq L7313
L7313 equ null
 align 8
L7312:
 dq 72057594037927937
 dq L7314
L7310 equ L5601
L7304 equ L6812
 align 8
L7300:
 dq 144115188075855874
 dq L7315
 dq L7316
L7316 equ null
L7315 equ L6768
L7298 equ L4700
 align 8
L7291:
 dq 72057594037927937
 dq L7317
L7287 equ L6758
 align 8
L7283:
 dq 144115188075855874
 dq L7318
 dq L7319
 align 8
L7319:
 dq 144115188075855874
 dq L7320
 dq L7321
 align 8
L7321:
 dq 144115188075855874
 dq L7322
 dq L7323
L7323 equ null
L7322 equ L7312
L7320 equ L7295
L7318 equ L6721
 align 8
L7279:
 dq 144115188075855874
 dq L7324
 dq L7325
 align 8
L7325:
 dq 144115188075855874
 dq L7326
 dq L7327
L7327 equ null
 align 8
L7326:
 dq 144115188075855874
 dq L7328
 dq L7329
 align 8
L7329:
 dq 144115188075855874
 dq L7330
 dq L7331
L7331 equ null
 align 8
L7330:
 dq 144115188075855874
 dq L7332
 dq L7333
 align 8
L7333:
 dq 144115188075855874
 dq L7334
 dq L7335
 align 8
L7335:
 dq 144115188075855874
 dq L7336
 dq L7337
L7337 equ null
 align 8
L7336:
 dq 72057594037927937
 dq L7338
 align 8
L7334:
 dq 144115188075855874
 dq L7339
 dq L7340
 align 8
L7340:
 dq 144115188075855874
 dq L7341
 dq L7342
 align 8
L7342:
 dq 144115188075855874
 dq L7343
 dq L7344
L7344 equ null
 align 8
L7343:
 dq 144115188075855874
 dq L7345
 dq L7346
 align 8
L7346:
 dq 144115188075855874
 dq L7347
 dq L7348
 align 8
L7348:
 dq 144115188075855874
 dq L7349
 dq L7350
L7350 equ null
L7349 equ L6770
 align 8
L7347:
 dq 144115188075855874
 dq L7351
 dq L7352
 align 8
L7352:
 dq 144115188075855874
 dq L7353
 dq L7354
L7354 equ null
L7353 equ L7312
L7351 equ L5601
L7345 equ L6812
 align 8
L7341:
 dq 144115188075855874
 dq L7355
 dq L7356
L7356 equ null
L7355 equ L6768
L7339 equ L4700
L7332 equ L7291
L7328 equ L6758
 align 8
L7324:
 dq 144115188075855874
 dq L7357
 dq L7358
 align 8
L7358:
 dq 144115188075855874
 dq L7359
 dq L7360
 align 8
L7360:
 dq 144115188075855874
 dq L7361
 dq L7362
L7362 equ null
L7361 equ L7312
 align 8
L7359:
 dq 144115188075855874
 dq L7363
 dq L7364
 align 8
L7364:
 dq 144115188075855874
 dq L7365
 dq L7366
 align 8
L7366:
 dq 144115188075855874
 dq L7367
 dq L7368
L7368 equ null
L7367 equ L7336
 align 8
L7365:
 dq 144115188075855874
 dq L7369
 dq L7370
 align 8
L7370:
 dq 144115188075855874
 dq L7371
 dq L7372
 align 8
L7372:
 dq 144115188075855874
 dq L7373
 dq L7374
L7374 equ null
L7373 equ L6770
 align 8
L7371:
 dq 144115188075855874
 dq L7375
 dq L7376
L7376 equ null
L7375 equ L6768
L7369 equ L4700
L7363 equ L7291
L7357 equ L6721
 align 8
L7277:
 dq 144115188075855874
 dq L7377
 dq L7378
 align 8
L7378:
 dq 144115188075855874
 dq L7379
 dq L7380
L7380 equ null
 align 8
L7379:
 dq 144115188075855874
 dq L7381
 dq L7382
 align 8
L7382:
 dq 144115188075855874
 dq L7383
 dq L7384
L7384 equ null
 align 8
L7383:
 dq 144115188075855874
 dq L7385
 dq L7386
 align 8
L7386:
 dq 144115188075855874
 dq L7387
 dq L7388
L7388 equ null
 align 8
L7387:
 dq 144115188075855874
 dq L7389
 dq L7390
 align 8
L7390:
 dq 144115188075855874
 dq L7391
 dq L7392
 align 8
L7392:
 dq 144115188075855874
 dq L7393
 dq L7394
L7394 equ null
L7393 equ L6768
 align 8
L7391:
 dq 144115188075855874
 dq L7395
 dq L7396
 align 8
L7396:
 dq 144115188075855874
 dq L7397
 dq L7398
L7398 equ null
L7397 equ L7312
L7395 equ L5601
L7389 equ L6812
L7385 equ L6812
L7381 equ L6758
 align 8
L7377:
 dq 144115188075855874
 dq L7399
 dq L7400
 align 8
L7400:
 dq 144115188075855874
 dq L7401
 dq L7402
 align 8
L7402:
 dq 144115188075855874
 dq L7403
 dq L7404
L7404 equ null
L7403 equ L7312
 align 8
L7401:
 dq 144115188075855874
 dq L7405
 dq L7406
 align 8
L7406:
 dq 144115188075855874
 dq L7407
 dq L7408
L7408 equ null
L7407 equ L6768
L7405 equ L6812
L7399 equ L6721
 align 8
L7275:
 dq 144115188075855874
 dq L7409
 dq L7410
 align 8
L7410:
 dq 144115188075855874
 dq L7411
 dq L7412
L7412 equ null
 align 8
L7411:
 dq 144115188075855874
 dq L7413
 dq L7414
 align 8
L7414:
 dq 144115188075855874
 dq L7415
 dq L7416
L7416 equ null
 align 8
L7415:
 dq 144115188075855874
 dq L7417
 dq L7418
 align 8
L7418:
 dq 144115188075855874
 dq L7419
 dq L7420
L7420 equ null
 align 8
L7419:
 dq 144115188075855874
 dq L7421
 dq L7422
L7422 equ null
 align 8
L7421:
 dq 144115188075855874
 dq L7423
 dq L7424
 align 8
L7424:
 dq 144115188075855874
 dq L7425
 dq L7426
L7426 equ null
L7425 equ L6768
L7423 equ L7312
L7417 equ L5601
L7413 equ L6758
 align 8
L7409:
 dq 144115188075855874
 dq L7427
 dq L7428
 align 8
L7428:
 dq 144115188075855874
 dq L7429
 dq L7430
 align 8
L7430:
 dq 144115188075855874
 dq L7431
 dq L7432
L7432 equ null
L7431 equ L7312
 align 8
L7429:
 dq 144115188075855874
 dq L7433
 dq L7434
 align 8
L7434:
 dq 144115188075855874
 dq L7435
 dq L7436
L7436 equ null
 align 8
L7435:
 dq 144115188075855874
 dq L7437
 dq L7438
L7438 equ null
L7437 equ L6768
L7433 equ L5601
L7427 equ L6721
 align 8
L7273:
 dq 144115188075855874
 dq L7439
 dq L7440
 align 8
L7440:
 dq 144115188075855874
 dq L7441
 dq L7442
 align 8
L7442:
 dq 144115188075855874
 dq L7443
 dq L7444
 align 8
L7444:
 dq 144115188075855874
 dq L7445
 dq L7446
L7446 equ null
L7445 equ L4700
L7443 equ L7291
L7441 equ L6812
L7439 equ L5601
L7271 equ L6732
 align 8
L7267:
 dq 72057594037927937
 dq L7447
L7265 equ L4496
 align 8
L6681:
 dq 144115188075855874
 dq L7448
 dq L7449
 align 8
L7449:
 dq 144115188075855874
 dq L7450
 dq L7451
 align 8
L7451:
 dq 144115188075855874
 dq L7452
 dq L7453
L7453 equ null
 align 8
L7452:
 dq 144115188075855874
 dq L7454
 dq L7455
 align 8
L7455:
 dq 144115188075855874
 dq L7456
 dq L7457
 align 8
L7457:
 dq 144115188075855874
 dq L7458
 dq L7459
L7459 equ null
 align 8
L7458:
 dq 144115188075855874
 dq L7460
 dq L7461
 align 8
L7461:
 dq 144115188075855874
 dq L7462
 dq L7463
L7463 equ null
 align 8
L7462:
 dq 144115188075855874
 dq L7464
 dq L7465
 align 8
L7465:
 dq 144115188075855874
 dq L7466
 dq L7467
 align 8
L7467:
 dq 144115188075855874
 dq L7468
 dq L7469
 align 8
L7469:
 dq 144115188075855874
 dq L7470
 dq L7471
 align 8
L7471:
 dq 144115188075855874
 dq L7472
 dq L7473
 align 8
L7473:
 dq 144115188075855874
 dq L7474
 dq L7475
 align 8
L7475:
 dq 144115188075855874
 dq L7476
 dq L7477
 align 8
L7477:
 dq 144115188075855874
 dq L7478
 dq L7479
 align 8
L7479:
 dq 144115188075855874
 dq L7480
 dq L7481
L7481 equ null
L7480 equ L7061
 align 8
L7478:
 dq 144115188075855874
 dq L7482
 dq L7483
L7483 equ null
 align 8
L7482:
 dq 72057594037927937
 dq L7484
L7476 equ L6770
 align 8
L7474:
 dq 72057594037927937
 dq L7485
L7472 equ L7312
L7470 equ L7267
L7468 equ L7482
 align 8
L7466:
 dq 144115188075855874
 dq L7486
 dq L7487
L7487 equ null
L7486 equ L6768
L7464 equ L6711
 align 8
L7460:
 dq 144115188075855874
 dq L7488
 dq L7489
 align 8
L7489:
 dq 144115188075855874
 dq L7490
 dq L7491
 align 8
L7491:
 dq 144115188075855874
 dq L7492
 dq L7493
L7493 equ null
 align 8
L7492:
 dq 144115188075855874
 dq L7494
 dq L7495
L7495 equ null
L7494 equ L7482
 align 8
L7490:
 dq 144115188075855874
 dq L7496
 dq L7497
L7497 equ L6770
 align 8
L7496:
 dq 144115188075855874
 dq L7498
 dq L7499
 align 8
L7499:
 dq 144115188075855874
 dq L7500
 dq L7501
L7501 equ null
L7500 equ L6768
L7498 equ L7312
L7488 equ L6721
L7456 equ null
L7454 equ L6732
 align 8
L7450:
 dq 72057594037927937
 dq L7502
L7448 equ L4496
 align 8
L6679:
 dq 144115188075855874
 dq L7503
 dq L7504
 align 8
L7504:
 dq 144115188075855874
 dq L7505
 dq L7506
 align 8
L7506:
 dq 144115188075855874
 dq L7507
 dq L7508
L7508 equ null
 align 8
L7507:
 dq 144115188075855874
 dq L7509
 dq L7510
 align 8
L7510:
 dq 144115188075855874
 dq L7511
 dq L7512
 align 8
L7512:
 dq 144115188075855874
 dq L7513
 dq L7514
L7514 equ null
 align 8
L7513:
 dq 144115188075855874
 dq L7515
 dq L7516
 align 8
L7516:
 dq 144115188075855874
 dq L7517
 dq L7518
L7518 equ null
 align 8
L7517:
 dq 144115188075855874
 dq L7519
 dq L7520
 align 8
L7520:
 dq 144115188075855874
 dq L7521
 dq L7522
 align 8
L7522:
 dq 144115188075855874
 dq L7523
 dq L7524
 align 8
L7524:
 dq 144115188075855874
 dq L7525
 dq L7526
 align 8
L7526:
 dq 144115188075855874
 dq L7527
 dq L7528
L7528 equ null
 align 8
L7527:
 dq 72057594037927937
 dq L7529
 align 8
L7525:
 dq 72057594037927937
 dq L7530
L7523 equ L7482
 align 8
L7521:
 dq 72057594037927937
 dq L7531
L7519 equ L6711
 align 8
L7515:
 dq 144115188075855874
 dq L7532
 dq L7533
 align 8
L7533:
 dq 144115188075855874
 dq L7534
 dq L7535
 align 8
L7535:
 dq 144115188075855874
 dq L7536
 dq L7537
 align 8
L7537:
 dq 144115188075855874
 dq L7538
 dq L7539
 align 8
L7539:
 dq 144115188075855874
 dq L7540
 dq L7541
L7541 equ null
L7540 equ L7525
L7538 equ L7482
L7536 equ L7521
L7534 equ L7527
L7532 equ L6721
L7511 equ null
L7509 equ L6732
L7505 equ L7474
L7503 equ L4496
 align 8
L6677:
 dq 144115188075855874
 dq L7542
 dq L7543
 align 8
L7543:
 dq 144115188075855874
 dq L7544
 dq L7545
 align 8
L7545:
 dq 144115188075855874
 dq L7546
 dq L7547
L7547 equ null
 align 8
L7546:
 dq 144115188075855874
 dq L7548
 dq L7549
 align 8
L7549:
 dq 144115188075855874
 dq L7550
 dq L7551
 align 8
L7551:
 dq 144115188075855874
 dq L7552
 dq L7553
L7553 equ null
 align 8
L7552:
 dq 144115188075855874
 dq L7554
 dq L7555
 align 8
L7555:
 dq 144115188075855874
 dq L7556
 dq L7557
L7557 equ null
 align 8
L7556:
 dq 144115188075855874
 dq L7558
 dq L7559
 align 8
L7559:
 dq 144115188075855874
 dq L7560
 dq L7561
L7561 equ null
 align 8
L7560:
 dq 144115188075855874
 dq L7562
 dq L7563
 align 8
L7563:
 dq 144115188075855874
 dq L7564
 dq L7565
 align 8
L7565:
 dq 144115188075855874
 dq L7566
 dq L7567
L7567 equ null
 align 8
L7566:
 dq 72057594037927937
 dq L7568
 align 8
L7564:
 dq 72057594037927937
 dq L7569
 align 8
L7562:
 dq 144115188075855874
 dq L7570
 dq L7571
 align 8
L7571:
 dq 144115188075855874
 dq L7572
 dq L7573
L7573 equ null
L7572 equ L6768
L7570 equ L5617
 align 8
L7558:
 dq 72057594037927937
 dq L7574
 align 8
L7554:
 dq 144115188075855874
 dq L7575
 dq L7576
 align 8
L7576:
 dq 144115188075855874
 dq L7577
 dq L7578
 align 8
L7578:
 dq 144115188075855874
 dq L7579
 dq L7580
 align 8
L7580:
 dq 144115188075855874
 dq L7581
 dq L7582
 align 8
L7582:
 dq 144115188075855874
 dq L7583
 dq L7584
L7584 equ null
L7583 equ L7566
L7581 equ L4394
 align 8
L7579:
 dq 72057594037927937
 dq L7585
 align 8
L7577:
 dq 144115188075855874
 dq L7586
 dq L7587
 align 8
L7587:
 dq 144115188075855874
 dq L7588
 dq L7589
L7589 equ null
L7588 equ L6768
L7586 equ L5617
L7575 equ L6721
L7550 equ null
L7548 equ L4485
L7544 equ L7558
L7542 equ L4496
 align 8
L6675:
 dq 144115188075855874
 dq L7590
 dq L7591
 align 8
L7591:
 dq 144115188075855874
 dq L7592
 dq L7593
 align 8
L7593:
 dq 144115188075855874
 dq L7594
 dq L7595
L7595 equ null
 align 8
L7594:
 dq 144115188075855874
 dq L7596
 dq L7597
 align 8
L7597:
 dq 144115188075855874
 dq L7598
 dq L7599
 align 8
L7599:
 dq 144115188075855874
 dq L7600
 dq L7601
 align 8
L7601:
 dq 144115188075855874
 dq L7602
 dq L7603
L7603 equ null
 align 8
L7602:
 dq 144115188075855874
 dq L7604
 dq L7605
 align 8
L7605:
 dq 144115188075855874
 dq L7606
 dq L7607
L7607 equ null
 align 8
L7606:
 dq 144115188075855874
 dq L7608
 dq L7609
 align 8
L7609:
 dq 144115188075855874
 dq L7610
 dq L7611
 align 8
L7611:
 dq 72057594037927937
 dq L7612
L7610 equ L7295
 align 8
L7608:
 dq 72057594037927937
 dq L7613
 align 8
L7604:
 dq 144115188075855874
 dq L7614
 dq L7615
 align 8
L7615:
 dq 144115188075855874
 dq L7616
 dq L7617
 align 8
L7617:
 dq 144115188075855874
 dq L7618
 dq L7619
L7619 equ L7611
L7618 equ L7608
L7616 equ L7295
L7614 equ L6721
 align 8
L7600:
 dq 144115188075855874
 dq L7620
 dq L7621
 align 8
L7621:
 dq 144115188075855874
 dq L7622
 dq L7623
L7623 equ null
L7622 equ L7295
 align 8
L7620:
 dq 144115188075855874
 dq L7624
 dq L7625
 align 8
L7625:
 dq 144115188075855874
 dq L7626
 dq L7627
 align 8
L7627:
 dq 144115188075855874
 dq L7628
 dq L7629
L7629 equ null
L7628 equ L7566
L7626 equ L7295
L7624 equ L6721
L7598 equ null
L7596 equ L4485
L7592 equ L6758
L7590 equ L4496
 align 8
L6673:
 dq 144115188075855874
 dq L7630
 dq L7631
 align 8
L7631:
 dq 144115188075855874
 dq L7632
 dq L7633
 align 8
L7633:
 dq 144115188075855874
 dq L7634
 dq L7635
L7635 equ null
 align 8
L7634:
 dq 144115188075855874
 dq L7636
 dq L7637
 align 8
L7637:
 dq 144115188075855874
 dq L7638
 dq L7639
 align 8
L7639:
 dq 144115188075855874
 dq L7640
 dq L7641
 align 8
L7641:
 dq 144115188075855874
 dq L7642
 dq L7643
 align 8
L7643:
 dq 144115188075855874
 dq L7644
 dq L7645
 align 8
L7645:
 dq 144115188075855874
 dq L7646
 dq L7647
 align 8
L7647:
 dq 144115188075855874
 dq L7648
 dq L7649
 align 8
L7649:
 dq 144115188075855874
 dq L7650
 dq L7651
 align 8
L7651:
 dq 144115188075855874
 dq L7652
 dq L7653
 align 8
L7653:
 dq 144115188075855874
 dq L7654
 dq L7655
 align 8
L7655:
 dq 144115188075855874
 dq L7656
 dq L7657
 align 8
L7657:
 dq 144115188075855874
 dq L7658
 dq L7659
L7659 equ null
 align 8
L7658:
 dq 144115188075855874
 dq L7660
 dq L7661
 align 8
L7661:
 dq 144115188075855874
 dq L7662
 dq L7663
L7663 equ null
 align 8
L7662:
 dq 144115188075855874
 dq L7664
 dq L7665
 align 8
L7665:
 dq 144115188075855874
 dq L7666
 dq L7667
L7667 equ null
 align 8
L7666:
 dq 144115188075855874
 dq L7668
 dq L7669
 align 8
L7669:
 dq 144115188075855874
 dq L7670
 dq L7671
L7671 equ null
L7670 equ L6768
L7668 equ L5601
L7664 equ L6758
 align 8
L7660:
 dq 144115188075855874
 dq L7672
 dq L7673
 align 8
L7673:
 dq 144115188075855874
 dq L7674
 dq L7675
 align 8
L7675:
 dq 144115188075855874
 dq L7676
 dq L7677
L7677 equ null
L7676 equ L7482
L7674 equ L6768
L7672 equ L6721
 align 8
L7656:
 dq 144115188075855874
 dq L7678
 dq L7679
 align 8
L7679:
 dq 144115188075855874
 dq L7680
 dq L7681
L7681 equ null
 align 8
L7680:
 dq 144115188075855874
 dq L7682
 dq L7683
 align 8
L7683:
 dq 144115188075855874
 dq L7684
 dq L7685
 align 8
L7685:
 dq 144115188075855874
 dq L7686
 dq L7687
 align 8
L7687:
 dq 144115188075855874
 dq L7688
 dq L7689
 align 8
L7689:
 dq 144115188075855874
 dq L7690
 dq L7691
 align 8
L7691:
 dq 144115188075855874
 dq L7692
 dq L7693
 align 8
L7693:
 dq 144115188075855874
 dq L7694
 dq L7695
L7695 equ null
L7694 equ L6894
L7692 equ L7482
 align 8
L7690:
 dq 216172782113783810
 dq L7696
 dq L7697
L7697 equ L4394
L7696 equ L6770
L7688 equ L7474
L7686 equ L7482
 align 8
L7684:
 dq 144115188075855874
 dq L7698
 dq L7699
L7699 equ null
L7698 equ L6768
L7682 equ L6711
 align 8
L7678:
 dq 144115188075855874
 dq L7700
 dq L7701
 align 8
L7701:
 dq 144115188075855874
 dq L7702
 dq L7703
 align 8
L7703:
 dq 144115188075855874
 dq L7704
 dq L7705
L7705 equ null
L7704 equ L7482
 align 8
L7702:
 dq 216172782113783811
 dq L7706
 dq L7707
 dq L7708
L7708 equ L4394
L7707 equ L6770
L7706 equ L6768
L7700 equ L6721
 align 8
L7654:
 dq 144115188075855874
 dq L7709
 dq L7710
 align 8
L7710:
 dq 144115188075855874
 dq L7711
 dq L7712
L7712 equ null
 align 8
L7711:
 dq 144115188075855874
 dq L7713
 dq L7714
 align 8
L7714:
 dq 144115188075855874
 dq L7715
 dq L7716
 align 8
L7716:
 dq 144115188075855874
 dq L7717
 dq L7718
 align 8
L7718:
 dq 144115188075855874
 dq L7719
 dq L7720
 align 8
L7720:
 dq 144115188075855874
 dq L7721
 dq L7722
 align 8
L7722:
 dq 144115188075855874
 dq L7723
 dq L7724
 align 8
L7724:
 dq 144115188075855874
 dq L7725
 dq L7726
L7726 equ null
L7725 equ L7134
L7723 equ L7482
L7721 equ L6770
L7719 equ L7474
L7717 equ L7482
L7715 equ L6768
L7713 equ L6711
 align 8
L7709:
 dq 144115188075855874
 dq L7727
 dq L7728
 align 8
L7728:
 dq 144115188075855874
 dq L7729
 dq L7730
 align 8
L7730:
 dq 144115188075855874
 dq L7731
 dq L7732
L7732 equ null
L7731 equ L7482
 align 8
L7729:
 dq 144115188075855874
 dq L7733
 dq L7734
L7734 equ L6770
L7733 equ L6768
L7727 equ L6721
 align 8
L7652:
 dq 144115188075855874
 dq L7735
 dq L7736
 align 8
L7736:
 dq 144115188075855874
 dq L7737
 dq L7738
L7738 equ null
 align 8
L7737:
 dq 144115188075855874
 dq L7739
 dq L7740
 align 8
L7740:
 dq 144115188075855874
 dq L7741
 dq L7742
L7742 equ null
 align 8
L7741:
 dq 144115188075855874
 dq L7743
 dq L7744
 align 8
L7744:
 dq 144115188075855874
 dq L7745
 dq L7746
L7746 equ null
L7745 equ L6768
L7743 equ L5617
L7739 equ L7558
 align 8
L7735:
 dq 144115188075855874
 dq L7747
 dq L7748
 align 8
L7748:
 dq 144115188075855874
 dq L7749
 dq L7750
 align 8
L7750:
 dq 144115188075855874
 dq L7751
 dq L7752
L7752 equ null
L7751 equ L7482
 align 8
L7749:
 dq 144115188075855874
 dq L7753
 dq L7754
 align 8
L7754:
 dq 144115188075855874
 dq L7755
 dq L7756
L7756 equ null
L7755 equ L6768
L7753 equ L5617
L7747 equ L6721
 align 8
L7650:
 dq 144115188075855874
 dq L7757
 dq L7758
 align 8
L7758:
 dq 144115188075855874
 dq L7759
 dq L7760
L7760 equ null
 align 8
L7759:
 dq 144115188075855874
 dq L7761
 dq L7762
 align 8
L7762:
 dq 144115188075855874
 dq L7763
 dq L7764
 align 8
L7764:
 dq 144115188075855874
 dq L7765
 dq L7766
L7766 equ null
 align 8
L7765:
 dq 144115188075855874
 dq L7767
 dq L7768
L7768 equ null
L7767 equ L7482
 align 8
L7763:
 dq 144115188075855874
 dq L7769
 dq L7770
L7770 equ L6770
 align 8
L7769:
 dq 144115188075855874
 dq L7771
 dq L7772
 align 8
L7772:
 dq 144115188075855874
 dq L7773
 dq L7774
L7774 equ null
L7773 equ L6768
L7771 equ L5617
L7761 equ L7450
 align 8
L7757:
 dq 144115188075855874
 dq L7775
 dq L7776
 align 8
L7776:
 dq 144115188075855874
 dq L7777
 dq L7778
 align 8
L7778:
 dq 144115188075855874
 dq L7779
 dq L7780
L7780 equ null
 align 8
L7779:
 dq 144115188075855874
 dq L7781
 dq L7782
L7782 equ null
L7781 equ L7482
 align 8
L7777:
 dq 144115188075855874
 dq L7783
 dq L7784
L7784 equ L6770
 align 8
L7783:
 dq 144115188075855874
 dq L7785
 dq L7786
 align 8
L7786:
 dq 144115188075855874
 dq L7787
 dq L7788
L7788 equ null
L7787 equ L6768
L7785 equ L5617
L7775 equ L6721
 align 8
L7648:
 dq 144115188075855874
 dq L7789
 dq L7790
 align 8
L7790:
 dq 144115188075855874
 dq L7791
 dq L7792
L7792 equ null
 align 8
L7791:
 dq 144115188075855874
 dq L7793
 dq L7794
 align 8
L7794:
 dq 144115188075855874
 dq L7795
 dq L7796
 align 8
L7796:
 dq 144115188075855874
 dq L7797
 dq L7798
L7798 equ null
 align 8
L7797:
 dq 144115188075855874
 dq L7799
 dq L7800
L7800 equ null
L7799 equ L7482
 align 8
L7795:
 dq 144115188075855874
 dq L7801
 dq L7802
L7802 equ L6770
 align 8
L7801:
 dq 144115188075855874
 dq L7803
 dq L7804
 align 8
L7804:
 dq 144115188075855874
 dq L7805
 dq L7806
L7806 equ null
L7805 equ L6768
L7803 equ L5612
L7793 equ L7450
 align 8
L7789:
 dq 144115188075855874
 dq L7807
 dq L7808
 align 8
L7808:
 dq 144115188075855874
 dq L7809
 dq L7810
 align 8
L7810:
 dq 144115188075855874
 dq L7811
 dq L7812
L7812 equ null
 align 8
L7811:
 dq 144115188075855874
 dq L7813
 dq L7814
L7814 equ null
L7813 equ L7482
 align 8
L7809:
 dq 144115188075855874
 dq L7815
 dq L7816
L7816 equ L6770
 align 8
L7815:
 dq 144115188075855874
 dq L7817
 dq L7818
 align 8
L7818:
 dq 144115188075855874
 dq L7819
 dq L7820
L7820 equ null
L7819 equ L6768
L7817 equ L5612
L7807 equ L6721
 align 8
L7646:
 dq 144115188075855874
 dq L7821
 dq L7822
 align 8
L7822:
 dq 144115188075855874
 dq L7823
 dq L7824
L7824 equ null
 align 8
L7823:
 dq 144115188075855874
 dq L7825
 dq L7826
 align 8
L7826:
 dq 144115188075855874
 dq L7827
 dq L7828
 align 8
L7828:
 dq 144115188075855874
 dq L7829
 dq L7830
 align 8
L7830:
 dq 144115188075855874
 dq L7831
 dq L7832
 align 8
L7832:
 dq 144115188075855874
 dq L7833
 dq L7834
L7834 equ null
 align 8
L7833:
 dq 144115188075855874
 dq L7835
 dq L7836
 align 8
L7836:
 dq 144115188075855874
 dq L7837
 dq L7838
L7838 equ null
L7837 equ L5612
L7835 equ L5601
L7831 equ L7114
L7829 equ L7482
L7827 equ L6768
L7825 equ L6711
 align 8
L7821:
 dq 144115188075855874
 dq L7839
 dq L7840
 align 8
L7840:
 dq 144115188075855874
 dq L7841
 dq L7842
 align 8
L7842:
 dq 144115188075855874
 dq L7843
 dq L7844
L7844 equ null
 align 8
L7843:
 dq 144115188075855874
 dq L7845
 dq L7846
L7846 equ null
L7845 equ L7482
 align 8
L7841:
 dq 144115188075855874
 dq L7847
 dq L7848
 align 8
L7848:
 dq 144115188075855874
 dq L7849
 dq L7850
L7850 equ null
L7849 equ L6768
L7847 equ L5612
L7839 equ L6721
 align 8
L7644:
 dq 144115188075855874
 dq L7851
 dq L7852
 align 8
L7852:
 dq 144115188075855874
 dq L7853
 dq L7854
L7854 equ null
 align 8
L7853:
 dq 144115188075855874
 dq L7855
 dq L7856
 align 8
L7856:
 dq 144115188075855874
 dq L7857
 dq L7858
 align 8
L7858:
 dq 144115188075855874
 dq L7859
 dq L7860
 align 8
L7860:
 dq 144115188075855874
 dq L7861
 dq L7862
 align 8
L7862:
 dq 144115188075855874
 dq L7863
 dq L7864
L7864 equ null
 align 8
L7863:
 dq 144115188075855874
 dq L7865
 dq L7866
 align 8
L7866:
 dq 144115188075855874
 dq L7867
 dq L7868
L7868 equ null
L7867 equ L5602
L7865 equ L5601
L7861 equ L7114
 align 8
L7859:
 dq 144115188075855874
 dq L7869
 dq L7870
L7870 equ null
L7869 equ L7482
L7857 equ L6768
L7855 equ L6711
 align 8
L7851:
 dq 144115188075855874
 dq L7871
 dq L7872
 align 8
L7872:
 dq 144115188075855874
 dq L7873
 dq L7874
 align 8
L7874:
 dq 144115188075855874
 dq L7875
 dq L7876
L7876 equ null
L7875 equ L7482
 align 8
L7873:
 dq 144115188075855874
 dq L7877
 dq L7878
 align 8
L7878:
 dq 144115188075855874
 dq L7879
 dq L7880
L7880 equ null
L7879 equ L6768
L7877 equ L5602
L7871 equ L6721
 align 8
L7642:
 dq 144115188075855874
 dq L7881
 dq L7882
 align 8
L7882:
 dq 144115188075855874
 dq L7883
 dq L7884
L7884 equ null
 align 8
L7883:
 dq 144115188075855874
 dq L7885
 dq L7886
 align 8
L7886:
 dq 144115188075855874
 dq L7887
 dq L7888
 align 8
L7888:
 dq 144115188075855874
 dq L7889
 dq L7890
 align 8
L7890:
 dq 144115188075855874
 dq L7891
 dq L7892
 align 8
L7892:
 dq 144115188075855874
 dq L7893
 dq L7894
L7894 equ null
L7893 equ L6768
L7891 equ L7061
L7889 equ null
L7887 equ L6770
L7885 equ L6711
 align 8
L7881:
 dq 144115188075855874
 dq L7895
 dq L7896
 align 8
L7896:
 dq 144115188075855874
 dq L7897
 dq L7898
 align 8
L7898:
 dq 144115188075855874
 dq L7899
 dq L7900
L7900 equ null
L7899 equ null
 align 8
L7897:
 dq 144115188075855874
 dq L7901
 dq L7902
L7902 equ L6770
 align 8
L7901:
 dq 144115188075855874
 dq L7903
 dq L7904
 align 8
L7904:
 dq 144115188075855874
 dq L7905
 dq L7906
L7906 equ null
L7905 equ L6768
L7903 equ L5617
L7895 equ L6721
 align 8
L7640:
 dq 144115188075855874
 dq L7907
 dq L7908
 align 8
L7908:
 dq 144115188075855874
 dq L7909
 dq L7910
L7910 equ null
 align 8
L7909:
 dq 144115188075855874
 dq L7911
 dq L7912
 align 8
L7912:
 dq 144115188075855874
 dq L7913
 dq L7914
L7914 equ null
L7913 equ L6768
L7911 equ L6758
 align 8
L7907:
 dq 144115188075855874
 dq L7915
 dq L7916
 align 8
L7916:
 dq 144115188075855874
 dq L7917
 dq L7918
 align 8
L7918:
 dq 144115188075855874
 dq L7919
 dq L7920
L7920 equ null
L7919 equ null
 align 8
L7917:
 dq 144115188075855874
 dq L7921
 dq L7922
 align 8
L7922:
 dq 144115188075855874
 dq L7923
 dq L7924
L7924 equ null
L7923 equ L6768
L7921 equ L5612
L7915 equ L6721
 align 8
L7638:
 dq 144115188075855874
 dq L7925
 dq L7926
 align 8
L7926:
 dq 144115188075855874
 dq L7927
 dq L7928
 align 8
L7928:
 dq 144115188075855874
 dq L7929
 dq L7930
L7930 equ null
L7929 equ L5602
L7927 equ L5617
L7925 equ L5612
L7636 equ L6732
L7632 equ L6711
L7630 equ L4496
 align 8
L6671:
 dq 144115188075855874
 dq L7931
 dq L7932
L7932 equ null
 align 8
L7931:
 dq 144115188075855874
 dq L7933
 dq L7934
 align 8
L7934:
 dq 144115188075855874
 dq L7935
 dq L7936
L7936 equ null
 align 8
L7935:
 dq 144115188075855874
 dq L7937
 dq L7938
 align 8
L7938:
 dq 144115188075855874
 dq L7939
 dq L7940
 align 8
L7940:
 dq 144115188075855874
 dq L7941
 dq L7942
L7942 equ null
 align 8
L7941:
 dq 144115188075855874
 dq L7943
 dq L7944
 align 8
L7944:
 dq 144115188075855874
 dq L7945
 dq L7946
L7946 equ null
 align 8
L7945:
 dq 144115188075855874
 dq L7947
 dq L7948
 align 8
L7948:
 dq 144115188075855874
 dq L7949
 dq L7950
 align 8
L7950:
 dq 144115188075855874
 dq L7951
 dq L7952
 align 8
L7952:
 dq 144115188075855874
 dq L7953
 dq L7954
L7954 equ null
L7953 equ L4394
 align 8
L7951:
 dq 144115188075855874
 dq L7955
 dq L7956
 align 8
L7956:
 dq 144115188075855874
 dq L7957
 dq L7958
L7958 equ null
 align 8
L7957:
 dq 144115188075855874
 dq L7959
 dq L7960
 align 8
L7960:
 dq 144115188075855874
 dq L7961
 dq L7962
L7962 equ L7611
L7961 equ L4394
 align 8
L7959:
 dq 72057594037927937
 dq L7963
 align 8
L7955:
 dq 144115188075855874
 dq L7964
 dq L7965
 align 8
L7965:
 dq 144115188075855874
 dq L7966
 dq L7967
L7967 equ L7611
L7966 equ L4394
 align 8
L7964:
 dq 72057594037927937
 dq L7968
 align 8
L7949:
 dq 72057594037927937
 dq L7969
L7947 equ L4485
 align 8
L7943:
 dq 144115188075855874
 dq L7970
 dq L7971
 align 8
L7971:
 dq 144115188075855874
 dq L7972
 dq L7973
 align 8
L7973:
 dq 144115188075855874
 dq L7974
 dq L7975
 align 8
L7975:
 dq 144115188075855874
 dq L7976
 dq L7977
L7977 equ null
L7976 equ L4394
 align 8
L7974:
 dq 144115188075855874
 dq L7978
 dq L7979
 align 8
L7979:
 dq 144115188075855874
 dq L7980
 dq L7981
L7981 equ null
 align 8
L7980:
 dq 144115188075855874
 dq L7982
 dq L7983
 align 8
L7983:
 dq 144115188075855874
 dq L7984
 dq L7985
L7985 equ null
L7984 equ L4394
L7982 equ L7959
 align 8
L7978:
 dq 144115188075855874
 dq L7986
 dq L7987
 align 8
L7987:
 dq 144115188075855874
 dq L7988
 dq L7989
L7989 equ null
L7988 equ L4394
L7986 equ L7964
L7972 equ L7949
L7970 equ L6721
L7939 equ null
L7937 equ L4485
L7933 equ L6732
L6669 equ L4482
L6665 equ L5602
L6663 equ L4496
L6659 equ null
 align 8
L6657:
 dq 144115188075855874
 dq L7990
 dq L7991
 align 8
L7991:
 dq 144115188075855874
 dq L7992
 dq L7993
 align 8
L7993:
 dq 144115188075855874
 dq L7994
 dq L7995
L7995 equ null
L7994 equ L4730
L7992 equ L5601
L7990 equ L4700
L6655 equ L4482
 align 8
L6653:
 dq 72057594037927937
 dq L7996
 align 8
L6649:
 dq 144115188075855874
 dq L7997
 dq L7998
 align 8
L7998:
 dq 144115188075855874
 dq L7999
 dq L8000
 align 8
L8000:
 dq 144115188075855874
 dq L8001
 dq L8002
 align 8
L8002:
 dq 144115188075855874
 dq L8003
 dq L8004
 align 8
L8004:
 dq 144115188075855874
 dq L8005
 dq L8006
 align 8
L8006:
 dq 144115188075855874
 dq L8007
 dq L8008
 align 8
L8008:
 dq 144115188075855874
 dq L8009
 dq L8010
 align 8
L8010:
 dq 144115188075855874
 dq L8011
 dq L8012
 align 8
L8012:
 dq 144115188075855874
 dq L8013
 dq L8014
 align 8
L8014:
 dq 144115188075855874
 dq L8015
 dq L8016
 align 8
L8016:
 dq 144115188075855874
 dq L8017
 dq L8018
 align 8
L8018:
 dq 144115188075855874
 dq L8019
 dq L8020
 align 8
L8020:
 dq 144115188075855874
 dq L8021
 dq L8022
L8022 equ null
 align 8
L8021:
 dq 144115188075855874
 dq L8023
 dq L8024
 align 8
L8024:
 dq 144115188075855874
 dq L8025
 dq L8026
 align 8
L8026:
 dq 144115188075855874
 dq L8027
 dq L8028
L8028 equ null
 align 8
L8027:
 dq 144115188075855874
 dq L8029
 dq L8030
 align 8
L8030:
 dq 144115188075855874
 dq L8031
 dq L8032
 align 8
L8032:
 dq 144115188075855874
 dq L8033
 dq L8034
L8034 equ null
 align 8
L8033:
 dq 144115188075855874
 dq L8035
 dq L8036
 align 8
L8036:
 dq 144115188075855874
 dq L8037
 dq L8038
L8038 equ null
 align 8
L8037:
 dq 144115188075855874
 dq L8039
 dq L8040
 align 8
L8040:
 dq 144115188075855874
 dq L8041
 dq L8042
L8042 equ null
 align 8
L8041:
 dq 144115188075855874
 dq L8043
 dq L8044
 align 8
L8044:
 dq 144115188075855874
 dq L8045
 dq L8046
 align 8
L8046:
 dq 144115188075855874
 dq L8047
 dq L8048
L8048 equ null
L8047 equ L7295
L8045 equ null
L8043 equ L4700
 align 8
L8039:
 dq 72057594037927937
 dq L8049
 align 8
L8035:
 dq 144115188075855874
 dq L8050
 dq L8051
 align 8
L8051:
 dq 144115188075855874
 dq L8052
 dq L8053
L8053 equ null
L8052 equ L7295
L8050 equ L6721
L8031 equ null
L8029 equ L4485
L8025 equ L4609
L8023 equ L4496
 align 8
L8019:
 dq 144115188075855874
 dq L8054
 dq L8055
 align 8
L8055:
 dq 144115188075855874
 dq L8056
 dq L8057
 align 8
L8057:
 dq 144115188075855874
 dq L8058
 dq L8059
L8059 equ null
 align 8
L8058:
 dq 144115188075855874
 dq L8060
 dq L8061
 align 8
L8061:
 dq 144115188075855874
 dq L8062
 dq L8063
 align 8
L8063:
 dq 144115188075855874
 dq L8064
 dq L8065
 align 8
L8065:
 dq 144115188075855874
 dq L8066
 dq L8067
 align 8
L8067:
 dq 144115188075855874
 dq L8068
 dq L8069
L8069 equ null
 align 8
L8068:
 dq 144115188075855874
 dq L8070
 dq L8071
 align 8
L8071:
 dq 144115188075855874
 dq L8072
 dq L8073
L8073 equ null
 align 8
L8072:
 dq 144115188075855874
 dq L8074
 dq L8075
 align 8
L8075:
 dq 144115188075855874
 dq L8076
 dq L8077
 align 8
L8077:
 dq 144115188075855874
 dq L8078
 dq L8079
L8079 equ null
 align 8
L8078:
 dq 144115188075855874
 dq L8080
 dq L8081
 align 8
L8081:
 dq 144115188075855874
 dq L8082
 dq L8083
 align 8
L8083:
 dq 144115188075855874
 dq L8084
 dq L8085
 align 8
L8085:
 dq 144115188075855874
 dq L8086
 dq L8087
L8087 equ null
 align 8
L8086:
 dq 144115188075855874
 dq L8088
 dq L8089
 align 8
L8089:
 dq 72057594037927937
 dq L8090
L8088 equ L4727
L8084 equ L6768
L8082 equ L6768
L8080 equ L4712
 align 8
L8076:
 dq 144115188075855874
 dq L8091
 dq L8092
L8092 equ null
 align 8
L8091:
 dq 144115188075855874
 dq L8093
 dq L8094
 align 8
L8094:
 dq 144115188075855874
 dq L8095
 dq L8096
L8096 equ null
 align 8
L8095:
 dq 72057594037927937
 dq L8097
L8093 equ L6768
L8074 equ L4730
 align 8
L8070:
 dq 144115188075855874
 dq L8098
 dq L8099
 align 8
L8099:
 dq 144115188075855874
 dq L8100
 dq L8101
L8101 equ L8089
L8100 equ L8095
L8098 equ L6721
 align 8
L8066:
 dq 144115188075855874
 dq L8102
 dq L8103
 align 8
L8103:
 dq 144115188075855874
 dq L8104
 dq L8105
L8105 equ null
 align 8
L8104:
 dq 144115188075855874
 dq L8106
 dq L8107
 align 8
L8107:
 dq 144115188075855874
 dq L8108
 dq L8109
 align 8
L8109:
 dq 144115188075855874
 dq L8110
 dq L8111
L8111 equ null
L8110 equ L8095
L8108 equ null
L8106 equ L4730
 align 8
L8102:
 dq 144115188075855874
 dq L8112
 dq L8113
 align 8
L8113:
 dq 144115188075855874
 dq L8114
 dq L8115
L8115 equ null
L8114 equ L8095
L8112 equ L6721
 align 8
L8064:
 dq 144115188075855874
 dq L8116
 dq L8117
 align 8
L8117:
 dq 144115188075855874
 dq L8118
 dq L8119
L8119 equ null
L8118 equ false
 align 8
L8116:
 dq 144115188075855874
 dq L8120
 dq L8121
L8121 equ null
L8120 equ L6721
L8062 equ null
L8060 equ L4485
L8056 equ L4727
L8054 equ L4496
 align 8
L8017:
 dq 144115188075855874
 dq L8122
 dq L8123
 align 8
L8123:
 dq 144115188075855874
 dq L8124
 dq L8125
 align 8
L8125:
 dq 144115188075855874
 dq L8126
 dq L8127
L8127 equ null
 align 8
L8126:
 dq 144115188075855874
 dq L8128
 dq L8129
 align 8
L8129:
 dq 144115188075855874
 dq L8130
 dq L8131
 align 8
L8131:
 dq 144115188075855874
 dq L8132
 dq L8133
 align 8
L8133:
 dq 144115188075855874
 dq L8134
 dq L8135
 align 8
L8135:
 dq 144115188075855874
 dq L8136
 dq L8137
L8137 equ null
 align 8
L8136:
 dq 144115188075855874
 dq L8138
 dq L8139
 align 8
L8139:
 dq 144115188075855874
 dq L8140
 dq L8141
L8141 equ null
 align 8
L8140:
 dq 144115188075855874
 dq L8142
 dq L8143
 align 8
L8143:
 dq 144115188075855874
 dq L8144
 dq L8145
 align 8
L8145:
 dq 144115188075855874
 dq L8146
 dq L8147
 align 8
L8147:
 dq 144115188075855874
 dq L8148
 dq L8149
L8149 equ null
L8148 equ false
 align 8
L8146:
 dq 144115188075855874
 dq L8150
 dq L8151
L8151 equ L8089
L8150 equ L4724
L8144 equ L8095
L8142 equ L4712
 align 8
L8138:
 dq 144115188075855874
 dq L8152
 dq L8153
 align 8
L8153:
 dq 144115188075855874
 dq L8154
 dq L8155
L8155 equ L8089
L8154 equ L8095
L8152 equ L6721
 align 8
L8134:
 dq 144115188075855874
 dq L8156
 dq L8157
 align 8
L8157:
 dq 144115188075855874
 dq L8158
 dq L8159
L8159 equ null
 align 8
L8158:
 dq 144115188075855874
 dq L8160
 dq L8161
 align 8
L8161:
 dq 144115188075855874
 dq L8162
 dq L8163
 align 8
L8163:
 dq 144115188075855874
 dq L8164
 dq L8165
L8165 equ null
L8164 equ L8095
L8162 equ null
L8160 equ L4730
 align 8
L8156:
 dq 144115188075855874
 dq L8166
 dq L8167
 align 8
L8167:
 dq 144115188075855874
 dq L8168
 dq L8169
L8169 equ null
L8168 equ L8095
L8166 equ L6721
 align 8
L8132:
 dq 144115188075855874
 dq L8170
 dq L8171
 align 8
L8171:
 dq 144115188075855874
 dq L8172
 dq L8173
L8173 equ null
L8172 equ true
 align 8
L8170:
 dq 144115188075855874
 dq L8174
 dq L8175
L8175 equ null
L8174 equ L6721
L8130 equ null
L8128 equ L4485
L8124 equ L4724
L8122 equ L4496
 align 8
L8015:
 dq 144115188075855874
 dq L8176
 dq L8177
 align 8
L8177:
 dq 144115188075855874
 dq L8178
 dq L8179
 align 8
L8179:
 dq 144115188075855874
 dq L8180
 dq L8181
L8181 equ null
 align 8
L8180:
 dq 144115188075855874
 dq L8182
 dq L8183
 align 8
L8183:
 dq 144115188075855874
 dq L8184
 dq L8185
 align 8
L8185:
 dq 144115188075855874
 dq L8186
 dq L8187
 align 8
L8187:
 dq 144115188075855874
 dq L8188
 dq L8189
 align 8
L8189:
 dq 144115188075855874
 dq L8190
 dq L8191
 align 8
L8191:
 dq 144115188075855874
 dq L8192
 dq L8193
 align 8
L8193:
 dq 144115188075855874
 dq L8194
 dq L8195
 align 8
L8195:
 dq 144115188075855874
 dq L8196
 dq L8197
L8197 equ null
 align 8
L8196:
 dq 144115188075855874
 dq L8198
 dq L8199
 align 8
L8199:
 dq 144115188075855874
 dq L8200
 dq L8201
L8201 equ null
 align 8
L8200:
 dq 144115188075855874
 dq L8202
 dq L8203
 align 8
L8203:
 dq 144115188075855874
 dq L8204
 dq L8205
 align 8
L8205:
 dq 144115188075855874
 dq L8206
 dq L8207
 align 8
L8207:
 dq 144115188075855874
 dq L8208
 dq L8209
L8209 equ null
 align 8
L8208:
 dq 144115188075855874
 dq L8210
 dq L8211
 align 8
L8211:
 dq 72057594037927937
 dq L8212
L8210 equ L4718
 align 8
L8206:
 dq 144115188075855874
 dq L8213
 dq L8214
 align 8
L8214:
 dq 72057594037927937
 dq L8215
L8213 equ L5163
L8204 equ L6768
L8202 equ L4712
 align 8
L8198:
 dq 144115188075855874
 dq L8216
 dq L8217
 align 8
L8217:
 dq 144115188075855874
 dq L8218
 dq L8219
L8219 equ L8211
 align 8
L8218:
 dq 144115188075855874
 dq L8220
 dq L8221
L8221 equ L8214
L8220 equ L6768
L8216 equ L6721
 align 8
L8194:
 dq 144115188075855874
 dq L8222
 dq L8223
 align 8
L8223:
 dq 144115188075855874
 dq L8224
 dq L8225
L8225 equ null
 align 8
L8224:
 dq 144115188075855874
 dq L8226
 dq L8227
 align 8
L8227:
 dq 144115188075855874
 dq L8228
 dq L8229
 align 8
L8229:
 dq 144115188075855874
 dq L8230
 dq L8231
L8231 equ null
 align 8
L8230:
 dq 144115188075855874
 dq L8232
 dq L8233
 align 8
L8233:
 dq 144115188075855874
 dq L8234
 dq L8235
L8235 equ L8211
 align 8
L8234:
 dq 144115188075855874
 dq L8236
 dq L8237
 align 8
L8237:
 dq 144115188075855874
 dq L8238
 dq L8239
L8239 equ null
 align 8
L8238:
 dq 144115188075855874
 dq L8240
 dq L8241
 align 8
L8241:
 dq 144115188075855874
 dq L8242
 dq L8243
L8243 equ null
 align 8
L8242:
 dq 72057594037927937
 dq L8244
 align 8
L8240:
 dq 72057594037927937
 dq L8245
 align 8
L8236:
 dq 144115188075855874
 dq L8246
 dq L8247
 align 8
L8247:
 dq 144115188075855874
 dq L8248
 dq L8249
L8249 equ null
L8248 equ L8242
 align 8
L8246:
 dq 72057594037927937
 dq L8250
L8232 equ L4718
 align 8
L8228:
 dq 144115188075855874
 dq L8251
 dq L8252
L8252 equ null
 align 8
L8251:
 dq 144115188075855874
 dq L8253
 dq L8254
 align 8
L8254:
 dq 144115188075855874
 dq L8255
 dq L8256
L8256 equ null
 align 8
L8255:
 dq 72057594037927937
 dq L8257
L8253 equ L8242
L8226 equ L4730
 align 8
L8222:
 dq 144115188075855874
 dq L8258
 dq L8259
 align 8
L8259:
 dq 144115188075855874
 dq L8260
 dq L8261
L8261 equ L8211
 align 8
L8260:
 dq 144115188075855874
 dq L8262
 dq L8263
 align 8
L8263:
 dq 144115188075855874
 dq L8264
 dq L8265
 align 8
L8265:
 dq 144115188075855874
 dq L8266
 dq L8267
 align 8
L8267:
 dq 144115188075855874
 dq L8268
 dq L8269
L8269 equ null
L8268 equ L8240
 align 8
L8266:
 dq 72057594037927937
 dq L8270
L8264 equ L8246
L8262 equ L8255
L8258 equ L6721
 align 8
L8192:
 dq 144115188075855874
 dq L8271
 dq L8272
 align 8
L8272:
 dq 144115188075855874
 dq L8273
 dq L8274
L8274 equ null
 align 8
L8273:
 dq 144115188075855874
 dq L8275
 dq L8276
 align 8
L8276:
 dq 144115188075855874
 dq L8277
 dq L8278
 align 8
L8278:
 dq 144115188075855874
 dq L8279
 dq L8280
L8280 equ null
 align 8
L8279:
 dq 144115188075855874
 dq L8281
 dq L8282
 align 8
L8282:
 dq 144115188075855874
 dq L8283
 dq L8284
L8284 equ L8211
 align 8
L8283:
 dq 144115188075855874
 dq L8285
 dq L8286
 align 8
L8286:
 dq 144115188075855874
 dq L8287
 dq L8288
L8288 equ null
 align 8
L8287:
 dq 144115188075855874
 dq L8289
 dq L8290
 align 8
L8290:
 dq 144115188075855874
 dq L8291
 dq L8292
L8292 equ null
L8291 equ L8242
 align 8
L8289:
 dq 72057594037927937
 dq L8293
L8285 equ L8242
L8281 equ L4718
 align 8
L8277:
 dq 144115188075855874
 dq L8294
 dq L8295
L8295 equ null
 align 8
L8294:
 dq 144115188075855874
 dq L8296
 dq L8297
 align 8
L8297:
 dq 144115188075855874
 dq L8298
 dq L8299
L8299 equ null
L8298 equ L6768
L8296 equ L8242
L8275 equ L4730
 align 8
L8271:
 dq 144115188075855874
 dq L8300
 dq L8301
 align 8
L8301:
 dq 144115188075855874
 dq L8302
 dq L8303
L8303 equ L8211
 align 8
L8302:
 dq 144115188075855874
 dq L8304
 dq L8305
 align 8
L8305:
 dq 144115188075855874
 dq L8306
 dq L8307
 align 8
L8307:
 dq 144115188075855874
 dq L8308
 dq L8309
L8309 equ null
L8308 equ L8289
L8306 equ L8266
L8304 equ L6768
L8300 equ L6721
 align 8
L8190:
 dq 144115188075855874
 dq L8310
 dq L8311
 align 8
L8311:
 dq 144115188075855874
 dq L8312
 dq L8313
L8313 equ null
 align 8
L8312:
 dq 144115188075855874
 dq L8314
 dq L8315
 align 8
L8315:
 dq 144115188075855874
 dq L8316
 dq L8317
 align 8
L8317:
 dq 144115188075855874
 dq L8318
 dq L8319
L8319 equ null
 align 8
L8318:
 dq 144115188075855874
 dq L8320
 dq L8321
L8321 equ L8211
L8320 equ L4718
L8316 equ L6768
L8314 equ L4727
 align 8
L8310:
 dq 144115188075855874
 dq L8322
 dq L8323
 align 8
L8323:
 dq 144115188075855874
 dq L8324
 dq L8325
L8325 equ L8211
 align 8
L8324:
 dq 144115188075855874
 dq L8326
 dq L8327
L8327 equ null
L8326 equ L6768
L8322 equ L6721
 align 8
L8188:
 dq 144115188075855874
 dq L8328
 dq L8329
 align 8
L8329:
 dq 144115188075855874
 dq L8330
 dq L8331
L8331 equ null
 align 8
L8330:
 dq 144115188075855874
 dq L8332
 dq L8333
 align 8
L8333:
 dq 144115188075855874
 dq L8334
 dq L8335
 align 8
L8335:
 dq 144115188075855874
 dq L8336
 dq L8337
L8337 equ null
 align 8
L8336:
 dq 144115188075855874
 dq L8338
 dq L8339
L8339 equ L8214
L8338 equ L5163
L8334 equ null
L8332 equ L4730
 align 8
L8328:
 dq 144115188075855874
 dq L8340
 dq L8341
 align 8
L8341:
 dq 144115188075855874
 dq L8342
 dq L8343
L8343 equ null
 align 8
L8342:
 dq 144115188075855874
 dq L8344
 dq L8345
L8345 equ L8214
L8344 equ L1477
L8340 equ L6721
 align 8
L8186:
 dq 144115188075855874
 dq L8346
 dq L8347
 align 8
L8347:
 dq 144115188075855874
 dq L8348
 dq L8349
L8349 equ null
L8348 equ false
 align 8
L8346:
 dq 144115188075855874
 dq L8350
 dq L8351
L8351 equ null
L8350 equ L6721
 align 8
L8184:
 dq 144115188075855874
 dq L8352
 dq L8353
 align 8
L8353:
 dq 144115188075855874
 dq L8354
 dq L8355
L8355 equ null
L8354 equ L8266
L8352 equ L1477
L8182 equ L4485
L8178 equ L4718
L8176 equ L4496
 align 8
L8013:
 dq 144115188075855874
 dq L8356
 dq L8357
 align 8
L8357:
 dq 144115188075855874
 dq L8358
 dq L8359
 align 8
L8359:
 dq 144115188075855874
 dq L8360
 dq L8361
L8361 equ null
 align 8
L8360:
 dq 144115188075855874
 dq L8362
 dq L8363
 align 8
L8363:
 dq 144115188075855874
 dq L8364
 dq L8365
 align 8
L8365:
 dq 144115188075855874
 dq L8366
 dq L8367
L8367 equ null
 align 8
L8366:
 dq 144115188075855874
 dq L8368
 dq L8369
 align 8
L8369:
 dq 144115188075855874
 dq L8370
 dq L8371
 align 8
L8371:
 dq 144115188075855874
 dq L8372
 dq L8373
L8373 equ null
 align 8
L8372:
 dq 144115188075855874
 dq L8374
 dq L8375
 align 8
L8375:
 dq 144115188075855874
 dq L8376
 dq L8377
L8377 equ null
 align 8
L8376:
 dq 144115188075855874
 dq L8378
 dq L8379
 align 8
L8379:
 dq 144115188075855874
 dq L8380
 dq L8381
 align 8
L8381:
 dq 144115188075855874
 dq L8382
 dq L8383
L8383 equ null
 align 8
L8382:
 dq 144115188075855874
 dq L8384
 dq L8385
 align 8
L8385:
 dq 144115188075855874
 dq L8386
 dq L8387
 align 8
L8387:
 dq 144115188075855874
 dq L8388
 dq L8389
 align 8
L8389:
 dq 144115188075855874
 dq L8390
 dq L8391
 align 8
L8391:
 dq 144115188075855874
 dq L8392
 dq L8393
L8393 equ null
L8392 equ L4394
 align 8
L8390:
 dq 72057594037927937
 dq L8394
 align 8
L8388:
 dq 72057594037927937
 dq L8395
 align 8
L8386:
 dq 72057594037927937
 dq L8396
L8384 equ L4721
 align 8
L8380:
 dq 144115188075855874
 dq L8397
 dq L8398
L8398 equ null
 align 8
L8397:
 dq 144115188075855874
 dq L8399
 dq L8400
 align 8
L8400:
 dq 144115188075855874
 dq L8401
 dq L8402
L8402 equ null
L8401 equ L7295
L8399 equ L8386
L8378 equ L4730
 align 8
L8374:
 dq 144115188075855874
 dq L8403
 dq L8404
 align 8
L8404:
 dq 144115188075855874
 dq L8405
 dq L8406
 align 8
L8406:
 dq 144115188075855874
 dq L8407
 dq L8408
 align 8
L8408:
 dq 144115188075855874
 dq L8409
 dq L8410
 align 8
L8410:
 dq 144115188075855874
 dq L8411
 dq L8412
L8412 equ null
L8411 equ L4394
L8409 equ L8390
L8407 equ L8388
L8405 equ L7295
L8403 equ L6721
L8370 equ null
L8368 equ L4485
 align 8
L8364:
 dq 144115188075855874
 dq L8413
 dq L8414
 align 8
L8414:
 dq 144115188075855874
 dq L8415
 dq L8416
L8416 equ null
 align 8
L8415:
 dq 144115188075855874
 dq L8417
 dq L8418
 align 8
L8418:
 dq 144115188075855874
 dq L8419
 dq L8420
L8420 equ null
 align 8
L8419:
 dq 144115188075855874
 dq L8421
 dq L8422
 align 8
L8422:
 dq 144115188075855874
 dq L8423
 dq L8424
 align 8
L8424:
 dq 144115188075855874
 dq L8425
 dq L8426
 align 8
L8426:
 dq 144115188075855874
 dq L8427
 dq L8428
 align 8
L8428:
 dq 144115188075855874
 dq L8429
 dq L8430
L8430 equ null
 align 8
L8429:
 dq 144115188075855874
 dq L8431
 dq L8432
 align 8
L8432:
 dq 144115188075855874
 dq L8433
 dq L8434
L8434 equ null
 align 8
L8433:
 dq 144115188075855874
 dq L8435
 dq L8436
 align 8
L8436:
 dq 144115188075855874
 dq L8437
 dq L8438
 align 8
L8438:
 dq 144115188075855874
 dq L8439
 dq L8440
 align 8
L8440:
 dq 144115188075855874
 dq L8441
 dq L8442
L8442 equ null
 align 8
L8441:
 dq 144115188075855874
 dq L8443
 dq L8444
 align 8
L8444:
 dq 144115188075855874
 dq L8445
 dq L8446
 align 8
L8446:
 dq 72057594037927937
 dq L8447
L8445 equ L8386
L8443 equ L4721
 align 8
L8439:
 dq 144115188075855874
 dq L8448
 dq L8449
 align 8
L8449:
 dq 144115188075855874
 dq L8450
 dq L8451
 align 8
L8451:
 dq 72057594037927937
 dq L8452
 align 8
L8450:
 dq 72057594037927937
 dq L8453
L8448 equ L5163
 align 8
L8437:
 dq 144115188075855874
 dq L8454
 dq L8455
 align 8
L8455:
 dq 144115188075855874
 dq L8456
 dq L8457
 align 8
L8457:
 dq 144115188075855874
 dq L8458
 dq L8459
L8459 equ null
 align 8
L8458:
 dq 144115188075855874
 dq L8460
 dq L8461
 align 8
L8461:
 dq 144115188075855874
 dq L8462
 dq L8463
L8463 equ null
L8462 equ L4394
 align 8
L8460:
 dq 72057594037927937
 dq L8464
L8456 equ L8386
 align 8
L8454:
 dq 72057594037927937
 dq L8465
L8435 equ L4712
 align 8
L8431:
 dq 144115188075855874
 dq L8466
 dq L8467
 align 8
L8467:
 dq 144115188075855874
 dq L8468
 dq L8469
 align 8
L8469:
 dq 144115188075855874
 dq L8470
 dq L8471
L8471 equ L8446
 align 8
L8470:
 dq 144115188075855874
 dq L8472
 dq L8473
 align 8
L8473:
 dq 144115188075855874
 dq L8474
 dq L8475
L8475 equ L8451
L8474 equ L8450
 align 8
L8472:
 dq 144115188075855874
 dq L8476
 dq L8477
 align 8
L8477:
 dq 144115188075855874
 dq L8478
 dq L8479
L8479 equ null
L8478 equ L4394
L8476 equ L8460
L8468 equ L8386
L8466 equ L4721
 align 8
L8427:
 dq 144115188075855874
 dq L8480
 dq L8481
 align 8
L8481:
 dq 144115188075855874
 dq L8482
 dq L8483
L8483 equ null
 align 8
L8482:
 dq 144115188075855874
 dq L8484
 dq L8485
 align 8
L8485:
 dq 144115188075855874
 dq L8486
 dq L8487
L8487 equ L8451
L8486 equ L8450
L8484 equ L5163
 align 8
L8480:
 dq 144115188075855874
 dq L8488
 dq L8489
 align 8
L8489:
 dq 144115188075855874
 dq L8490
 dq L8491
 align 8
L8491:
 dq 144115188075855874
 dq L8492
 dq L8493
L8493 equ null
 align 8
L8492:
 dq 144115188075855874
 dq L8494
 dq L8495
 align 8
L8495:
 dq 144115188075855874
 dq L8496
 dq L8497
L8497 equ L8451
L8496 equ L8450
L8494 equ L1477
L8490 equ L8386
L8488 equ L4721
 align 8
L8425:
 dq 144115188075855874
 dq L8498
 dq L8499
 align 8
L8499:
 dq 144115188075855874
 dq L8500
 dq L8501
L8501 equ null
L8500 equ false
 align 8
L8498:
 dq 144115188075855874
 dq L8502
 dq L8503
 align 8
L8503:
 dq 144115188075855874
 dq L8504
 dq L8505
L8505 equ null
L8504 equ L8386
L8502 equ L4721
 align 8
L8423:
 dq 144115188075855874
 dq L8506
 dq L8507
L8507 equ null
L8506 equ L1477
L8421 equ L4485
L8417 equ L4721
 align 8
L8413:
 dq 144115188075855874
 dq L8508
 dq L8509
 align 8
L8509:
 dq 144115188075855874
 dq L8510
 dq L8511
L8511 equ null
 align 8
L8510:
 dq 144115188075855874
 dq L8512
 dq L8513
 align 8
L8513:
 dq 144115188075855874
 dq L8514
 dq L8515
 align 8
L8515:
 dq 144115188075855874
 dq L8516
 dq L8517
 align 8
L8517:
 dq 144115188075855874
 dq L8518
 dq L8519
L8519 equ null
 align 8
L8518:
 dq 144115188075855874
 dq L8520
 dq L8521
 align 8
L8521:
 dq 144115188075855874
 dq L8522
 dq L8523
L8523 equ null
 align 8
L8522:
 dq 144115188075855874
 dq L8524
 dq L8525
 align 8
L8525:
 dq 144115188075855874
 dq L8526
 dq L8527
 align 8
L8527:
 dq 144115188075855874
 dq L8528
 dq L8529
 align 8
L8529:
 dq 144115188075855874
 dq L8530
 dq L8531
L8531 equ null
 align 8
L8530:
 dq 144115188075855874
 dq L8532
 dq L8533
 align 8
L8533:
 dq 144115188075855874
 dq L8534
 dq L8535
 align 8
L8535:
 dq 144115188075855874
 dq L8536
 dq L8537
L8537 equ null
 align 8
L8536:
 dq 72057594037927937
 dq L8538
L8534 equ L8386
L8532 equ L8454
L8528 equ true
 align 8
L8526:
 dq 144115188075855874
 dq L8539
 dq L8540
 align 8
L8540:
 dq 144115188075855874
 dq L8541
 dq L8542
 align 8
L8542:
 dq 144115188075855874
 dq L8543
 dq L8544
L8544 equ null
 align 8
L8543:
 dq 144115188075855874
 dq L8545
 dq L8546
 align 8
L8546:
 dq 144115188075855874
 dq L8547
 dq L8548
L8548 equ null
L8547 equ L8460
L8545 equ L5601
L8541 equ L8386
 align 8
L8539:
 dq 72057594037927937
 dq L8549
L8524 equ L4712
 align 8
L8520:
 dq 144115188075855874
 dq L8550
 dq L8551
 align 8
L8551:
 dq 144115188075855874
 dq L8552
 dq L8553
 align 8
L8553:
 dq 144115188075855874
 dq L8554
 dq L8555
L8555 equ null
 align 8
L8554:
 dq 144115188075855874
 dq L8556
 dq L8557
L8557 equ L8536
L8556 equ L8460
L8552 equ L8386
L8550 equ L6721
 align 8
L8516:
 dq 144115188075855874
 dq L8558
 dq L8559
 align 8
L8559:
 dq 144115188075855874
 dq L8560
 dq L8561
L8561 equ null
L8560 equ false
 align 8
L8558:
 dq 144115188075855874
 dq L8562
 dq L8563
 align 8
L8563:
 dq 144115188075855874
 dq L8564
 dq L8565
 align 8
L8565:
 dq 144115188075855874
 dq L8566
 dq L8567
L8567 equ null
L8566 equ null
L8564 equ L8386
L8562 equ L6721
L8514 equ null
L8512 equ L4485
L8508 equ L8454
 align 8
L8362:
 dq 72057594037927937
 dq L8568
L8358 equ L4721
L8356 equ L4496
 align 8
L8011:
 dq 144115188075855874
 dq L8569
 dq L8570
 align 8
L8570:
 dq 144115188075855874
 dq L8571
 dq L8572
 align 8
L8572:
 dq 144115188075855874
 dq L8573
 dq L8574
L8574 equ null
 align 8
L8573:
 dq 144115188075855874
 dq L8575
 dq L8576
 align 8
L8576:
 dq 144115188075855874
 dq L8577
 dq L8578
 align 8
L8578:
 dq 144115188075855874
 dq L8579
 dq L8580
L8580 equ null
 align 8
L8579:
 dq 144115188075855874
 dq L8581
 dq L8582
 align 8
L8582:
 dq 144115188075855874
 dq L8583
 dq L8584
 align 8
L8584:
 dq 144115188075855874
 dq L8585
 dq L8586
L8586 equ null
 align 8
L8585:
 dq 144115188075855874
 dq L8587
 dq L8588
 align 8
L8588:
 dq 144115188075855874
 dq L8589
 dq L8590
L8590 equ null
 align 8
L8589:
 dq 144115188075855874
 dq L8591
 dq L8592
 align 8
L8592:
 dq 144115188075855874
 dq L8593
 dq L8594
 align 8
L8594:
 dq 144115188075855874
 dq L8595
 dq L8596
 align 8
L8596:
 dq 144115188075855874
 dq L8597
 dq L8598
L8598 equ null
 align 8
L8597:
 dq 144115188075855874
 dq L8599
 dq L8600
 align 8
L8600:
 dq 144115188075855874
 dq L8601
 dq L8602
 align 8
L8602:
 dq 144115188075855874
 dq L8603
 dq L8604
 align 8
L8604:
 dq 144115188075855874
 dq L8605
 dq L8606
L8606 equ null
 align 8
L8605:
 dq 144115188075855874
 dq L8607
 dq L8608
 align 8
L8608:
 dq 144115188075855874
 dq L8609
 dq L8610
 align 8
L8610:
 dq 144115188075855874
 dq L8611
 dq L8612
 align 8
L8612:
 dq 144115188075855874
 dq L8613
 dq L8614
 align 8
L8614:
 dq 144115188075855874
 dq L8615
 dq L8616
L8616 equ null
 align 8
L8615:
 dq 144115188075855874
 dq L8617
 dq L8618
 align 8
L8618:
 dq 144115188075855874
 dq L8619
 dq L8620
 align 8
L8620:
 dq 144115188075855874
 dq L8621
 dq L8622
L8622 equ null
L8621 equ L4394
 align 8
L8619:
 dq 144115188075855874
 dq L8623
 dq L8624
 align 8
L8624:
 dq 144115188075855874
 dq L8625
 dq L8626
 align 8
L8626:
 dq 144115188075855874
 dq L8627
 dq L8628
 align 8
L8628:
 dq 144115188075855874
 dq L8629
 dq L8630
L8630 equ null
L8629 equ L4394
 align 8
L8627:
 dq 72057594037927937
 dq L8631
 align 8
L8625:
 dq 72057594037927937
 dq L8632
 align 8
L8623:
 dq 72057594037927937
 dq L8633
 align 8
L8617:
 dq 72057594037927937
 dq L8634
L8613 equ L4394
 align 8
L8611:
 dq 72057594037927937
 dq L8635
L8609 equ null
L8607 equ L4730
 align 8
L8603:
 dq 144115188075855874
 dq L8636
 dq L8637
 align 8
L8637:
 dq 144115188075855874
 dq L8638
 dq L8639
 align 8
L8639:
 dq 144115188075855874
 dq L8640
 dq L8641
 align 8
L8641:
 dq 144115188075855874
 dq L8642
 dq L8643
L8643 equ null
L8642 equ L4394
L8640 equ L7295
L8638 equ false
L8636 equ L5163
L8601 equ L8095
L8599 equ L4712
 align 8
L8595:
 dq 144115188075855874
 dq L8644
 dq L8645
 align 8
L8645:
 dq 144115188075855874
 dq L8646
 dq L8647
L8647 equ null
L8646 equ L4394
 align 8
L8644:
 dq 144115188075855874
 dq L8648
 dq L8649
 align 8
L8649:
 dq 144115188075855874
 dq L8650
 dq L8651
L8651 equ null
 align 8
L8650:
 dq 72057594037927937
 dq L8652
L8648 equ L8625
L8593 equ L8617
L8591 equ L4730
 align 8
L8587:
 dq 144115188075855874
 dq L8653
 dq L8654
 align 8
L8654:
 dq 144115188075855874
 dq L8655
 dq L8656
 align 8
L8656:
 dq 144115188075855874
 dq L8657
 dq L8658
 align 8
L8658:
 dq 144115188075855874
 dq L8659
 dq L8660
 align 8
L8660:
 dq 144115188075855874
 dq L8661
 dq L8662
L8662 equ null
L8661 equ L4394
L8659 equ L8611
 align 8
L8657:
 dq 144115188075855874
 dq L8663
 dq L8664
 align 8
L8664:
 dq 144115188075855874
 dq L8665
 dq L8666
 align 8
L8666:
 dq 144115188075855874
 dq L8667
 dq L8668
L8668 equ null
L8667 equ L4394
L8665 equ L7295
L8663 equ L8095
 align 8
L8655:
 dq 144115188075855874
 dq L8669
 dq L8670
 align 8
L8670:
 dq 144115188075855874
 dq L8671
 dq L8672
L8672 equ null
L8671 equ L4394
 align 8
L8669:
 dq 144115188075855874
 dq L8673
 dq L8674
 align 8
L8674:
 dq 144115188075855874
 dq L8675
 dq L8676
 align 8
L8676:
 dq 144115188075855874
 dq L8677
 dq L8678
 align 8
L8678:
 dq 144115188075855874
 dq L8679
 dq L8680
L8680 equ null
L8679 equ L4394
L8677 equ L8627
L8675 equ L8650
L8673 equ L8625
L8653 equ L6721
L8583 equ null
L8581 equ L4485
 align 8
L8577:
 dq 144115188075855874
 dq L8681
 dq L8682
L8682 equ null
 align 8
L8681:
 dq 144115188075855874
 dq L8683
 dq L8684
 align 8
L8684:
 dq 144115188075855874
 dq L8685
 dq L8686
L8686 equ null
 align 8
L8685:
 dq 144115188075855874
 dq L8687
 dq L8688
 align 8
L8688:
 dq 144115188075855874
 dq L8689
 dq L8690
 align 8
L8690:
 dq 144115188075855874
 dq L8691
 dq L8692
 align 8
L8692:
 dq 144115188075855874
 dq L8693
 dq L8694
L8694 equ null
 align 8
L8693:
 dq 144115188075855874
 dq L8695
 dq L8696
 align 8
L8696:
 dq 144115188075855874
 dq L8697
 dq L8698
L8698 equ null
L8697 equ L6770
 align 8
L8695:
 dq 144115188075855874
 dq L8699
 dq L8700
 align 8
L8700:
 dq 144115188075855874
 dq L8701
 dq L8702
 align 8
L8702:
 dq 144115188075855874
 dq L8703
 dq L8704
L8704 equ null
L8703 equ L6770
L8701 equ L6768
L8699 equ L6721
 align 8
L8691:
 dq 144115188075855874
 dq L8705
 dq L8706
 align 8
L8706:
 dq 144115188075855874
 dq L8707
 dq L8708
L8708 equ null
L8707 equ L6768
 align 8
L8705:
 dq 144115188075855874
 dq L8709
 dq L8710
 align 8
L8710:
 dq 144115188075855874
 dq L8711
 dq L8712
L8712 equ null
L8711 equ L6768
L8709 equ L6721
L8689 equ null
L8687 equ L4485
L8683 equ L8623
L8575 equ L4482
L8571 equ L4736
L8569 equ L4496
 align 8
L8009:
 dq 144115188075855874
 dq L8713
 dq L8714
 align 8
L8714:
 dq 144115188075855874
 dq L8715
 dq L8716
 align 8
L8716:
 dq 144115188075855874
 dq L8717
 dq L8718
L8718 equ null
 align 8
L8717:
 dq 144115188075855874
 dq L8719
 dq L8720
 align 8
L8720:
 dq 144115188075855874
 dq L8721
 dq L8722
 align 8
L8722:
 dq 144115188075855874
 dq L8723
 dq L8724
L8724 equ null
 align 8
L8723:
 dq 144115188075855874
 dq L8725
 dq L8726
 align 8
L8726:
 dq 144115188075855874
 dq L8727
 dq L8728
L8728 equ null
 align 8
L8727:
 dq 144115188075855874
 dq L8729
 dq L8730
 align 8
L8730:
 dq 144115188075855874
 dq L8731
 dq L8732
 align 8
L8732:
 dq 144115188075855874
 dq L8733
 dq L8734
L8734 equ null
 align 8
L8733:
 dq 144115188075855874
 dq L8735
 dq L8736
 align 8
L8736:
 dq 144115188075855874
 dq L8737
 dq L8738
 align 8
L8738:
 dq 144115188075855874
 dq L8739
 dq L8740
L8740 equ null
 align 8
L8739:
 dq 144115188075855874
 dq L8741
 dq L8742
 align 8
L8742:
 dq 144115188075855874
 dq L8743
 dq L8744
 align 8
L8744:
 dq 144115188075855874
 dq L8745
 dq L8746
 align 8
L8746:
 dq 144115188075855874
 dq L8747
 dq L8748
L8748 equ null
 align 8
L8747:
 dq 144115188075855874
 dq L8749
 dq L8750
L8750 equ null
 align 8
L8749:
 dq 72057594037927937
 dq L8751
L8745 equ L4394
 align 8
L8743:
 dq 144115188075855874
 dq L8752
 dq L8753
L8753 equ null
L8752 equ L8625
L8741 equ L5163
 align 8
L8737:
 dq 144115188075855874
 dq L8754
 dq L8755
 align 8
L8755:
 dq 144115188075855874
 dq L8756
 dq L8757
 align 8
L8757:
 dq 144115188075855874
 dq L8758
 dq L8759
L8759 equ null
 align 8
L8758:
 dq 144115188075855874
 dq L8760
 dq L8761
 align 8
L8761:
 dq 144115188075855874
 dq L8762
 dq L8763
L8763 equ null
 align 8
L8762:
 dq 144115188075855874
 dq L8764
 dq L8765
 align 8
L8765:
 dq 144115188075855874
 dq L8766
 dq L8767
L8767 equ L6224
L8766 equ null
L8764 equ L4700
L8760 equ L8749
L8756 equ L4394
 align 8
L8754:
 dq 144115188075855874
 dq L8768
 dq L8769
 align 8
L8769:
 dq 144115188075855874
 dq L8770
 dq L8771
L8771 equ null
 align 8
L8770:
 dq 144115188075855874
 dq L8772
 dq L8773
 align 8
L8773:
 dq 144115188075855874
 dq L8774
 dq L8775
 align 8
L8775:
 dq 144115188075855874
 dq L8776
 dq L8777
L8777 equ null
 align 8
L8776:
 dq 144115188075855874
 dq L8778
 dq L8779
 align 8
L8779:
 dq 144115188075855874
 dq L8780
 dq L8781
 align 8
L8781:
 dq 144115188075855874
 dq L8782
 dq L8783
L8783 equ null
 align 8
L8782:
 dq 144115188075855874
 dq L8784
 dq L8785
 align 8
L8785:
 dq 144115188075855874
 dq L8786
 dq L8787
 align 8
L8787:
 dq 144115188075855874
 dq L8788
 dq L8789
L8789 equ null
L8788 equ L8242
L8786 equ L8625
L8784 equ L4715
L8780 equ null
L8778 equ L4700
 align 8
L8774:
 dq 144115188075855874
 dq L8790
 dq L8791
L8791 equ null
 align 8
L8790:
 dq 144115188075855874
 dq L8792
 dq L8793
 align 8
L8793:
 dq 144115188075855874
 dq L8794
 dq L8795
L8795 equ null
L8794 equ L8650
L8792 equ L8242
L8772 equ L4730
L8768 equ L8625
L8735 equ L4730
 align 8
L8731:
 dq 144115188075855874
 dq L8796
 dq L8797
 align 8
L8797:
 dq 144115188075855874
 dq L8798
 dq L8799
L8799 equ null
L8798 equ L4394
 align 8
L8796:
 dq 144115188075855874
 dq L8800
 dq L8801
 align 8
L8801:
 dq 144115188075855874
 dq L8802
 dq L8803
L8803 equ null
 align 8
L8802:
 dq 144115188075855874
 dq L8804
 dq L8805
L8805 equ null
L8804 equ L6116
L8800 equ L8625
L8729 equ L4730
 align 8
L8725:
 dq 144115188075855874
 dq L8806
 dq L8807
 align 8
L8807:
 dq 144115188075855874
 dq L8808
 dq L8809
L8809 equ L6224
 align 8
L8808:
 dq 144115188075855874
 dq L8810
 dq L8811
 align 8
L8811:
 dq 144115188075855874
 dq L8812
 dq L8813
L8813 equ null
L8812 equ L4394
 align 8
L8810:
 dq 144115188075855874
 dq L8814
 dq L8815
 align 8
L8815:
 dq 144115188075855874
 dq L8816
 dq L8817
L8817 equ null
L8816 equ L8650
L8814 equ L8625
L8806 equ L4706
L8721 equ null
L8719 equ L4485
L8715 equ L4706
L8713 equ L4496
 align 8
L8007:
 dq 144115188075855874
 dq L8818
 dq L8819
 align 8
L8819:
 dq 144115188075855874
 dq L8820
 dq L8821
 align 8
L8821:
 dq 144115188075855874
 dq L8822
 dq L8823
L8823 equ null
 align 8
L8822:
 dq 144115188075855874
 dq L8824
 dq L8825
 align 8
L8825:
 dq 144115188075855874
 dq L8826
 dq L8827
 align 8
L8827:
 dq 144115188075855874
 dq L8828
 dq L8829
 align 8
L8829:
 dq 144115188075855874
 dq L8830
 dq L8831
L8831 equ null
 align 8
L8830:
 dq 144115188075855874
 dq L8832
 dq L8833
 align 8
L8833:
 dq 144115188075855874
 dq L8834
 dq L8835
L8835 equ null
 align 8
L8834:
 dq 144115188075855874
 dq L8836
 dq L8837
 align 8
L8837:
 dq 144115188075855874
 dq L8838
 dq L8839
 align 8
L8839:
 dq 144115188075855874
 dq L8840
 dq L8841
L8841 equ null
 align 8
L8840:
 dq 144115188075855874
 dq L8842
 dq L8843
 align 8
L8843:
 dq 144115188075855874
 dq L8844
 dq L8845
L8845 equ L6224
 align 8
L8844:
 dq 72057594037927937
 dq L8846
L8842 equ L4703
 align 8
L8838:
 dq 144115188075855874
 dq L8847
 dq L8848
L8848 equ null
 align 8
L8847:
 dq 144115188075855874
 dq L8849
 dq L8850
 align 8
L8850:
 dq 144115188075855874
 dq L8851
 dq L8852
L8852 equ null
L8851 equ L8650
L8849 equ L8625
L8836 equ L4730
 align 8
L8832:
 dq 144115188075855874
 dq L8853
 dq L8854
 align 8
L8854:
 dq 144115188075855874
 dq L8855
 dq L8856
L8856 equ L6224
 align 8
L8855:
 dq 144115188075855874
 dq L8857
 dq L8858
L8858 equ L8844
 align 8
L8857:
 dq 144115188075855874
 dq L8859
 dq L8860
 align 8
L8860:
 dq 144115188075855874
 dq L8861
 dq L8862
L8862 equ null
L8861 equ L8650
L8859 equ L8625
L8853 equ L4703
 align 8
L8828:
 dq 144115188075855874
 dq L8863
 dq L8864
 align 8
L8864:
 dq 144115188075855874
 dq L8865
 dq L8866
L8866 equ null
 align 8
L8865:
 dq 144115188075855874
 dq L8867
 dq L8868
 align 8
L8868:
 dq 144115188075855874
 dq L8869
 dq L8870
L8870 equ L6224
L8869 equ null
L8867 equ L4730
 align 8
L8863:
 dq 144115188075855874
 dq L8871
 dq L8872
 align 8
L8872:
 dq 144115188075855874
 dq L8873
 dq L8874
L8874 equ L6224
L8873 equ null
L8871 equ L6721
L8826 equ null
L8824 equ L4485
L8820 equ L4703
L8818 equ L4496
 align 8
L8005:
 dq 144115188075855874
 dq L8875
 dq L8876
 align 8
L8876:
 dq 144115188075855874
 dq L8877
 dq L8878
 align 8
L8878:
 dq 144115188075855874
 dq L8879
 dq L8880
L8880 equ null
 align 8
L8879:
 dq 144115188075855874
 dq L8881
 dq L8882
 align 8
L8882:
 dq 144115188075855874
 dq L8883
 dq L8884
 align 8
L8884:
 dq 144115188075855874
 dq L8885
 dq L8886
 align 8
L8886:
 dq 144115188075855874
 dq L8887
 dq L8888
L8888 equ null
 align 8
L8887:
 dq 144115188075855874
 dq L8889
 dq L8890
 align 8
L8890:
 dq 144115188075855874
 dq L8891
 dq L8892
L8892 equ null
 align 8
L8891:
 dq 144115188075855874
 dq L8893
 dq L8894
 align 8
L8894:
 dq 144115188075855874
 dq L8895
 dq L8896
 align 8
L8896:
 dq 144115188075855874
 dq L8897
 dq L8898
L8898 equ null
L8897 equ L4394
L8895 equ L8650
 align 8
L8893:
 dq 144115188075855874
 dq L8899
 dq L8900
 align 8
L8900:
 dq 144115188075855874
 dq L8901
 dq L8902
 align 8
L8902:
 dq 144115188075855874
 dq L8903
 dq L8904
L8904 equ null
 align 8
L8903:
 dq 72057594037927937
 dq L8905
 align 8
L8901:
 dq 144115188075855874
 dq L8906
 dq L8907
L8907 equ null
 align 8
L8906:
 dq 144115188075855874
 dq L8908
 dq L8909
 align 8
L8909:
 dq 144115188075855874
 dq L8910
 dq L8911
L8911 equ null
 align 8
L8910:
 dq 144115188075855874
 dq L8912
 dq L8913
 align 8
L8913:
 dq 144115188075855874
 dq L8914
 dq L8915
L8915 equ L6224
 align 8
L8914:
 dq 144115188075855874
 dq L8916
 dq L8917
 align 8
L8917:
 dq 144115188075855874
 dq L8918
 dq L8919
L8919 equ null
L8918 equ L4394
L8916 equ L8625
L8912 equ L4700
L8908 equ L8903
L8899 equ L4618
 align 8
L8889:
 dq 144115188075855874
 dq L8920
 dq L8921
 align 8
L8921:
 dq 144115188075855874
 dq L8922
 dq L8923
 align 8
L8923:
 dq 144115188075855874
 dq L8924
 dq L8925
L8925 equ L6224
 align 8
L8924:
 dq 144115188075855874
 dq L8926
 dq L8927
 align 8
L8927:
 dq 144115188075855874
 dq L8928
 dq L8929
L8929 equ null
L8928 equ L4394
 align 8
L8926:
 dq 144115188075855874
 dq L8930
 dq L8931
 align 8
L8931:
 dq 144115188075855874
 dq L8932
 dq L8933
L8933 equ null
L8932 equ L8650
L8930 equ L8625
L8922 equ L8903
L8920 equ L6721
 align 8
L8885:
 dq 144115188075855874
 dq L8934
 dq L8935
 align 8
L8935:
 dq 144115188075855874
 dq L8936
 dq L8937
L8937 equ null
 align 8
L8936:
 dq 144115188075855874
 dq L8938
 dq L8939
 align 8
L8939:
 dq 144115188075855874
 dq L8940
 dq L8941
 align 8
L8941:
 dq 144115188075855874
 dq L8942
 dq L8943
L8943 equ null
L8942 equ L4394
L8940 equ L8650
 align 8
L8938:
 dq 144115188075855874
 dq L8944
 dq L8945
 align 8
L8945:
 dq 144115188075855874
 dq L8946
 dq L8947
L8947 equ L6224
 align 8
L8946:
 dq 144115188075855874
 dq L8948
 dq L8949
 align 8
L8949:
 dq 144115188075855874
 dq L8950
 dq L8951
L8951 equ null
L8950 equ L4394
L8948 equ L8625
L8944 equ L4700
 align 8
L8934:
 dq 144115188075855874
 dq L8952
 dq L8953
 align 8
L8953:
 dq 144115188075855874
 dq L8954
 dq L8955
L8955 equ L6224
 align 8
L8954:
 dq 144115188075855874
 dq L8956
 dq L8957
 align 8
L8957:
 dq 144115188075855874
 dq L8958
 dq L8959
L8959 equ null
L8958 equ L4394
 align 8
L8956:
 dq 144115188075855874
 dq L8960
 dq L8961
 align 8
L8961:
 dq 144115188075855874
 dq L8962
 dq L8963
L8963 equ null
L8962 equ L8650
L8960 equ L8625
L8952 equ L6721
L8883 equ null
L8881 equ L4485
L8877 equ L4730
L8875 equ L4496
L8003 equ null
 align 8
L8001:
 dq 144115188075855874
 dq L8964
 dq L8965
 align 8
L8965:
 dq 144115188075855874
 dq L8966
 dq L8967
 align 8
L8967:
 dq 144115188075855874
 dq L8968
 dq L8969
 align 8
L8969:
 dq 144115188075855874
 dq L8970
 dq L8971
 align 8
L8971:
 dq 144115188075855874
 dq L8972
 dq L8973
 align 8
L8973:
 dq 144115188075855874
 dq L8974
 dq L8975
L8975 equ null
L8974 equ L4618
L8972 equ L4709
L8970 equ L5163
L8968 equ L5601
L8966 equ L4700
L8964 equ L4712
L7999 equ L8362
L7997 equ L6653
 align 8
L6647:
 dq 144115188075855874
 dq L8976
 dq L8977
 align 8
L8977:
 dq 144115188075855874
 dq L8978
 dq L8979
 align 8
L8979:
 dq 144115188075855874
 dq L8980
 dq L8981
 align 8
L8981:
 dq 144115188075855874
 dq L8982
 dq L8983
 align 8
L8983:
 dq 144115188075855874
 dq L8984
 dq L8985
 align 8
L8985:
 dq 144115188075855874
 dq L8986
 dq L8987
 align 8
L8987:
 dq 144115188075855874
 dq L8988
 dq L8989
L8989 equ null
 align 8
L8988:
 dq 144115188075855874
 dq L8990
 dq L8991
 align 8
L8991:
 dq 144115188075855874
 dq L8992
 dq L8993
 align 8
L8993:
 dq 144115188075855874
 dq L8994
 dq L8995
L8995 equ null
 align 8
L8994:
 dq 144115188075855874
 dq L8996
 dq L8997
 align 8
L8997:
 dq 144115188075855874
 dq L8998
 dq L8999
 align 8
L8999:
 dq 144115188075855874
 dq L9000
 dq L9001
L9001 equ null
 align 8
L9000:
 dq 144115188075855874
 dq L9002
 dq L9003
 align 8
L9003:
 dq 144115188075855874
 dq L9004
 dq L9005
L9005 equ null
 align 8
L9004:
 dq 144115188075855874
 dq L9006
 dq L9007
 align 8
L9007:
 dq 144115188075855874
 dq L9008
 dq L9009
 align 8
L9009:
 dq 144115188075855874
 dq L9010
 dq L9011
 align 8
L9011:
 dq 144115188075855874
 dq L9012
 dq L9013
 align 8
L9013:
 dq 144115188075855874
 dq L9014
 dq L9015
L9015 equ null
 align 8
L9014:
 dq 144115188075855874
 dq L9016
 dq L9017
 align 8
L9017:
 dq 144115188075855874
 dq L9018
 dq L9019
L9019 equ L6224
L9018 equ null
L9016 equ L4730
L9012 equ L4394
 align 8
L9010:
 dq 144115188075855874
 dq L9020
 dq L9021
 align 8
L9021:
 dq 144115188075855874
 dq L9022
 dq L9023
 align 8
L9023:
 dq 144115188075855874
 dq L9024
 dq L9025
L9025 equ null
L9024 equ L8650
L9022 equ L8625
L9020 equ L4709
L9008 equ null
L9006 equ L4730
 align 8
L9002:
 dq 144115188075855874
 dq L9026
 dq L9027
 align 8
L9027:
 dq 144115188075855874
 dq L9028
 dq L9029
L9029 equ L6224
 align 8
L9028:
 dq 144115188075855874
 dq L9030
 dq L9031
 align 8
L9031:
 dq 144115188075855874
 dq L9032
 dq L9033
L9033 equ null
L9032 equ L4394
 align 8
L9030:
 dq 144115188075855874
 dq L9034
 dq L9035
 align 8
L9035:
 dq 144115188075855874
 dq L9036
 dq L9037
L9037 equ null
L9036 equ L8650
L9034 equ L8625
L9026 equ L6721
L8998 equ null
L8996 equ L4485
L8992 equ L4618
L8990 equ L4496
 align 8
L8986:
 dq 144115188075855874
 dq L9038
 dq L9039
 align 8
L9039:
 dq 144115188075855874
 dq L9040
 dq L9041
 align 8
L9041:
 dq 144115188075855874
 dq L9042
 dq L9043
L9043 equ null
 align 8
L9042:
 dq 144115188075855874
 dq L9044
 dq L9045
 align 8
L9045:
 dq 144115188075855874
 dq L9046
 dq L9047
 align 8
L9047:
 dq 144115188075855874
 dq L9048
 dq L9049
 align 8
L9049:
 dq 144115188075855874
 dq L9050
 dq L9051
 align 8
L9051:
 dq 144115188075855874
 dq L9052
 dq L9053
L9053 equ null
 align 8
L9052:
 dq 144115188075855874
 dq L9054
 dq L9055
 align 8
L9055:
 dq 144115188075855874
 dq L9056
 dq L9057
L9057 equ null
 align 8
L9056:
 dq 144115188075855874
 dq L9058
 dq L9059
 align 8
L9059:
 dq 144115188075855874
 dq L9060
 dq L9061
 align 8
L9061:
 dq 144115188075855874
 dq L9062
 dq L9063
L9063 equ null
L9062 equ L8650
L9060 equ L8625
L9058 equ L4709
 align 8
L9054:
 dq 144115188075855874
 dq L9064
 dq L9065
 align 8
L9065:
 dq 144115188075855874
 dq L9066
 dq L9067
 align 8
L9067:
 dq 144115188075855874
 dq L9068
 dq L9069
L9069 equ null
L9068 equ L8650
L9066 equ L8625
L9064 equ L6721
 align 8
L9050:
 dq 144115188075855874
 dq L9070
 dq L9071
 align 8
L9071:
 dq 144115188075855874
 dq L9072
 dq L9073
L9073 equ null
 align 8
L9072:
 dq 144115188075855874
 dq L9074
 dq L9075
 align 8
L9075:
 dq 144115188075855874
 dq L9076
 dq L9077
 align 8
L9077:
 dq 144115188075855874
 dq L9078
 dq L9079
L9079 equ null
 align 8
L9078:
 dq 144115188075855874
 dq L9080
 dq L9081
 align 8
L9081:
 dq 144115188075855874
 dq L9082
 dq L9083
 align 8
L9083:
 dq 144115188075855874
 dq L9084
 dq L9085
L9085 equ null
 align 8
L9084:
 dq 144115188075855874
 dq L9086
 dq L9087
 align 8
L9087:
 dq 144115188075855874
 dq L9088
 dq L9089
L9089 equ L6224
L9088 equ null
L9086 equ L4482
 align 8
L9082:
 dq 72057594037927937
 dq L9090
L9080 equ L4700
L9076 equ L8625
L9074 equ L4709
 align 8
L9070:
 dq 144115188075855874
 dq L9091
 dq L9092
 align 8
L9092:
 dq 144115188075855874
 dq L9093
 dq L9094
L9094 equ L6224
 align 8
L9093:
 dq 144115188075855874
 dq L9095
 dq L9096
L9096 equ L9082
L9095 equ L8625
L9091 equ L6721
 align 8
L9048:
 dq 144115188075855874
 dq L9097
 dq L9098
 align 8
L9098:
 dq 144115188075855874
 dq L9099
 dq L9100
L9100 equ null
 align 8
L9099:
 dq 144115188075855874
 dq L9101
 dq L9102
 align 8
L9102:
 dq 144115188075855874
 dq L9103
 dq L9104
L9104 equ null
L9103 equ L7295
L9101 equ L4709
 align 8
L9097:
 dq 144115188075855874
 dq L9105
 dq L9106
 align 8
L9106:
 dq 144115188075855874
 dq L9107
 dq L9108
L9108 equ null
L9107 equ L7295
L9105 equ L6721
L9046 equ null
L9044 equ L4485
L9040 equ L4709
L9038 equ L4496
 align 8
L8984:
 dq 144115188075855874
 dq L9109
 dq L9110
 align 8
L9110:
 dq 144115188075855874
 dq L9111
 dq L9112
 align 8
L9112:
 dq 144115188075855874
 dq L9113
 dq L9114
L9114 equ null
 align 8
L9113:
 dq 144115188075855874
 dq L9115
 dq L9116
 align 8
L9116:
 dq 144115188075855874
 dq L9117
 dq L9118
 align 8
L9118:
 dq 144115188075855874
 dq L9119
 dq L9120
L9120 equ null
 align 8
L9119:
 dq 144115188075855874
 dq L9121
 dq L9122
 align 8
L9122:
 dq 144115188075855874
 dq L9123
 dq L9124
L9124 equ null
 align 8
L9123:
 dq 144115188075855874
 dq L9125
 dq L9126
 align 8
L9126:
 dq 144115188075855874
 dq L9127
 dq L9128
 align 8
L9128:
 dq 144115188075855874
 dq L9129
 dq L9130
L9130 equ null
 align 8
L9129:
 dq 144115188075855874
 dq L9131
 dq L9132
 align 8
L9132:
 dq 144115188075855874
 dq L9133
 dq L9134
L9134 equ L6224
L9133 equ null
L9131 equ L4482
L9127 equ L9082
L9125 equ L4700
 align 8
L9121:
 dq 144115188075855874
 dq L9135
 dq L9136
 align 8
L9136:
 dq 144115188075855874
 dq L9137
 dq L9138
L9138 equ L6224
L9137 equ L9082
L9135 equ L4700
L9117 equ null
L9115 equ L4485
L9111 equ L4700
L9109 equ L4496
L8982 equ null
 align 8
L8980:
 dq 144115188075855874
 dq L9139
 dq L9140
 align 8
L9140:
 dq 144115188075855874
 dq L9141
 dq L9142
 align 8
L9142:
 dq 144115188075855874
 dq L9143
 dq L9144
L9144 equ null
L9143 equ L4482
L9141 equ L4709
L9139 equ L4700
L8978 equ L4482
L8976 equ L6653
L6645 equ L5163
 align 8
L6641:
 dq 144115188075855874
 dq L9145
 dq L9146
 align 8
L9146:
 dq 144115188075855874
 dq L9147
 dq L9148
 align 8
L9148:
 dq 144115188075855874
 dq L9149
 dq L9150
L9150 equ null
 align 8
L9149:
 dq 144115188075855874
 dq L9151
 dq L9152
 align 8
L9152:
 dq 144115188075855874
 dq L9153
 dq L9154
 align 8
L9154:
 dq 144115188075855874
 dq L9155
 dq L9156
L9156 equ null
 align 8
L9155:
 dq 144115188075855874
 dq L9157
 dq L9158
 align 8
L9158:
 dq 144115188075855874
 dq L9159
 dq L9160
L9160 equ null
 align 8
L9159:
 dq 144115188075855874
 dq L9161
 dq L9162
 align 8
L9162:
 dq 144115188075855874
 dq L9163
 dq L9164
 align 8
L9164:
 dq 144115188075855874
 dq L9165
 dq L9166
L9166 equ null
 align 8
L9165:
 dq 144115188075855874
 dq L9167
 dq L9168
 align 8
L9168:
 dq 144115188075855874
 dq L9169
 dq L9170
L9170 equ null
L9169 equ L4394
 align 8
L9167:
 dq 72057594037927937
 dq L9171
 align 8
L9163:
 dq 144115188075855874
 dq L9172
 dq L9173
 align 8
L9173:
 dq 144115188075855874
 dq L9174
 dq L9175
L9175 equ null
L9174 equ L4394
 align 8
L9172:
 dq 72057594037927937
 dq L9176
 align 8
L9161:
 dq 144115188075855874
 dq L9177
 dq L9178
 align 8
L9178:
 dq 144115188075855874
 dq L9179
 dq L9180
 align 8
L9180:
 dq 144115188075855874
 dq L9181
 dq L9182
L9182 equ null
 align 8
L9181:
 dq 144115188075855874
 dq L9183
 dq L9184
 align 8
L9184:
 dq 144115188075855874
 dq L9185
 dq L9186
 align 8
L9186:
 dq 144115188075855874
 dq L9187
 dq L9188
L9188 equ null
 align 8
L9187:
 dq 144115188075855874
 dq L9189
 dq L9190
 align 8
L9190:
 dq 144115188075855874
 dq L9191
 dq L9192
 align 8
L9192:
 dq 144115188075855874
 dq L9193
 dq L9194
L9194 equ null
 align 8
L9193:
 dq 144115188075855874
 dq L9195
 dq L9196
 align 8
L9196:
 dq 144115188075855874
 dq L9197
 dq L9198
L9198 equ null
 align 8
L9197:
 dq 144115188075855874
 dq L9199
 dq L9200
 align 8
L9200:
 dq 144115188075855874
 dq L9201
 dq L9202
 align 8
L9202:
 dq 144115188075855874
 dq L9203
 dq L9204
L9204 equ null
 align 8
L9203:
 dq 144115188075855874
 dq L9205
 dq L9206
 align 8
L9206:
 dq 144115188075855874
 dq L9207
 dq L9208
 align 8
L9208:
 dq 144115188075855874
 dq L9209
 dq L9210
 align 8
L9210:
 dq 144115188075855874
 dq L9211
 dq L9212
L9212 equ null
 align 8
L9211:
 dq 144115188075855874
 dq L9213
 dq L9214
 align 8
L9214:
 dq 144115188075855874
 dq L9215
 dq L9216
L9216 equ null
L9215 equ L4394
L9213 equ L9172
 align 8
L9209:
 dq 72057594037927937
 dq L9217
L9207 equ L4496
 align 8
L9205:
 dq 72057594037927937
 dq L9218
 align 8
L9201:
 dq 144115188075855874
 dq L9219
 dq L9220
 align 8
L9220:
 dq 144115188075855874
 dq L9221
 dq L9222
 align 8
L9222:
 dq 144115188075855874
 dq L9223
 dq L9224
 align 8
L9224:
 dq 144115188075855874
 dq L9225
 dq L9226
L9226 equ null
 align 8
L9225:
 dq 72057594037927937
 dq L9227
 align 8
L9223:
 dq 144115188075855874
 dq L9228
 dq L9229
 align 8
L9229:
 dq 144115188075855874
 dq L9230
 dq L9231
L9231 equ null
L9230 equ L4394
L9228 equ L9167
L9221 equ L4709
L9219 equ L9205
L9199 equ L5163
 align 8
L9195:
 dq 144115188075855874
 dq L9232
 dq L9233
 align 8
L9233:
 dq 144115188075855874
 dq L9234
 dq L9235
 align 8
L9235:
 dq 144115188075855874
 dq L9236
 dq L9237
L9237 equ null
L9236 equ L9225
L9234 equ L9209
L9232 equ L6721
L9191 equ null
L9189 equ L4485
 align 8
L9185:
 dq 144115188075855874
 dq L9238
 dq L9239
 align 8
L9239:
 dq 144115188075855874
 dq L9240
 dq L9241
L9241 equ null
L9240 equ L4394
 align 8
L9238:
 dq 144115188075855874
 dq L9242
 dq L9243
 align 8
L9243:
 dq 144115188075855874
 dq L9244
 dq L9245
L9245 equ null
L9244 equ L5406
L9242 equ L9172
 align 8
L9183:
 dq 72057594037927937
 dq L9246
 align 8
L9179:
 dq 144115188075855874
 dq L9247
 dq L9248
 align 8
L9248:
 dq 144115188075855874
 dq L9249
 dq L9250
 align 8
L9250:
 dq 144115188075855874
 dq L9251
 dq L9252
 align 8
L9252:
 dq 144115188075855874
 dq L9253
 dq L9254
L9254 equ null
L9253 equ L4394
 align 8
L9251:
 dq 144115188075855874
 dq L9255
 dq L9256
 align 8
L9256:
 dq 144115188075855874
 dq L9257
 dq L9258
L9258 equ null
 align 8
L9257:
 dq 72057594037927937
 dq L9259
L9255 equ L9167
L9249 equ L4394
 align 8
L9247:
 dq 144115188075855874
 dq L9260
 dq L9261
 align 8
L9261:
 dq 144115188075855874
 dq L9262
 dq L9263
L9263 equ null
 align 8
L9262:
 dq 72057594037927937
 dq L9264
L9260 equ L9262
L9177 equ L4482
 align 8
L9157:
 dq 144115188075855874
 dq L9265
 dq L9266
 align 8
L9266:
 dq 144115188075855874
 dq L9267
 dq L9268
 align 8
L9268:
 dq 144115188075855874
 dq L9269
 dq L9270
 align 8
L9270:
 dq 144115188075855874
 dq L9271
 dq L9272
 align 8
L9272:
 dq 144115188075855874
 dq L9273
 dq L9274
 align 8
L9274:
 dq 144115188075855874
 dq L9275
 dq L9276
L9276 equ null
L9275 equ L4394
 align 8
L9273:
 dq 144115188075855874
 dq L9277
 dq L9278
 align 8
L9278:
 dq 144115188075855874
 dq L9279
 dq L9280
 align 8
L9280:
 dq 144115188075855874
 dq L9281
 dq L9282
L9282 equ null
L9281 equ L5406
L9279 equ L9172
L9277 equ L4496
 align 8
L9271:
 dq 144115188075855874
 dq L9283
 dq L9284
 align 8
L9284:
 dq 144115188075855874
 dq L9285
 dq L9286
L9286 equ null
L9285 equ L4394
L9283 equ L9167
 align 8
L9269:
 dq 144115188075855874
 dq L9287
 dq L9288
 align 8
L9288:
 dq 144115188075855874
 dq L9289
 dq L9290
L9290 equ null
L9289 equ L4394
L9287 equ L9262
L9267 equ L9183
L9265 equ L6721
 align 8
L9153:
 dq 144115188075855874
 dq L9291
 dq L9292
L9292 equ null
L9291 equ L4496
L9151 equ L4485
L9147 equ L6653
L9145 equ L4496
 align 8
L6639:
 dq 144115188075855874
 dq L9293
 dq L9294
 align 8
L9294:
 dq 144115188075855874
 dq L9295
 dq L9296
 align 8
L9296:
 dq 144115188075855874
 dq L9297
 dq L9298
L9298 equ null
 align 8
L9297:
 dq 144115188075855874
 dq L9299
 dq L9300
 align 8
L9300:
 dq 144115188075855874
 dq L9301
 dq L9302
L9302 equ null
L9301 equ null
L9299 equ L4485
L9295 equ L9257
L9293 equ L4496
 align 8
L6637:
 dq 144115188075855874
 dq L9303
 dq L9304
 align 8
L9304:
 dq 144115188075855874
 dq L9305
 dq L9306
 align 8
L9306:
 dq 144115188075855874
 dq L9307
 dq L9308
L9308 equ null
 align 8
L9307:
 dq 144115188075855874
 dq L9309
 dq L9310
 align 8
L9310:
 dq 144115188075855874
 dq L9311
 dq L9312
 align 8
L9312:
 dq 144115188075855874
 dq L9313
 dq L9314
L9314 equ null
 align 8
L9313:
 dq 144115188075855874
 dq L9315
 dq L9316
 align 8
L9316:
 dq 144115188075855874
 dq L9317
 dq L9318
L9318 equ null
 align 8
L9317:
 dq 144115188075855874
 dq L9319
 dq L9320
 align 8
L9320:
 dq 144115188075855874
 dq L9321
 dq L9322
 align 8
L9322:
 dq 144115188075855874
 dq L9323
 dq L9324
L9324 equ null
L9323 equ L4394
 align 8
L9321:
 dq 144115188075855874
 dq L9325
 dq L9326
 align 8
L9326:
 dq 144115188075855874
 dq L9327
 dq L9328
 align 8
L9328:
 dq 144115188075855874
 dq L9329
 dq L9330
L9330 equ null
L9329 equ L8650
 align 8
L9327:
 dq 72057594037927937
 dq L9331
 align 8
L9325:
 dq 72057594037927937
 dq L9332
L9319 equ L5163
 align 8
L9315:
 dq 144115188075855874
 dq L9333
 dq L9334
 align 8
L9334:
 dq 144115188075855874
 dq L9335
 dq L9336
 align 8
L9336:
 dq 144115188075855874
 dq L9337
 dq L9338
 align 8
L9338:
 dq 144115188075855874
 dq L9339
 dq L9340
L9340 equ null
 align 8
L9339:
 dq 144115188075855874
 dq L9341
 dq L9342
 align 8
L9342:
 dq 144115188075855874
 dq L9343
 dq L9344
L9344 equ null
L9343 equ L4394
L9341 equ L8650
 align 8
L9337:
 dq 144115188075855874
 dq L9345
 dq L9346
 align 8
L9346:
 dq 144115188075855874
 dq L9347
 dq L9348
L9348 equ null
L9347 equ L4394
L9345 equ L9327
L9335 equ L9325
L9333 equ L6721
L9311 equ null
L9309 equ L4485
L9305 equ L9205
L9303 equ L4496
L6635 equ null
L6633 equ L4482
 align 8
L6629:
 dq 144115188075855874
 dq L9349
 dq L9350
 align 8
L9350:
 dq 144115188075855874
 dq L9351
 dq L9352
 align 8
L9352:
 dq 144115188075855874
 dq L9353
 dq L9354
L9354 equ null
 align 8
L9353:
 dq 144115188075855874
 dq L9355
 dq L9356
 align 8
L9356:
 dq 144115188075855874
 dq L9357
 dq L9358
 align 8
L9358:
 dq 144115188075855874
 dq L9359
 dq L9360
L9360 equ null
 align 8
L9359:
 dq 144115188075855874
 dq L9361
 dq L9362
 align 8
L9362:
 dq 144115188075855874
 dq L9363
 dq L9364
 align 8
L9364:
 dq 144115188075855874
 dq L9365
 dq L9366
L9366 equ null
 align 8
L9365:
 dq 144115188075855874
 dq L9367
 dq L9368
 align 8
L9368:
 dq 144115188075855874
 dq L9369
 dq L9370
L9370 equ null
 align 8
L9369:
 dq 144115188075855874
 dq L9371
 dq L9372
 align 8
L9372:
 dq 144115188075855874
 dq L9373
 dq L9374
 align 8
L9374:
 dq 144115188075855874
 dq L9375
 dq L9376
 align 8
L9376:
 dq 144115188075855874
 dq L9377
 dq L9378
 align 8
L9378:
 dq 144115188075855874
 dq L9379
 dq L9380
L9380 equ null
 align 8
L9379:
 dq 144115188075855874
 dq L9381
 dq L9382
 align 8
L9382:
 dq 144115188075855874
 dq L9383
 dq L9384
L9384 equ L6224
L9383 equ null
L9381 equ L4482
L9377 equ L4394
 align 8
L9375:
 dq 144115188075855874
 dq L9385
 dq L9386
 align 8
L9386:
 dq 144115188075855874
 dq L9387
 dq L9388
 align 8
L9388:
 dq 144115188075855874
 dq L9389
 dq L9390
L9390 equ null
L9389 equ L8650
L9387 equ L9172
L9385 equ L4496
L9373 equ null
L9371 equ L4482
 align 8
L9367:
 dq 144115188075855874
 dq L9391
 dq L9392
 align 8
L9392:
 dq 144115188075855874
 dq L9393
 dq L9394
L9394 equ L6224
 align 8
L9393:
 dq 144115188075855874
 dq L9395
 dq L9396
 align 8
L9396:
 dq 144115188075855874
 dq L9397
 dq L9398
L9398 equ null
L9397 equ L4394
 align 8
L9395:
 dq 144115188075855874
 dq L9399
 dq L9400
 align 8
L9400:
 dq 144115188075855874
 dq L9401
 dq L9402
L9402 equ null
L9401 equ L8650
L9399 equ L9172
L9391 equ L6721
L9363 equ null
L9361 equ L4485
 align 8
L9357:
 dq 144115188075855874
 dq L9403
 dq L9404
 align 8
L9404:
 dq 144115188075855874
 dq L9405
 dq L9406
L9406 equ null
 align 8
L9405:
 dq 144115188075855874
 dq L9407
 dq L9408
 align 8
L9408:
 dq 144115188075855874
 dq L9409
 dq L9410
L9410 equ null
L9409 equ L4496
L9407 equ L4496
 align 8
L9403:
 dq 144115188075855874
 dq L9411
 dq L9412
 align 8
L9412:
 dq 144115188075855874
 dq L9413
 dq L9414
L9414 equ null
L9413 equ L4482
L9411 equ L4482
L9355 equ L4482
L9351 equ L8362
L9349 equ L4496
 align 8
L27:
 dq 144115188075855874
 dq L9415
 dq L9416
 align 8
L9416:
 dq 144115188075855874
 dq L9417
 dq L9418
 align 8
L9418:
 dq 144115188075855874
 dq L9419
 dq L9420
 align 8
L9420:
 dq 144115188075855874
 dq L9421
 dq L9422
 align 8
L9422:
 dq 144115188075855874
 dq L9423
 dq L9424
 align 8
L9424:
 dq 144115188075855874
 dq L9425
 dq L9426
 align 8
L9426:
 dq 144115188075855874
 dq L9427
 dq L9428
 align 8
L9428:
 dq 144115188075855874
 dq L9429
 dq L9430
 align 8
L9430:
 dq 144115188075855874
 dq L9431
 dq L9432
 align 8
L9432:
 dq 144115188075855874
 dq L9433
 dq L9434
L9434 equ null
L9433 equ L4485
L9431 equ L4482
L9429 equ L4609
L9427 equ L4715
L9425 equ L5601
L9423 equ L4700
L9421 equ L4712
L9419 equ L4496
L9417 equ L4709
L9415 equ L5163
 section .data
 align 8
L18:
 dq 1224979098644774916
 db 72, 79, 77, 69
 align 8
L19:
 dq 1224979098644774918
 db 84, 77, 80, 68, 73, 82
 align 8
L22:
 dq 1224979098644774915
 db 84, 77, 80
 align 8
L25:
 dq 1224979098644774916
 db 84, 69, 77, 80
 align 8
L26:
 dq 1224979098644774916
 db 47, 116, 109, 112
 align 8
L9332:
 dq 1224979098644774919
 db 100, 101, 102, 105, 110, 101, 114
 align 8
L9331:
 dq 1224979098644774914
 db 105, 100
 align 8
L9264:
 dq 1224979098644774920
 db 115, 97, 118, 101, 100, 45, 107, 119
 align 8
L9259:
 dq 1224979098644774917
 db 100, 117, 109, 109, 121
 align 8
L9246:
 dq 1224979098644774929
 db 108, 101, 116, 47, 108, 101, 116, 114, 101, 99, 45, 115, 121, 110, 116, 97, 120
 align 8
L9227:
 dq 1224979098644774926
 db 116, 111, 112, 45, 108, 101, 118, 101, 108, 45, 118, 97, 114, 115
 align 8
L9218:
 dq 1224979098644774924
 db 109, 117, 108, 116, 105, 45, 100, 101, 102, 105, 110, 101
 align 8
L9217:
 dq 1224979098644774925
 db 116, 111, 112, 45, 108, 101, 118, 101, 108, 45, 107, 119, 115
 align 8
L9176:
 dq 1224979098644774914
 db 107, 119
 align 8
L9171:
 dq 1224979098644774921
 db 115, 97, 118, 101, 100, 45, 118, 97, 114
 align 8
L9090:
 dq 1224979098644774916
 db 97, 114, 103, 115
 align 8
L8905:
 dq 1224979098644774916
 db 110, 97, 109, 101
 align 8
L8846:
 dq 1224979098644774920
 db 98, 105, 110, 100, 105, 110, 103, 115
 align 8
L8751:
 dq 1224979098644774917
 db 116, 104, 117, 110, 107
 align 8
L8652:
 dq 1224979098644774916
 db 105, 110, 105, 116
 align 8
L8635:
 dq 1224979098644774919
 db 99, 111, 109, 109, 97, 110, 100
 align 8
L8634:
 dq 1224979098644774916
 db 108, 111, 111, 112
 align 8
L8633:
 dq 1224979098644774919
 db 100, 111, 45, 115, 116, 101, 112
 align 8
L8632:
 dq 1224979098644774915
 db 118, 97, 114
 align 8
L8631:
 dq 1224979098644774916
 db 115, 116, 101, 112
 align 8
L8568:
 dq 1224979098644774925
 db 108, 101, 116, 114, 101, 99, 45, 115, 121, 110, 116, 97, 120
 align 8
L8549:
 dq 1224979098644774916
 db 101, 113, 118, 63
 align 8
L8538:
 dq 1224979098644774916
 db 100, 97, 116, 97
 align 8
L8465:
 dq 1224979098644774919
 db 99, 111, 109, 112, 97, 114, 101
 align 8
L8464:
 dq 1224979098644774917
 db 100, 97, 116, 117, 109
 align 8
L8453:
 dq 1224979098644774919
 db 114, 101, 115, 117, 108, 116, 49
 align 8
L8452:
 dq 1224979098644774919
 db 114, 101, 115, 117, 108, 116, 115
 align 8
L8447:
 dq 1224979098644774919
 db 99, 108, 97, 117, 115, 101, 115
 align 8
L8396:
 dq 1224979098644774915
 db 107, 101, 121
 align 8
L8395:
 dq 1224979098644774919
 db 99, 108, 97, 117, 115, 101, 49
 align 8
L8394:
 dq 1224979098644774918
 db 99, 108, 97, 117, 115, 101
 align 8
L8293:
 dq 1224979098644774916
 db 112, 114, 111, 99
 align 8
L8270:
 dq 1224979098644774914
 db 61, 62
 align 8
L8257:
 dq 1224979098644774921
 db 103, 101, 110, 101, 114, 97, 116, 111, 114
 align 8
L8250:
 dq 1224979098644774917
 db 103, 117, 97, 114, 100
 align 8
L8245:
 dq 1224979098644774920
 db 114, 101, 99, 101, 105, 118, 101, 114
 align 8
L8244:
 dq 1224979098644774915
 db 116, 109, 112
 align 8
L8215:
 dq 1224979098644774916
 db 101, 120, 112, 115
 align 8
L8212:
 dq 1224979098644774916
 db 114, 101, 115, 116
 align 8
L8097:
 dq 1224979098644774916
 db 116, 101, 115, 116
 align 8
L8090:
 dq 1224979098644774917
 db 116, 101, 115, 116, 115
 align 8
L8049:
 dq 1224979098644774925
 db 37, 109, 97, 107, 101, 45, 112, 114, 111, 109, 105, 115, 101
 align 8
L7996:
 dq 1224979098644774935
 db 100, 101, 102, 105, 110, 101, 45, 112, 114, 111, 116, 101, 99, 116, 101, 100, 45, 109, 97, 99, 114, 111, 115
 align 8
L7969:
 dq 1224979098644774920
 db 108, 105, 116, 101, 114, 97, 108, 115
 align 8
L7968:
 dq 1224979098644774922
 db 115, 117, 98, 112, 97, 116, 116, 101, 114, 110
 align 8
L7963:
 dq 1224979098644774923
 db 115, 117, 98, 116, 101, 109, 112, 108, 97, 116, 101
 align 8
L7613:
 dq 1224979098644774922
 db 110, 101, 120, 116, 45, 109, 97, 99, 114, 111
 align 8
L7612:
 dq 1224979098644774916
 db 116, 97, 105, 108
 align 8
L7585:
 dq 1224979098644774917
 db 115, 116, 97, 99, 107
 align 8
L7574:
 dq 1224979098644774934
 db 117, 110, 113, 117, 111, 116, 101, 45, 115, 112, 108, 105, 99, 105, 110, 103, 45, 101, 114, 114, 111, 114
 align 8
L7569:
 dq 1224979098644774914
 db 105, 110
 align 8
L7568:
 dq 1224979098644774929
 db 111, 114, 105, 103, 105, 110, 97, 108, 45, 116, 101, 109, 112, 108, 97, 116, 101
 align 8
L7531:
 dq 1224979098644774915
 db 99, 100, 114
 align 8
L7530:
 dq 1224979098644774920
 db 99, 111, 109, 98, 105, 110, 101, 114
 align 8
L7529:
 dq 1224979098644774915
 db 99, 97, 114
 align 8
L7502:
 dq 1224979098644774929
 db 113, 113, 45, 110, 101, 115, 116, 101, 100, 45, 117, 110, 113, 117, 111, 116, 101
 align 8
L7485:
 dq 1224979098644774918
 db 113, 113, 45, 99, 100, 114
 align 8
L7484:
 dq 1224979098644774917
 db 100, 101, 112, 116, 104
 align 8
L7447:
 dq 1224979098644774920
 db 109, 97, 107, 101, 45, 109, 97, 112
 align 8
L7338:
 dq 1224979098644774913
 db 122
 align 8
L7317:
 dq 1224979098644774915
 db 109, 97, 112
 align 8
L7314:
 dq 1224979098644774915
 db 115, 121, 109
 align 8
L7297:
 dq 1224979098644774916
 db 101, 120, 112, 114
 align 8
L7202:
 dq 1224979098644774916
 db 101, 108, 116, 115
 align 8
L7151:
 dq 1224979098644774921
 db 109, 97, 107, 101, 45, 108, 105, 115, 116
 align 8
L7138:
 dq 1224979098644774921
 db 109, 97, 107, 101, 45, 112, 97, 105, 114
 align 8
L7111:
 dq 1224979098644774923
 db 109, 97, 107, 101, 45, 115, 112, 108, 105, 99, 101
 align 8
L7058:
 dq 1224979098644774940
 db 116, 97, 105, 108, 45, 112, 114, 101, 115, 101, 114, 118, 105, 110, 103, 45, 115, 121, 110, 116, 97, 120, 45, 114, 117, 108, 101, 115
 align 8
L6908:
 dq 1224979098644774930
 db 109, 97, 107, 101, 45, 118, 101, 99, 116, 111, 114, 45, 115, 112, 108, 105, 99, 101
 align 8
L6857:
 dq 1224979098644774918
 db 118, 101, 99, 116, 111, 114
 align 8
L6816:
 dq 1224979098644774916
 db 108, 105, 115, 116
 align 8
L6805:
 dq 1224979098644774916
 db 99, 111, 110, 115
 align 8
L6776:
 dq 1224979098644774919
 db 100, 111, 45, 110, 101, 120, 116
 align 8
L6775:
 dq 1224979098644774924
 db 108, 105, 115, 116, 45, 62, 118, 101, 99, 116, 111, 114
 align 8
L6774:
 dq 1224979098644774918
 db 97, 112, 112, 101, 110, 100
 align 8
L6773:
 dq 1224979098644774913
 db 120
 align 8
L6772:
 dq 1224979098644774913
 db 121
 align 8
L6725:
 dq 1224979098644774913
 db 95
 align 8
L6720:
 dq 1224979098644774914
 db 113, 113
 align 8
L6719:
 dq 1224979098644774920
 db 116, 101, 109, 112, 108, 97, 116, 101
 align 8
L6627:
 dq 1224979098644774913
 db 46
 align 8
L6626:
 dq 1224979098644774917
 db 98, 111, 110, 101, 115
 align 8
L6625:
 dq 1224979098644774918
 db 115, 114, 102, 105, 45, 48
 align 8
L6624:
 dq 1224979098644774918
 db 115, 114, 102, 105, 45, 55
 align 8
L6623:
 dq 1224979098644774919
 db 115, 114, 102, 105, 45, 49, 54
 align 8
L6622:
 dq 1224979098644774919
 db 115, 114, 102, 105, 45, 52, 54
 align 8
L6611:
 dq 1224979098644774923
 db 100, 101, 102, 97, 117, 108, 116, 45, 98, 115, 100
 align 8
L6608:
 dq 1224979098644774915
 db 114, 49, 53
 align 8
L6601:
 dq 1224979098644774915
 db 114, 99, 120
 align 8
L6600:
 dq 1224979098644774915
 db 114, 100, 120
 align 8
L6599:
 dq 1224979098644774915
 db 114, 115, 105
 align 8
L6598:
 dq 1224979098644774915
 db 114, 100, 105
 align 8
L6597:
 dq 1224979098644774914
 db 114, 56
 align 8
L6596:
 dq 1224979098644774914
 db 114, 57
 align 8
L6595:
 dq 1224979098644774915
 db 114, 49, 48
 align 8
L6594:
 dq 1224979098644774915
 db 114, 49, 50
 align 8
L6575:
 dq 1224979098644774918
 db 120, 56, 54, 95, 54, 52
 align 8
L6574:
 dq 1224979098644774925
 db 108, 105, 116, 116, 108, 101, 45, 101, 110, 100, 105, 97, 110
 align 8
L6573:
 dq 1224979098644774915
 db 114, 97, 120
 align 8
L6572:
 dq 1224979098644774917
 db 65, 76, 76, 79, 67
 align 8
L6571:
 dq 1224979098644774916
 db 83, 69, 76, 70
 align 8
L6570:
 dq 1224979098644774915
 db 114, 49, 49
 align 8
L6569:
 dq 1224979098644774915
 db 114, 115, 112
 align 8
L43:
 dq 1224979098644774913
 db 32
 align 8
L44:
 dq 1224979098644774913
 db 10
 align 8
L45:
 dq 1224979098644774914
 db 58, 10
 align 8
L6568:
 dq 1224979098644774914
 db 110, 101
 align 8
L6567:
 dq 1224979098644774914
 db 103, 101
 align 8
L6566:
 dq 1224979098644774914
 db 108, 101
 align 8
L6565:
 dq 1224979098644774914
 db 97, 101
 align 8
L6564:
 dq 1224979098644774913
 db 98
 align 8
L6563:
 dq 1224979098644774914
 db 98, 101
 align 8
L6562:
 dq 1224979098644774913
 db 97
 align 8
L86:
 dq 1224979098644774964
 db 99, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 32, 99, 111, 100, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 97, 114, 99, 104, 105, 116, 101, 99, 116, 117, 114, 101
 align 8
L6561:
 dq 1224979098644774914
 db 101, 113
 align 8
L6560:
 dq 1224979098644774913
 db 101
 align 8
L6559:
 dq 1224979098644774914
 db 108, 116
 align 8
L6558:
 dq 1224979098644774913
 db 108
 align 8
L6557:
 dq 1224979098644774914
 db 103, 116
 align 8
L6556:
 dq 1224979098644774913
 db 103
 align 8
L97:
 dq 1224979098644774917
 db 32, 99, 109, 111, 118
 align 8
L98:
 dq 1224979098644774913
 db 32
 align 8
L99:
 dq 1224979098644774914
 db 44, 32
 align 8
L100:
 dq 1224979098644774913
 db 10
 align 8
L101:
 dq 1224979098644774914
 db 32, 106
 align 8
L102:
 dq 1224979098644774913
 db 32
 align 8
L103:
 dq 1224979098644774913
 db 10
 align 8
L104:
 dq 1224979098644774919
 db 32, 83, 69, 84, 95, 84, 32
 align 8
L105:
 dq 1224979098644774918
 db 10, 32, 99, 109, 111, 118
 align 8
L106:
 dq 1224979098644774913
 db 32
 align 8
L107:
 dq 1224979098644774920
 db 44, 32, 70, 65, 76, 83, 69, 10
 align 8
L108:
 dq 1224979098644774929
 db 32, 67, 72, 69, 67, 75, 95, 80, 82, 79, 67, 69, 68, 85, 82, 69, 10
 align 8
L109:
 dq 1224979098644774927
 db 44, 32, 70, 65, 76, 83, 69, 10, 32, 99, 109, 111, 118, 101, 32
 align 8
L110:
 dq 1224979098644774914
 db 44, 32
 align 8
L111:
 dq 1224979098644774917
 db 32, 99, 109, 112, 32
 align 8
L112:
 dq 1224979098644774913
 db 10
 align 8
L113:
 dq 1224979098644774915
 db 106, 98, 32
 align 8
L114:
 dq 1224979098644774916
 db 106, 110, 101, 32
 align 8
L115:
 dq 1224979098644774922
 db 32, 99, 109, 112, 32, 114, 49, 49, 44, 32
 align 8
L116:
 dq 1224979098644774914
 db 10, 32
 align 8
L117:
 dq 1224979098644774913
 db 10
 align 8
L118:
 dq 1224979098644774918
 db 32, 99, 97, 108, 108, 32
 align 8
L119:
 dq 1224979098644774913
 db 10
 align 8
L120:
 dq 1224979098644774917
 db 32, 106, 109, 112, 32
 align 8
L121:
 dq 1224979098644774913
 db 10
 align 8
L122:
 dq 1224979098644774917
 db 32, 106, 109, 112, 32
 align 8
L123:
 dq 1224979098644774913
 db 10
 align 8
L124:
 dq 1224979098644774942
 db 32, 99, 109, 112, 32, 65, 76, 76, 79, 67, 44, 32, 76, 73, 77, 73, 84, 10, 32, 106, 97, 32, 114, 101, 99, 108, 97, 105, 109, 10
 align 8
L125:
 dq 1224979098644774919
 db 32, 83, 69, 84, 95, 84, 32
 align 8
L126:
 dq 1224979098644774913
 db 10
 align 8
L127:
 dq 1224979098644774918
 db 32, 109, 111, 118, 32, 91
 align 8
L128:
 dq 1224979098644774915
 db 93, 44, 32
 align 8
L129:
 dq 1224979098644774915
 db 32, 43, 32
 align 8
L130:
 dq 1224979098644774913
 db 10
 align 8
L131:
 dq 1224979098644774917
 db 32, 109, 111, 118, 32
 align 8
L132:
 dq 1224979098644774915
 db 32, 43, 32
 align 8
L133:
 dq 1224979098644774915
 db 44, 32, 91
 align 8
L134:
 dq 1224979098644774914
 db 93, 10
 align 8
L135:
 dq 1224979098644774914
 db 44, 32
 align 8
L136:
 dq 1224979098644774917
 db 32, 109, 111, 118, 32
 align 8
L137:
 dq 1224979098644774915
 db 32, 59, 32
 align 8
L138:
 dq 1224979098644774913
 db 10
 align 8
L139:
 dq 1224979098644774917
 db 32, 106, 109, 112, 32
 align 8
L140:
 dq 1224979098644774913
 db 10
 align 8
L141:
 dq 1224979098644774924
 db 44, 32, 70, 65, 76, 83, 69, 10, 32, 106, 101, 32
 align 8
L142:
 dq 1224979098644774917
 db 32, 99, 109, 112, 32
 align 8
L143:
 dq 1224979098644774913
 db 10
 align 8
L144:
 dq 1224979098644774915
 db 93, 44, 32
 align 8
L145:
 dq 1224979098644774921
 db 32, 59, 32, 40, 115, 101, 116, 33, 32
 align 8
L146:
 dq 1224979098644774927
 db 32, 109, 111, 118, 32, 91, 108, 111, 99, 97, 108, 115, 32, 43, 32
 align 8
L147:
 dq 1224979098644774918
 db 32, 46, 46, 46, 41, 10
 align 8
L148:
 dq 1224979098644774924
 db 44, 32, 91, 108, 111, 99, 97, 108, 115, 32, 43, 32
 align 8
L149:
 dq 1224979098644774916
 db 93, 32, 59, 32
 align 8
L150:
 dq 1224979098644774917
 db 32, 109, 111, 118, 32
 align 8
L151:
 dq 1224979098644774913
 db 10
 align 8
L152:
 dq 1224979098644774915
 db 44, 32, 91
 align 8
L153:
 dq 1224979098644774916
 db 93, 32, 59, 32
 align 8
L154:
 dq 1224979098644774917
 db 32, 109, 111, 118, 32
 align 8
L155:
 dq 1224979098644774913
 db 10
 align 8
L156:
 dq 1224979098644774915
 db 93, 44, 32
 align 8
L157:
 dq 1224979098644774921
 db 32, 59, 32, 40, 115, 101, 116, 33, 32
 align 8
L158:
 dq 1224979098644774918
 db 32, 109, 111, 118, 32, 91
 align 8
L159:
 dq 1224979098644774918
 db 32, 46, 46, 46, 41, 10
 align 8
L160:
 dq 1224979098644774914
 db 59, 32
 align 8
L161:
 dq 1224979098644774913
 db 10
 align 8
L162:
 dq 1224979098644774914
 db 59, 32
 align 8
L163:
 dq 1224979098644774913
 db 10
 align 8
L164:
 dq 1224979098644774922
 db 32, 97, 100, 100, 32, 114, 115, 112, 44, 32
 align 8
L165:
 dq 1224979098644774913
 db 10
 align 8
L166:
 dq 1224979098644774922
 db 32, 115, 117, 98, 32, 114, 115, 112, 44, 32
 align 8
L167:
 dq 1224979098644774913
 db 10
 align 8
L168:
 dq 1224979098644774915
 db 93, 44, 32
 align 8
L169:
 dq 1224979098644774927
 db 32, 109, 111, 118, 32, 91, 108, 111, 99, 97, 108, 115, 32, 43, 32
 align 8
L170:
 dq 1224979098644774913
 db 10
 align 8
L171:
 dq 1224979098644774914
 db 44, 32
 align 8
L172:
 dq 1224979098644774917
 db 32, 97, 100, 100, 32
 align 8
L173:
 dq 1224979098644774913
 db 10
 align 8
L176:
 dq 1224979098644774914
 db 44, 32
 align 8
L177:
 dq 1224979098644774917
 db 32, 109, 111, 118, 32
 align 8
L178:
 dq 1224979098644774913
 db 10
 align 8
L180:
 dq 1224979098644774922
 db 32, 109, 111, 118, 32, 114, 97, 120, 44, 32
 align 8
L181:
 dq 1224979098644774931
 db 10, 32, 109, 111, 118, 32, 91, 65, 76, 76, 79, 67, 93, 44, 32, 114, 97, 120, 10
 align 8
L184:
 dq 1224979098644774932
 db 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 65, 76, 76, 79, 67, 32, 43, 32
 align 8
L185:
 dq 1224979098644774917
 db 93, 44, 32, 102, 95
 align 8
L186:
 dq 1224979098644774913
 db 10
 align 8
L187:
 dq 1224979098644774925
 db 32, 108, 101, 97, 32, 114, 97, 120, 44, 32, 91, 102, 95
 align 8
L188:
 dq 1224979098644774914
 db 93, 10
 align 8
L189:
 dq 1224979098644774932
 db 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 65, 76, 76, 79, 67, 32, 43, 32
 align 8
L190:
 dq 1224979098644774919
 db 93, 44, 32, 114, 97, 120, 10
 align 8
L191:
 dq 1224979098644774917
 db 32, 101, 113, 117, 32
 align 8
L192:
 dq 1224979098644774913
 db 10
 align 8
L193:
 dq 1224979098644774918
 db 32, 114, 101, 115, 98, 32
 align 8
L194:
 dq 1224979098644774913
 db 10
 align 8
L195:
 dq 1224979098644774919
 db 32, 97, 108, 105, 103, 110, 32
 align 8
L196:
 dq 1224979098644774913
 db 10
 align 8
L197:
 dq 1224979098644774928
 db 32, 100, 113, 32, 95, 95, 102, 108, 111, 97, 116, 54, 52, 95, 95, 40
 align 8
L198:
 dq 1224979098644774914
 db 41, 10
 align 8
L199:
 dq 1224979098644774916
 db 32, 100, 98, 32
 align 8
L200:
 dq 1224979098644774913
 db 10
 align 8
L207:
 dq 1224979098644774914
 db 44, 32
 align 8
L210:
 dq 1224979098644774916
 db 32, 100, 113, 32
 align 8
L212:
 dq 1224979098644774913
 db 10
 align 8
L213:
 dq 1224979098644774921
 db 32, 115, 101, 99, 116, 105, 111, 110, 32
 align 8
L214:
 dq 1224979098644774913
 db 10
 align 8
L215:
 dq 1224979098644774927
 db 32, 115, 101, 99, 116, 105, 111, 110, 32, 46, 100, 97, 116, 97, 10
 align 8
L220:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L221:
 dq 1224979098644774938
 db 59, 59, 59, 32, 69, 78, 68, 32, 79, 70, 32, 71, 69, 78, 69, 82, 65, 84, 69, 68, 32, 67, 79, 68, 69, 10
 align 8
L222:
 dq 1224979098644774935
 db 59, 59, 59, 32, 71, 69, 78, 69, 82, 65, 84, 69, 68, 32, 66, 89, 32, 66, 79, 78, 69, 83, 32
 align 8
L223:
 dq 1224979098644774913
 db 10
 align 8
L224:
 dq 1224979098644774920
 db 37, 100, 101, 102, 105, 110, 101, 32
 align 8
L225:
 dq 1224979098644774913
 db 10
 align 8
L226:
 dq 1224979098644774941
 db 37, 105, 110, 99, 108, 117, 100, 101, 32, 34, 120, 56, 54, 95, 54, 52, 47, 98, 111, 110, 101, 115, 108, 105, 98, 46, 115, 34, 10
 align 8
L233:
 dq 1224979098644774914
 db 45, 118
 align 8
L238:
 dq 1224979098644774914
 db 45, 111
 align 8
L246:
 dq 1224979098644774914
 db 45, 76
 align 8
L251:
 dq 1224979098644774913
 db 58
 align 8
L255:
 dq 1224979098644774929
 db 45, 99, 97, 115, 101, 45, 105, 110, 115, 101, 110, 115, 105, 116, 105, 118, 101
 align 8
L260:
 dq 1224979098644774920
 db 45, 102, 101, 97, 116, 117, 114, 101
 align 8
L270:
 dq 1224979098644774913
 db 58
 align 8
L274:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6550:
 dq 1224979098644774989
 db 117, 115, 97, 103, 101, 58, 32, 98, 111, 110, 101, 115, 32, 91, 45, 118, 93, 32, 91, 45, 111, 32, 79, 85, 84, 70, 73, 76, 69, 93, 32, 91, 45, 76, 32, 76, 73, 66, 82, 65, 82, 89, 95, 80, 65, 84, 72, 93, 32, 91, 45, 102, 101, 97, 116, 117, 114, 101, 32, 70, 69, 65, 84, 85, 82, 69, 93, 32, 91, 45, 101, 120, 112, 97, 110, 100, 93
 align 8
L6552:
 dq 1224979098644774983
 db 32, 91, 45, 100, 117, 109, 112, 45, 102, 101, 97, 116, 117, 114, 101, 115, 93, 32, 91, 45, 99, 111, 109, 109, 101, 110, 116, 93, 32, 91, 45, 110, 111, 115, 116, 100, 108, 105, 98, 93, 32, 91, 45, 99, 97, 115, 101, 45, 105, 110, 115, 101, 110, 115, 105, 116, 105, 118, 101, 93, 32, 91, 45, 118, 101, 114, 98, 111, 115, 101, 93
 align 8
L6554:
 dq 1224979098644774937
 db 32, 91, 45, 100, 117, 109, 112, 45, 117, 110, 117, 115, 101, 100, 93, 32, 70, 73, 76, 69, 78, 65, 77, 69, 10
 align 8
L285:
 dq 1224979098644774934
 db 117, 110, 107, 110, 111, 119, 110, 32, 108, 111, 99, 97, 108, 32, 118, 97, 114, 105, 97, 98, 108, 101
 align 8
L287:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L290:
 dq 1224979098644774913
 db 40
 align 8
L291:
 dq 1224979098644774922
 db 32, 60, 60, 32, 49, 41, 32, 124, 32, 49
 align 8
L314:
 dq 1224979098644774916
 db 110, 117, 108, 108
 align 8
L317:
 dq 1224979098644774916
 db 116, 114, 117, 101
 align 8
L320:
 dq 1224979098644774917
 db 102, 97, 108, 115, 101
 align 8
L321:
 dq 1224979098644774923
 db 98, 97, 100, 32, 108, 105, 116, 101, 114, 97, 108
 align 8
L325:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L340:
 dq 1224979098644774930
 db 48, 120, 55, 102, 102, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49
 align 8
L351:
 dq 1224979098644774930
 db 48, 120, 55, 102, 102, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
 align 8
L352:
 dq 1224979098644774930
 db 48, 120, 102, 102, 102, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
 align 8
L368:
 dq 1224979098644774920
 db 99, 111, 110, 115, 114, 101, 115, 116
 align 8
L390:
 dq 1224979098644774914
 db 102, 95
 align 8
L393:
 dq 1224979098644774916
 db 102, 95, 99, 95
 align 8
L394:
 dq 1224979098644774913
 db 95
 align 8
L411:
 dq 1224979098644774929
 db 67, 72, 69, 67, 75, 95, 65, 82, 71, 67, 95, 70, 65, 73, 76, 69, 68
 align 8
L413:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L414:
 dq 1224979098644774914
 db 102, 95
 align 8
L462:
 dq 1224979098644774915
 db 32, 61, 32
 align 8
L463:
 dq 1224979098644774922
 db 32, 61, 32, 108, 111, 99, 97, 108, 32, 35
 align 8
L479:
 dq 1224979098644774921
 db 117, 110, 100, 101, 102, 105, 110, 101, 100
 align 8
L480:
 dq 1224979098644774921
 db 100, 114, 111, 112, 112, 101, 100, 58, 32
 align 8
L540:
 dq 1224979098644774948
 db 116, 111, 111, 32, 109, 97, 110, 121, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 116, 111, 32, 96, 36, 105, 110, 108, 105, 110, 101, 45, 116, 101, 115, 116, 39
 align 8
L543:
 dq 1224979098644774913
 db 59
 align 8
L559:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L590:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L618:
 dq 1224979098644774922
 db 86, 69, 67, 84, 79, 82, 32, 124, 32, 49
 align 8
L646:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L667:
 dq 1224979098644774943
 db 116, 111, 111, 32, 109, 97, 110, 121, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 116, 111, 32, 96, 36, 105, 110, 108, 105, 110, 101, 39
 align 8
L670:
 dq 1224979098644774913
 db 59
 align 8
L702:
 dq 1224979098644774948
 db 116, 111, 111, 32, 109, 97, 110, 121, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 116, 111, 32, 96, 36, 105, 110, 108, 105, 110, 101, 45, 116, 101, 115, 116, 39
 align 8
L705:
 dq 1224979098644774913
 db 59
 align 8
L737:
 dq 1224979098644774945
 db 116, 111, 111, 32, 109, 97, 110, 121, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 116, 111, 32, 96, 36, 97, 108, 108, 111, 99, 97, 116, 101, 39
 align 8
L744:
 dq 1224979098644774913
 db 47
 align 8
L747:
 dq 1224979098644774923
 db 32, 43, 32, 65, 76, 73, 71, 78, 69, 68, 40
 align 8
L748:
 dq 1224979098644774913
 db 41
 align 8
L761:
 dq 1224979098644774921
 db 117, 110, 100, 101, 102, 105, 110, 101, 100
 align 8
L788:
 dq 1224979098644774916
 db 110, 117, 108, 108
 align 8
L789:
 dq 1224979098644774913
 db 39
 align 8
L803:
 dq 1224979098644774939
 db 67, 79, 77, 80, 73, 76, 69, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L805:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L806:
 dq 1224979098644774913
 db 76
 align 8
L813:
 dq 1224979098644774917
 db 46, 100, 97, 116, 97
 align 8
L814:
 dq 1224979098644774927
 db 115, 121, 109, 98, 111, 108, 95, 108, 105, 116, 101, 114, 97, 108, 115
 align 8
L815:
 dq 1224979098644774917
 db 102, 97, 108, 115, 101
 align 8
L816:
 dq 1224979098644774917
 db 46, 100, 97, 116, 97
 align 8
L827:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6549:
 dq 1224979098644774916
 db 78, 85, 76, 76
 align 8
L6548:
 dq 1224979098644774918
 db 83, 89, 77, 66, 79, 76
 align 8
L6547:
 dq 1224979098644774916
 db 80, 65, 73, 82
 align 8
L6546:
 dq 1224979098644774918
 db 86, 69, 67, 84, 79, 82
 align 8
L6545:
 dq 1224979098644774916
 db 67, 72, 65, 82
 align 8
L6544:
 dq 1224979098644774915
 db 69, 79, 70
 align 8
L6543:
 dq 1224979098644774916
 db 86, 79, 73, 68
 align 8
L6542:
 dq 1224979098644774919
 db 66, 79, 79, 76, 69, 65, 78
 align 8
L6541:
 dq 1224979098644774916
 db 80, 79, 82, 84
 align 8
L6540:
 dq 1224979098644774919
 db 80, 82, 79, 77, 73, 83, 69
 align 8
L6539:
 dq 1224979098644774918
 db 82, 69, 67, 79, 82, 68
 align 8
L6538:
 dq 1224979098644774918
 db 70, 76, 79, 78, 85, 77
 align 8
L6537:
 dq 1224979098644774918
 db 83, 84, 82, 73, 78, 71
 align 8
L6536:
 dq 1224979098644774922
 db 66, 89, 84, 69, 86, 69, 67, 84, 79, 82
 align 8
L6535:
 dq 1224979098644774919
 db 67, 76, 79, 83, 85, 82, 69
 align 8
L873:
 dq 1224979098644774924
 db 105, 110, 118, 97, 108, 105, 100, 32, 116, 121, 112, 101
 align 8
L874:
 dq 1224979098644774917
 db 46, 100, 97, 116, 97
 align 8
L880:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L881:
 dq 1224979098644774917
 db 46, 116, 101, 120, 116
 align 8
L882:
 dq 1224979098644774920
 db 116, 111, 112, 108, 101, 118, 101, 108
 align 8
L885:
 dq 1224979098644774917
 db 46, 100, 97, 116, 97
 align 8
L886:
 dq 1224979098644774919
 db 103, 108, 111, 98, 97, 108, 115
 align 8
L887:
 dq 1224979098644774921
 db 117, 110, 100, 101, 102, 105, 110, 101, 100
 align 8
L888:
 dq 1224979098644774922
 db 101, 110, 100, 103, 108, 111, 98, 97, 108, 115
 align 8
L6534:
 dq 1224979098644774920
 db 102, 101, 97, 116, 117, 114, 101, 58
 align 8
L6533:
 dq 1224979098644774925
 db 108, 105, 98, 114, 97, 114, 121, 45, 112, 97, 116, 104, 58
 align 8
L894:
 dq 1224979098644774930
 db 66, 79, 78, 69, 83, 95, 76, 73, 66, 82, 65, 82, 89, 95, 80, 65, 84, 72
 align 8
L897:
 dq 1224979098644774913
 db 58
 align 8
L6531:
 dq 1224979098644774913
 db 46
 align 8
L6527:
 dq 1224979098644774928
 db 47, 117, 115, 114, 47, 115, 104, 97, 114, 101, 47, 98, 111, 110, 101, 115
 align 8
L6529:
 dq 1224979098644774934
 db 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 115, 104, 97, 114, 101, 47, 98, 111, 110, 101, 115
 align 8
L6526:
 dq 1224979098644774920
 db 118, 101, 114, 98, 111, 115, 101, 58
 align 8
L6525:
 dq 1224979098644774926
 db 100, 117, 109, 112, 45, 102, 101, 97, 116, 117, 114, 101, 115, 58
 align 8
L6524:
 dq 1224979098644774915
 db 112, 105, 99
 align 8
L6523:
 dq 1224979098644774924
 db 100, 117, 109, 112, 45, 115, 111, 117, 114, 99, 101, 58
 align 8
L922:
 dq 1224979098644774928
 db 101, 120, 112, 97, 110, 100, 105, 110, 103, 32, 115, 121, 110, 116, 97, 120
 align 8
L6522:
 dq 1224979098644774919
 db 101, 120, 112, 97, 110, 100, 58
 align 8
L6521:
 dq 1224979098644774920
 db 100, 117, 109, 112, 45, 99, 99, 58
 align 8
L6520:
 dq 1224979098644774921
 db 100, 117, 109, 112, 45, 99, 112, 115, 58
 align 8
L6519:
 dq 1224979098644774924
 db 100, 117, 109, 112, 45, 110, 101, 115, 116, 101, 100, 58
 align 8
L6518:
 dq 1224979098644774924
 db 111, 117, 116, 112, 117, 116, 45, 102, 105, 108, 101, 58
 align 8
L930:
 dq 1224979098644774926
 db 99, 97, 110, 111, 110, 105, 99, 97, 108, 105, 122, 105, 110, 103
 align 8
L931:
 dq 1224979098644774929
 db 99, 111, 110, 118, 101, 114, 116, 105, 110, 103, 32, 116, 111, 32, 67, 80, 83
 align 8
L934:
 dq 1224979098644774933
 db 112, 114, 111, 112, 97, 103, 97, 116, 105, 110, 103, 32, 99, 111, 110, 115, 116, 97, 110, 116, 115
 align 8
L935:
 dq 1224979098644774938
 db 100, 101, 116, 101, 99, 116, 105, 110, 103, 32, 117, 110, 117, 115, 101, 100, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115
 align 8
L936:
 dq 1224979098644774926
 db 115, 105, 109, 112, 108, 105, 102, 105, 99, 97, 116, 105, 111, 110
 align 8
L6517:
 dq 1224979098644774928
 db 100, 117, 109, 112, 45, 115, 105, 109, 112, 108, 105, 102, 105, 101, 100, 58
 align 8
L6516:
 dq 1224979098644774924
 db 100, 117, 109, 112, 45, 117, 110, 117, 115, 101, 100, 58
 align 8
L6515:
 dq 1224979098644774917
 db 100, 117, 109, 112, 58
 align 8
L947:
 dq 1224979098644774931
 db 99, 111, 110, 118, 101, 114, 116, 105, 110, 103, 32, 99, 108, 111, 115, 117, 114, 101, 115
 align 8
L6514:
 dq 1224979098644774920
 db 99, 111, 109, 109, 101, 110, 116, 58
 align 8
L6513:
 dq 1224979098644774917
 db 99, 104, 101, 99, 107
 align 8
L952:
 dq 1224979098644774927
 db 103, 101, 110, 101, 114, 97, 116, 105, 110, 103, 32, 99, 111, 100, 101
 align 8
L955:
 dq 1224979098644774922
 db 32, 32, 100, 114, 111, 112, 112, 101, 100, 32
 align 8
L956:
 dq 1224979098644774931
 db 32, 103, 108, 111, 98, 97, 108, 32, 97, 115, 115, 105, 103, 110, 109, 101, 110, 116, 115
 align 8
L6512:
 dq 1224979098644774921
 db 110, 111, 115, 116, 100, 108, 105, 98, 58
 align 8
L6510:
 dq 1224979098644774920
 db 98, 97, 115, 101, 46, 115, 99, 109
 align 8
L964:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L975:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1179:
 dq 1224979098644774941
 db 67, 80, 83, 45, 99, 97, 108, 108, 32, 105, 110, 32, 110, 111, 110, 45, 116, 97, 105, 108, 32, 112, 111, 115, 105, 116, 105, 111, 110
 align 8
L1184:
 dq 1224979098644774941
 db 67, 80, 83, 45, 99, 97, 108, 108, 32, 105, 110, 32, 110, 111, 110, 45, 116, 97, 105, 108, 32, 112, 111, 115, 105, 116, 105, 111, 110
 align 8
L1185:
 dq 1224979098644774934
 db 82, 65, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L1187:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1195:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1215:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1225:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1245:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1259:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1273:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1330:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6503:
 dq 1224979098644774917
 db 70, 65, 76, 83, 69
 align 8
L1353:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6502:
 dq 1224979098644774916
 db 103, 114, 101, 121
 align 8
L6501:
 dq 1224979098644774917
 db 98, 108, 97, 99, 107
 align 8
L1368:
 dq 1224979098644774946
 db 99, 121, 99, 108, 101, 32, 100, 101, 116, 101, 99, 116, 101, 100, 32, 105, 110, 32, 116, 111, 112, 111, 108, 111, 103, 105, 99, 97, 108, 32, 115, 111, 114, 116
 align 8
L6493:
 dq 1224979098644774930
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 99, 108, 97, 117, 115, 101
 align 8
L6320:
 dq 1224979098644774916
 db 114, 101, 113, 49
 align 8
L6309:
 dq 1224979098644774916
 db 114, 101, 113, 50
 align 8
L6256:
 dq 1224979098644774915
 db 114, 101, 113
 align 8
L6229:
 dq 1224979098644774922
 db 102, 101, 97, 116, 117, 114, 101, 45, 105, 100
 align 8
L6228:
 dq 1224979098644774916
 db 98, 111, 100, 121
 align 8
L6213:
 dq 1224979098644774924
 db 109, 111, 114, 101, 45, 99, 108, 97, 117, 115, 101, 115
 align 8
L6188:
 dq 1224979098644774919
 db 112, 114, 111, 103, 114, 97, 109
 align 8
L1402:
 dq 1224979098644774932
 db 105, 110, 118, 97, 108, 105, 100, 32, 112, 114, 111, 103, 114, 97, 109, 32, 102, 111, 114, 109
 align 8
L1404:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6187:
 dq 1224979098644774920
 db 114, 101, 113, 117, 105, 114, 101, 115
 align 8
L1414:
 dq 1224979098644774942
 db 114, 101, 113, 117, 105, 114, 101, 100, 32, 102, 101, 97, 116, 117, 114, 101, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101
 align 8
L6186:
 dq 1224979098644774916
 db 118, 111, 105, 100
 align 8
L6183:
 dq 1224979098644774917
 db 102, 105, 108, 101, 115
 align 8
L6182:
 dq 1224979098644774916
 db 99, 111, 100, 101
 align 8
L6181:
 dq 1224979098644774919
 db 112, 114, 111, 118, 105, 100, 101
 align 8
L6176:
 dq 1224979098644774917
 db 101, 114, 114, 111, 114
 align 8
L6175:
 dq 1224979098644774919
 db 105, 110, 99, 108, 117, 100, 101
 align 8
L6174:
 dq 1224979098644774923
 db 99, 111, 110, 100, 45, 101, 120, 112, 97, 110, 100
 align 8
L6173:
 dq 1224979098644774924
 db 102, 101, 97, 116, 117, 114, 101, 45, 99, 111, 110, 100
 align 8
L1470:
 dq 1224979098644774936
 db 110, 111, 32, 114, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116, 32, 115, 97, 116, 105, 115, 102, 105, 101, 100
 align 8
L6172:
 dq 1224979098644774916
 db 101, 108, 115, 101
 align 8
L1492:
 dq 1224979098644774933
 db 105, 110, 118, 97, 108, 105, 100, 32, 99, 108, 97, 117, 115, 101, 32, 115, 121, 110, 116, 97, 120
 align 8
L1494:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1495:
 dq 1224979098644774934
 db 105, 110, 118, 97, 108, 105, 100, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 108, 97, 117, 115, 101
 align 8
L1497:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6171:
 dq 1224979098644774915
 db 110, 111, 116
 align 8
L1523:
 dq 1224979098644774939
 db 105, 110, 118, 97, 108, 105, 100, 32, 102, 101, 97, 116, 117, 114, 101, 32, 114, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116
 align 8
L1525:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1539:
 dq 1224979098644774926
 db 102, 105, 108, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100
 align 8
L1542:
 dq 1224979098644774913
 db 47
 align 8
L1553:
 dq 1224979098644774928
 db 105, 110, 118, 97, 108, 105, 100, 32, 102, 105, 108, 101, 110, 97, 109, 101
 align 8
L1554:
 dq 1224979098644774913
 db 47
 align 8
L1555:
 dq 1224979098644774920
 db 70, 69, 65, 84, 85, 82, 69, 95
 align 8
L1566:
 dq 1224979098644774915
 db 95, 95, 95
 align 8
L1579:
 dq 1224979098644774913
 db 85
 align 8
L1580:
 dq 1224979098644774913
 db 95
 align 8
L1696:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L1723:
 dq 1224979098644774913
 db 107
 align 8
L1742:
 dq 1224979098644774913
 db 107
 align 8
L1836:
 dq 1224979098644774915
 db 116, 119, 111
 align 8
L1838:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2073:
 dq 1224979098644774915
 db 111, 110, 101
 align 8
L2075:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2076:
 dq 1224979098644774913
 db 107
 align 8
L2080:
 dq 1224979098644774913
 db 116
 align 8
L2120:
 dq 1224979098644774923
 db 117, 110, 107, 110, 111, 119, 110, 32, 114, 101, 102
 align 8
L2122:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2256:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2302:
 dq 1224979098644774934
 db 67, 67, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L2304:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6158:
 dq 1224979098644774913
 db 42
 align 8
L2436:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6157:
 dq 1224979098644774924
 db 36, 103, 108, 111, 98, 97, 108, 45, 115, 101, 116, 33
 align 8
L2487:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2525:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2543:
 dq 1224979098644774934
 db 67, 67, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L2545:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6156:
 dq 1224979098644774923
 db 36, 108, 111, 99, 97, 108, 45, 115, 101, 116, 33
 align 8
L2595:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2597:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6155:
 dq 1224979098644774926
 db 36, 119, 111, 114, 100, 45, 98, 111, 120, 45, 115, 101, 116, 33
 align 8
L6154:
 dq 1224979098644774927
 db 36, 102, 108, 111, 97, 116, 45, 98, 111, 120, 45, 115, 101, 116, 33
 align 8
L6153:
 dq 1224979098644774921
 db 36, 98, 111, 120, 45, 115, 101, 116, 33
 align 8
L6152:
 dq 1224979098644774921
 db 36, 119, 111, 114, 100, 45, 98, 111, 120
 align 8
L6151:
 dq 1224979098644774922
 db 36, 102, 108, 111, 97, 116, 45, 98, 111, 120
 align 8
L6150:
 dq 1224979098644774916
 db 36, 98, 111, 120
 align 8
L6149:
 dq 1224979098644774918
 db 102, 105, 120, 110, 117, 109
 align 8
L6148:
 dq 1224979098644774925
 db 36, 119, 111, 114, 100, 45, 98, 111, 120, 45, 114, 101, 102
 align 8
L6147:
 dq 1224979098644774918
 db 102, 108, 111, 110, 117, 109
 align 8
L6146:
 dq 1224979098644774926
 db 36, 102, 108, 111, 97, 116, 45, 98, 111, 120, 45, 114, 101, 102
 align 8
L6145:
 dq 1224979098644774918
 db 37, 101, 114, 114, 111, 114
 align 8
L2626:
 dq 1224979098644774922
 db 32, 32, 114, 101, 109, 111, 118, 101, 100, 32
 align 8
L2627:
 dq 1224979098644774929
 db 32, 103, 108, 111, 98, 97, 108, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115
 align 8
L2630:
 dq 1224979098644774922
 db 32, 32, 100, 114, 111, 112, 112, 101, 100, 32
 align 8
L2631:
 dq 1224979098644774935
 db 32, 112, 117, 114, 101, 32, 108, 111, 99, 97, 108, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 115
 align 8
L6144:
 dq 1224979098644774919
 db 36, 117, 110, 117, 115, 101, 100
 align 8
L2842:
 dq 1224979098644774930
 db 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L2844:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2855:
 dq 1224979098644774925
 db 32, 32, 115, 105, 109, 112, 108, 105, 102, 105, 101, 100, 32
 align 8
L2856:
 dq 1224979098644774918
 db 32, 102, 111, 114, 109, 115
 align 8
L2914:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L2916:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3010:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3124:
 dq 1224979098644774940
 db 83, 73, 77, 80, 76, 73, 70, 89, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L3126:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3129:
 dq 1224979098644774925
 db 32, 32, 112, 114, 111, 112, 97, 103, 97, 116, 101, 100, 32
 align 8
L3130:
 dq 1224979098644774928
 db 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 118, 97, 108, 117, 101, 115
 align 8
L3155:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6127:
 dq 1224979098644774917
 db 36, 99, 97, 108, 108
 align 8
L3320:
 dq 1224979098644774930
 db 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L3322:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3348:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3462:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3518:
 dq 1224979098644774930
 db 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L3520:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3560:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6118:
 dq 1224979098644774926
 db 36, 117, 110, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100
 align 8
L6115:
 dq 1224979098644774924
 db 36, 99, 108, 111, 115, 117, 114, 101, 45, 114, 101, 102
 align 8
L6114:
 dq 1224979098644774920
 db 36, 98, 111, 120, 45, 114, 101, 102
 align 8
L6113:
 dq 1224979098644774923
 db 36, 103, 108, 111, 98, 97, 108, 45, 114, 101, 102
 align 8
L6112:
 dq 1224979098644774922
 db 36, 108, 111, 99, 97, 108, 45, 114, 101, 102
 align 8
L3657:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3711:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L6105:
 dq 1224979098644774920
 db 36, 99, 108, 111, 115, 117, 114, 101
 align 8
L3783:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L3784:
 dq 1224979098644774913
 db 94
 align 8
L3785:
 dq 1224979098644774922
 db 32, 32, 105, 110, 108, 105, 110, 101, 100, 32
 align 8
L3786:
 dq 1224979098644774929
 db 32, 109, 97, 110, 105, 102, 101, 115, 116, 32, 108, 97, 109, 98, 100, 97, 115
 align 8
L3828:
 dq 1224979098644774956
 db 116, 111, 111, 32, 109, 97, 110, 121, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 105, 110, 32, 109, 97, 110, 105, 102, 101, 115, 116, 32, 96, 108, 97, 109, 98, 100, 97, 39, 32, 99, 97, 108, 108
 align 8
L3833:
 dq 1224979098644774955
 db 116, 111, 111, 32, 102, 101, 119, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 105, 110, 32, 109, 97, 110, 105, 102, 101, 115, 116, 32, 96, 108, 97, 109, 98, 100, 97, 39, 32, 99, 97, 108, 108
 align 8
L3836:
 dq 1224979098644774931
 db 105, 110, 118, 97, 108, 105, 100, 32, 108, 97, 109, 98, 100, 97, 32, 108, 105, 115, 116
 align 8
L3862:
 dq 1224979098644774961
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 99, 108, 97, 117, 115, 101, 32, 105, 110, 32, 109, 97, 110, 105, 102, 101, 115, 116, 32, 96, 99, 97, 115, 101, 45, 108, 97, 109, 98, 100, 97, 39, 32, 99, 97, 108, 108
 align 8
L3873:
 dq 1224979098644774931
 db 105, 110, 118, 97, 108, 105, 100, 32, 108, 97, 109, 98, 100, 97, 32, 108, 105, 115, 116
 align 8
L6104:
 dq 1224979098644774917
 db 37, 108, 105, 115, 116
 align 8
L6103:
 dq 1224979098644774922
 db 36, 112, 114, 105, 109, 105, 116, 105, 118, 101
 align 8
L6102:
 dq 1224979098644774919
 db 36, 105, 110, 108, 105, 110, 101
 align 8
L6101:
 dq 1224979098644774924
 db 36, 105, 110, 108, 105, 110, 101, 45, 116, 101, 115, 116
 align 8
L6100:
 dq 1224979098644774921
 db 36, 97, 108, 108, 111, 99, 97, 116, 101
 align 8
L6099:
 dq 1224979098644774919
 db 36, 108, 97, 109, 98, 100, 97
 align 8
L6098:
 dq 1224979098644774924
 db 36, 99, 97, 115, 101, 45, 108, 97, 109, 98, 100, 97
 align 8
L6097:
 dq 1224979098644774922
 db 36, 117, 110, 100, 101, 102, 105, 110, 101, 100
 align 8
L4127:
 dq 1224979098644774930
 db 105, 110, 118, 97, 108, 105, 100, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L4129:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L4156:
 dq 1224979098644774931
 db 105, 110, 118, 97, 108, 105, 100, 32, 108, 97, 109, 98, 100, 97, 45, 108, 105, 115, 116
 align 8
L4168:
 dq 1224979098644774944
 db 78, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 114, 117, 108, 101, 32, 102, 111, 114, 32, 109, 97, 99, 114, 111, 32, 117, 115, 101, 58, 32
 align 8
L4183:
 dq 1224979098644774955
 db 85, 110, 101, 113, 117, 97, 108, 32, 115, 101, 113, 117, 101, 110, 99, 101, 32, 108, 101, 110, 103, 116, 104, 115, 32, 102, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 118, 97, 114, 115, 58, 32
 align 8
L4184:
 dq 1224979098644774928
 db 32, 105, 110, 32, 109, 97, 99, 114, 111, 32, 99, 97, 108, 108, 58, 32
 align 8
L4256:
 dq 1224979098644774949
 db 80, 97, 116, 116, 101, 114, 110, 32, 108, 105, 116, 101, 114, 97, 108, 115, 32, 108, 105, 115, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 108, 105, 115, 116, 58, 32
 align 8
L4276:
 dq 1224979098644774935
 db 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 115, 121, 110, 116, 97, 120, 32, 114, 117, 108, 101, 58, 32
 align 8
L4281:
 dq 1224979098644774931
 db 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 112, 97, 116, 116, 101, 114, 110, 58, 32
 align 8
L4316:
 dq 1224979098644774951
 db 84, 101, 109, 112, 108, 97, 116, 101, 32, 101, 108, 108, 105, 112, 115, 105, 115, 32, 99, 108, 111, 115, 101, 115, 32, 110, 111, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 58, 32
 align 8
L4317:
 dq 1224979098644774926
 db 32, 105, 110, 32, 116, 101, 109, 112, 108, 97, 116, 101, 58, 32
 align 8
L4318:
 dq 1224979098644774943
 db 80, 97, 116, 116, 101, 114, 110, 32, 118, 97, 114, 32, 117, 115, 101, 100, 32, 97, 116, 32, 98, 97, 100, 32, 100, 101, 112, 116, 104, 58, 32
 align 8
L4319:
 dq 1224979098644774926
 db 32, 105, 110, 32, 116, 101, 109, 112, 108, 97, 116, 101, 58, 32
 align 8
L4332:
 dq 1224979098644774935
 db 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 118, 97, 114, 58, 32
 align 8
L4333:
 dq 1224979098644774925
 db 32, 105, 110, 32, 112, 97, 116, 116, 101, 114, 110, 58, 32
 align 8
L4340:
 dq 1224979098644774917
 db 97, 32, 39, 46, 39
 align 8
L4343:
 dq 1224979098644774931
 db 116, 104, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 107, 101, 121, 119, 111, 114, 100
 align 8
L4346:
 dq 1224979098644774919
 db 110, 111, 116, 104, 105, 110, 103
 align 8
L4353:
 dq 1224979098644774918
 db 97, 32, 39, 35, 40, 39
 align 8
L4356:
 dq 1224979098644774917
 db 97, 32, 39, 40, 39
 align 8
L4359:
 dq 1224979098644774917
 db 97, 32, 39, 46, 39
 align 8
L4364:
 dq 1224979098644774917
 db 97, 32, 39, 46, 39
 align 8
L4367:
 dq 1224979098644774923
 db 97, 110, 32, 101, 108, 108, 105, 112, 115, 105, 115
 align 8
L4374:
 dq 1224979098644774931
 db 69, 108, 108, 105, 112, 115, 105, 115, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32
 align 8
L4375:
 dq 1224979098644774950
 db 73, 109, 112, 114, 111, 112, 101, 114, 32, 108, 105, 115, 116, 32, 112, 97, 116, 116, 101, 114, 110, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 108, 108, 105, 112, 115, 105, 115
 align 8
L4376:
 dq 1224979098644774957
 db 76, 105, 115, 116, 32, 111, 114, 32, 118, 101, 99, 116, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 119, 105, 116, 104, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 101, 108, 108, 105, 112, 115, 101, 115
 align 8
L4377:
 dq 1224979098644774914
 db 58, 32
 align 8
L4378:
 dq 1224979098644774926
 db 32, 105, 110, 32, 116, 101, 109, 112, 108, 97, 116, 101, 58, 32
 align 8
L4379:
 dq 1224979098644774925
 db 32, 105, 110, 32, 112, 97, 116, 116, 101, 114, 110, 58, 32
 align 8
L4384:
 dq 1224979098644774920
 db 78, 111, 110, 45, 105, 100, 58, 32
 align 8
L4385:
 dq 1224979098644774934
 db 32, 105, 110, 32, 108, 105, 116, 101, 114, 97, 108, 115, 32, 108, 105, 115, 116, 32, 111, 102, 58, 32
 align 8
L4388:
 dq 1224979098644774921
 db 69, 108, 108, 105, 112, 115, 105, 115, 32
 align 8
L4389:
 dq 1224979098644774934
 db 32, 105, 110, 32, 108, 105, 116, 101, 114, 97, 108, 115, 32, 108, 105, 115, 116, 32, 111, 102, 58, 32
 align 8
L6090:
 dq 1224979098644774915
 db 46, 46, 46
 align 8
L4425:
 dq 1224979098644774952
 db 78, 111, 110, 45, 115, 121, 110, 116, 97, 120, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 105, 115, 32, 97, 32, 115, 121, 110, 116, 97, 120, 32, 98, 111, 100, 121, 58, 32
 align 8
L4436:
 dq 1224979098644774944
 db 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 58, 32
 align 8
L4437:
 dq 1224979098644774918
 db 32, 97, 110, 100, 58, 32
 align 8
L4462:
 dq 1224979098644774927
 db 73, 109, 112, 114, 111, 112, 101, 114, 32, 108, 105, 115, 116, 58, 32
 align 8
L4463:
 dq 1224979098644774924
 db 69, 109, 112, 116, 121, 32, 108, 105, 115, 116, 58, 32
 align 8
L4464:
 dq 1224979098644774930
 db 78, 111, 110, 45, 83, 45, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 58, 32
 align 8
L4465:
 dq 1224979098644774958
 db 32, 117, 115, 101, 100, 32, 97, 115, 32, 97, 110, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 44, 32, 115, 121, 110, 116, 97, 120, 44, 32, 111, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 46
 align 8
L6089:
 dq 1224979098644774922
 db 108, 101, 116, 45, 115, 121, 110, 116, 97, 120
 align 8
L6088:
 dq 1224979098644774924
 db 115, 121, 110, 116, 97, 120, 45, 114, 117, 108, 101, 115
 align 8
L6087:
 dq 1224979098644774925
 db 100, 101, 102, 105, 110, 101, 45, 115, 121, 110, 116, 97, 120
 align 8
L4508:
 dq 1224979098644774934
 db 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32
 align 8
L4513:
 dq 1224979098644774936
 db 69, 109, 112, 116, 121, 32, 98, 101, 103, 105, 110, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 58, 32
 align 8
L4516:
 dq 1224979098644774937
 db 69, 109, 112, 116, 121, 32, 115, 121, 110, 116, 97, 120, 45, 114, 117, 108, 101, 115, 32, 102, 111, 114, 109, 58, 32
 align 8
L4536:
 dq 1224979098644774938
 db 65, 116, 116, 101, 109, 112, 116, 32, 116, 111, 32, 115, 101, 116, 32, 97, 32, 107, 101, 121, 119, 111, 114, 100, 58, 32
 align 8
L4539:
 dq 1224979098644774922
 db 77, 97, 108, 102, 111, 114, 109, 101, 100, 32
 align 8
L4540:
 dq 1224979098644774925
 db 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 58, 32
 align 8
L4547:
 dq 1224979098644774945
 db 77, 97, 99, 114, 111, 32, 98, 108, 111, 99, 107, 32, 117, 115, 101, 100, 32, 105, 110, 32, 98, 97, 100, 32, 99, 111, 110, 116, 101, 120, 116, 58, 32
 align 8
L4550:
 dq 1224979098644774935
 db 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 109, 97, 99, 114, 111, 32, 98, 108, 111, 99, 107, 58, 32
 align 8
L4553:
 dq 1224979098644774917
 db 66, 101, 103, 105, 110
 align 8
L4554:
 dq 1224979098644774922
 db 68, 101, 102, 105, 110, 105, 116, 105, 111, 110
 align 8
L4555:
 dq 1224979098644774918
 db 83, 121, 110, 116, 97, 120
 align 8
L4556:
 dq 1224979098644774922
 db 69, 120, 112, 114, 101, 115, 115, 105, 111, 110
 align 8
L4559:
 dq 1224979098644774934
 db 32, 117, 115, 101, 100, 32, 105, 110, 32, 98, 97, 100, 32, 99, 111, 110, 116, 101, 120, 116, 58, 32
 align 8
L4566:
 dq 1224979098644774943
 db 78, 111, 110, 45, 108, 105, 115, 116, 32, 115, 121, 110, 116, 97, 120, 32, 98, 105, 110, 100, 105, 110, 103, 115, 32, 108, 105, 115, 116, 58, 32
 align 8
L4571:
 dq 1224979098644774938
 db 77, 97, 108, 102, 111, 114, 109, 101, 100, 32, 115, 121, 110, 116, 97, 120, 32, 98, 105, 110, 100, 105, 110, 103, 58, 32
 align 8
L4576:
 dq 1224979098644774918
 db 32, 97, 110, 100, 58, 32
 align 8
L4577:
 dq 1224979098644774946
 db 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 98, 105, 110, 100, 105, 110, 103, 115, 32, 102, 111, 114, 32, 97, 32, 107, 101, 121, 119, 111, 114, 100, 58, 32
 align 8
L4586:
 dq 1224979098644774928
 db 78, 111, 110, 45, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 58, 32
 align 8
L4587:
 dq 1224979098644774932
 db 32, 105, 110, 32, 108, 97, 109, 98, 100, 97, 32, 102, 111, 114, 109, 97, 108, 115, 58, 32
 align 8
L4590:
 dq 1224979098644774932
 db 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 118, 97, 114, 105, 97, 98, 108, 101, 58, 32
 align 8
L4591:
 dq 1224979098644774932
 db 32, 105, 110, 32, 108, 97, 109, 98, 100, 97, 32, 102, 111, 114, 109, 97, 108, 115, 58, 32
 align 8
L4601:
 dq 1224979098644774913
 db 95
 align 8
L4602:
 dq 1224979098644774913
 db 95
 align 8
L6086:
 dq 1224979098644774917
 db 100, 101, 108, 97, 121
 align 8
L6085:
 dq 1224979098644774919
 db 108, 101, 116, 114, 101, 99, 42
 align 8
L4638:
 dq 1224979098644774913
 db 95
 align 8
L4639:
 dq 1224979098644774913
 db 95
 align 8
L4650:
 dq 1224979098644774992
 db 80, 114, 101, 109, 97, 116, 117, 114, 101, 32, 117, 115, 101, 32, 111, 102, 32, 107, 101, 121, 119, 111, 114, 100, 32, 98, 111, 117, 110, 100, 32, 98, 121, 32, 108, 101, 116, 114, 101, 99, 45, 115, 121, 110, 116, 97, 120, 32, 40, 111, 114, 32, 97, 110, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 100, 101, 102, 105, 110, 101, 45, 115, 121, 110, 116, 97, 120, 41, 58, 32
 align 8
L6084:
 dq 1224979098644774919
 db 98, 117, 105, 108, 116, 105, 110
 align 8
L6083:
 dq 1224979098644774918
 db 108, 97, 109, 98, 100, 97
 align 8
L6082:
 dq 1224979098644774916
 db 108, 101, 116, 42
 align 8
L6081:
 dq 1224979098644774918
 db 108, 101, 116, 114, 101, 99
 align 8
L6080:
 dq 1224979098644774918
 db 100, 101, 102, 105, 110, 101
 align 8
L6079:
 dq 1224979098644774914
 db 105, 102
 align 8
L6078:
 dq 1224979098644774916
 db 115, 101, 116, 33
 align 8
L6077:
 dq 1224979098644774916
 db 99, 111, 110, 100
 align 8
L6076:
 dq 1224979098644774916
 db 99, 97, 115, 101
 align 8
L6075:
 dq 1224979098644774915
 db 97, 110, 100
 align 8
L6074:
 dq 1224979098644774914
 db 111, 114
 align 8
L6073:
 dq 1224979098644774915
 db 108, 101, 116
 align 8
L6072:
 dq 1224979098644774914
 db 100, 111
 align 8
L4739:
 dq 1224979098644774913
 db 40
 align 8
L4744:
 dq 1224979098644774913
 db 32
 align 8
L4765:
 dq 1224979098644774913
 db 41
 align 8
L4766:
 dq 1224979098644774913
 db 46
 align 8
L4767:
 dq 1224979098644774913
 db 41
 align 8
L4768:
 dq 1224979098644774913
 db 40
 align 8
L4769:
 dq 1224979098644774913
 db 40
 align 8
L4788:
 dq 1224979098644774913
 db 35
 align 8
L4800:
 dq 1224979098644774920
 db 32, 32, 32, 32, 32, 32, 32, 32
 align 8
L4801:
 dq 1224979098644774920
 db 32, 32, 32, 32, 32, 32, 32, 32
 align 8
L4810:
 dq 1224979098644774914
 db 35, 116
 align 8
L4811:
 dq 1224979098644774914
 db 35, 102
 align 8
L4826:
 dq 1224979098644774913
 db 34
 align 8
L4829:
 dq 1224979098644774924
 db 35, 60, 112, 114, 111, 99, 101, 100, 117, 114, 101, 62
 align 8
L4834:
 dq 1224979098644774914
 db 35, 92
 align 8
L4837:
 dq 1224979098644774918
 db 35, 60, 101, 111, 102, 62
 align 8
L4842:
 dq 1224979098644774925
 db 35, 60, 105, 110, 112, 117, 116, 32, 112, 111, 114, 116, 62
 align 8
L4847:
 dq 1224979098644774926
 db 35, 60, 111, 117, 116, 112, 117, 116, 32, 112, 111, 114, 116, 62
 align 8
L4850:
 dq 1224979098644774924
 db 35, 60, 117, 110, 100, 101, 102, 105, 110, 101, 100, 62
 align 8
L4851:
 dq 1224979098644774933
 db 35, 60, 117, 110, 112, 114, 105, 110, 116, 97, 98, 108, 101, 32, 111, 98, 106, 101, 99, 116, 62
 align 8
L4856:
 dq 1224979098644774913
 db 120
 align 8
L4861:
 dq 1224979098644774913
 db 85
 align 8
L4862:
 dq 1224979098644774913
 db 117
 align 8
L4875:
 dq 1224979098644774913
 db 34
 align 8
L4876:
 dq 1224979098644774913
 db 92
 align 8
L4877:
 dq 1224979098644774915
 db 35, 117, 56
 align 8
L4878:
 dq 1224979098644774913
 db 35
 align 8
L4887:
 dq 1224979098644774913
 db 40
 align 8
L4888:
 dq 1224979098644774914
 db 40, 41
 align 8
L4893:
 dq 1224979098644774913
 db 32
 align 8
L4896:
 dq 1224979098644774913
 db 41
 align 8
L4897:
 dq 1224979098644774915
 db 32, 46, 32
 align 8
L4898:
 dq 1224979098644774913
 db 41
 align 8
L4904:
 dq 1224979098644774917
 db 115, 112, 97, 99, 101
 align 8
L4908:
 dq 1224979098644774919
 db 110, 101, 119, 108, 105, 110, 101
 align 8
L4912:
 dq 1224979098644774918
 db 114, 101, 116, 117, 114, 110
 align 8
L4914:
 dq 1224979098644774915
 db 116, 97, 98
 align 8
L4922:
 dq 1224979098644774913
 db 39
 align 8
L4926:
 dq 1224979098644774913
 db 96
 align 8
L4930:
 dq 1224979098644774913
 db 44
 align 8
L4932:
 dq 1224979098644774914
 db 44, 64
 align 8
L6070:
 dq 1224979098644774914
 db 45, 109
 align 8
L6067:
 dq 1224979098644774913
 db 62
 align 8
L6066:
 dq 1224979098644774917
 db 117, 110, 97, 109, 101
 align 8
L6064:
 dq 1224979098644774914
 db 45, 109
 align 8
L4954:
 dq 1224979098644774915
 db 116, 109, 112
 align 8
L4963:
 dq 1224979098644774913
 db 46
 align 8
L4964:
 dq 1224979098644774912
 align 8
L4965:
 dq 1224979098644774913
 db 47
 align 8
L4966:
 dq 1224979098644774913
 db 46
 align 8
L4967:
 dq 1224979098644774913
 db 46
 align 8
L4968:
 dq 1224979098644774913
 db 46
 align 8
L4971:
 dq 1224979098644774913
 db 84
 align 8
L5000:
 dq 1224979098644774915
 db 32, 10, 9
 align 8
L6061:
 dq 1224979098644774917
 db 109, 97, 116, 99, 104
 align 8
L5032:
 dq 1224979098644774931
 db 110, 111, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 112, 97, 116, 116, 101, 114, 110
 align 8
L5133:
 dq 1224979098644774912
 align 8
L5136:
 dq 1224979098644774912
 align 8
L5145:
 dq 1224979098644774927
 db 99, 97, 110, 39, 116, 32, 115, 121, 109, 98, 111, 108, 105, 102, 121
 align 8
L5156:
 dq 1224979098644774927
 db 99, 97, 110, 39, 116, 32, 115, 116, 114, 105, 110, 103, 105, 102, 121
 align 8
L6060:
 dq 1224979098644774917
 db 98, 101, 103, 105, 110
 align 8
L5183:
 dq 1224979098644774912
 align 8
L5232:
 dq 1224979098644774956
 db 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 69, 79, 70, 32, 119, 104, 105, 108, 101, 32, 114, 101, 97, 100, 105, 110, 103, 32, 100, 101, 108, 105, 109, 105, 116, 101, 100, 32, 116, 111, 107, 101, 110
 align 8
L5246:
 dq 1224979098644774956
 db 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 69, 79, 70, 32, 119, 104, 105, 108, 101, 32, 114, 101, 97, 100, 105, 110, 103, 32, 100, 101, 108, 105, 109, 105, 116, 101, 100, 32, 116, 111, 107, 101, 110
 align 8
L5275:
 dq 1224979098644774956
 db 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 69, 79, 70, 32, 119, 104, 105, 108, 101, 32, 114, 101, 97, 100, 105, 110, 103, 32, 100, 101, 108, 105, 109, 105, 116, 101, 100, 32, 116, 111, 107, 101, 110
 align 8
L5299:
 dq 1224979098644774968
 db 105, 110, 118, 97, 108, 105, 100, 32, 101, 115, 99, 97, 112, 101, 100, 32, 104, 101, 120, 97, 100, 101, 99, 105, 109, 97, 108, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 105, 110, 32, 100, 101, 108, 105, 109, 105, 116, 101, 100, 32, 116, 111, 107, 101, 110
 align 8
L5302:
 dq 1224979098644774945
 db 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 69, 79, 70, 32, 119, 104, 105, 108, 101, 32, 114, 101, 97, 100, 105, 110, 103, 32, 108, 105, 115, 116
 align 8
L5310:
 dq 1224979098644774913
 db 46
 align 8
L5321:
 dq 1224979098644774937
 db 109, 105, 115, 115, 105, 110, 103, 32, 99, 108, 111, 115, 105, 110, 103, 32, 100, 101, 108, 105, 109, 105, 116, 101, 114
 align 8
L5328:
 dq 1224979098644774937
 db 109, 105, 115, 115, 105, 110, 103, 32, 99, 108, 111, 115, 105, 110, 103, 32, 100, 101, 108, 105, 109, 105, 116, 101, 114
 align 8
L5337:
 dq 1224979098644774936
 db 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 69, 79, 70, 32, 97, 102, 116, 101, 114, 32, 96, 35, 39
 align 8
L5405:
 dq 1224979098644774930
 db 105, 110, 118, 97, 108, 105, 100, 32, 96, 35, 39, 32, 115, 121, 110, 116, 97, 120
 align 8
L6043:
 dq 1224979098644774918
 db 115, 121, 110, 116, 97, 120
 align 8
L5407:
 dq 1224979098644774919
 db 110, 101, 119, 108, 105, 110, 101
 align 8
L5413:
 dq 1224979098644774915
 db 116, 97, 98
 align 8
L5419:
 dq 1224979098644774917
 db 115, 112, 97, 99, 101
 align 8
L5425:
 dq 1224979098644774918
 db 114, 101, 116, 117, 114, 110
 align 8
L5454:
 dq 1224979098644774934
 db 105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 110, 97, 109, 101
 align 8
L5462:
 dq 1224979098644774913
 db 56
 align 8
L5467:
 dq 1224979098644774913
 db 35
 align 8
L5468:
 dq 1224979098644774931
 db 105, 110, 118, 97, 108, 105, 100, 32, 114, 101, 97, 100, 32, 115, 121, 110, 116, 97, 120
 align 8
L5482:
 dq 1224979098644774941
 db 105, 110, 118, 97, 108, 105, 100, 32, 101, 108, 101, 109, 101, 110, 116, 32, 105, 110, 32, 98, 121, 116, 101, 118, 101, 99, 116, 111, 114
 align 8
L5487:
 dq 1224979098644774933
 db 105, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 115, 121, 110, 116, 97, 120
 align 8
L5496:
 dq 1224979098644774933
 db 105, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 115, 121, 110, 116, 97, 120
 align 8
L6042:
 dq 1224979098644774917
 db 113, 117, 111, 116, 101
 align 8
L6041:
 dq 1224979098644774922
 db 113, 117, 97, 115, 105, 113, 117, 111, 116, 101
 align 8
L6040:
 dq 1224979098644774919
 db 117, 110, 113, 117, 111, 116, 101
 align 8
L6039:
 dq 1224979098644774928
 db 117, 110, 113, 117, 111, 116, 101, 45, 115, 112, 108, 105, 99, 105, 110, 103
 align 8
L5620:
 dq 1224979098644774932
 db 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 100, 101, 108, 105, 109, 105, 116, 101, 114
 align 8
L6038:
 dq 1224979098644774916
 db 114, 101, 97, 100
 align 8
L5633:
 dq 1224979098644774921
 db 105, 110, 116, 101, 114, 114, 117, 112, 116
 align 8
L6037:
 dq 1224979098644774921
 db 105, 110, 116, 101, 114, 114, 117, 112, 116
 align 8
L5645:
 dq 1224979098644774925
 db 117, 110, 107, 110, 111, 119, 110, 32, 101, 114, 114, 111, 114
 align 8
L5653:
 dq 1224979098644774931
 db 117, 110, 104, 97, 110, 100, 108, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110
 align 8
L5658:
 dq 1224979098644774920
 db 10, 69, 114, 114, 111, 114, 58, 32
 align 8
L5661:
 dq 1224979098644774913
 db 40
 align 8
L5662:
 dq 1224979098644774914
 db 41, 32
 align 8
L5663:
 dq 1224979098644774913
 db 10
 align 8
L5680:
 dq 1224979098644774913
 db 35
 align 8
L5683:
 dq 1224979098644774913
 db 40
 align 8
L5688:
 dq 1224979098644774913
 db 34
 align 8
L5697:
 dq 1224979098644774914
 db 35, 92
 align 8
L5704:
 dq 1224979098644774914
 db 40, 41
 align 8
L5707:
 dq 1224979098644774922
 db 35, 60, 112, 114, 111, 109, 105, 115, 101, 62
 align 8
L5712:
 dq 1224979098644774916
 db 35, 117, 56, 40
 align 8
L5717:
 dq 1224979098644774925
 db 35, 60, 105, 110, 112, 117, 116, 45, 112, 111, 114, 116, 62
 align 8
L5722:
 dq 1224979098644774926
 db 35, 60, 111, 117, 116, 112, 117, 116, 45, 112, 111, 114, 116, 62
 align 8
L5725:
 dq 1224979098644774924
 db 35, 60, 112, 114, 111, 99, 101, 100, 117, 114, 101, 62
 align 8
L5728:
 dq 1224979098644774918
 db 35, 60, 101, 111, 102, 62
 align 8
L5731:
 dq 1224979098644774924
 db 35, 60, 117, 110, 100, 101, 102, 105, 110, 101, 100, 62
 align 8
L5734:
 dq 1224979098644774914
 db 35, 116
 align 8
L5737:
 dq 1224979098644774914
 db 35, 102
 align 8
L5738:
 dq 1224979098644774929
 db 35, 60, 117, 110, 107, 110, 111, 119, 110, 32, 111, 98, 106, 101, 99, 116, 62
 align 8
L5745:
 dq 1224979098644774921
 db 35, 60, 114, 101, 99, 111, 114, 100, 32
 align 8
L5746:
 dq 1224979098644774913
 db 47
 align 8
L5747:
 dq 1224979098644774913
 db 62
 align 8
L5751:
 dq 1224979098644774919
 db 110, 101, 119, 108, 105, 110, 101
 align 8
L5755:
 dq 1224979098644774917
 db 115, 112, 97, 99, 101
 align 8
L5759:
 dq 1224979098644774915
 db 116, 97, 98
 align 8
L5764:
 dq 1224979098644774913
 db 120
 align 8
L5767:
 dq 1224979098644774913
 db 124
 align 8
L5770:
 dq 1224979098644774913
 db 124
 align 8
L5779:
 dq 1224979098644774913
 db 92
 align 8
L5782:
 dq 1224979098644774914
 db 92, 120
 align 8
L5783:
 dq 1224979098644774913
 db 59
 align 8
L5786:
 dq 1224979098644774913
 db 34
 align 8
L5795:
 dq 1224979098644774913
 db 92
 align 8
L5799:
 dq 1224979098644774914
 db 92, 110
 align 8
L5802:
 dq 1224979098644774914
 db 92, 120
 align 8
L5803:
 dq 1224979098644774913
 db 59
 align 8
L5806:
 dq 1224979098644774913
 db 41
 align 8
L5809:
 dq 1224979098644774913
 db 32
 align 8
L5810:
 dq 1224979098644774915
 db 32, 46, 32
 align 8
L5811:
 dq 1224979098644774913
 db 41
 align 8
L5907:
 dq 1224979098644774918
 db 43, 110, 97, 110, 46, 48
 align 8
L5932:
 dq 1224979098644774914
 db 46, 48
 align 8
L5935:
 dq 1224979098644774918
 db 45, 105, 110, 102, 46, 48
 align 8
L5936:
 dq 1224979098644774918
 db 43, 105, 110, 102, 46, 48
 align 8
L5939:
 dq 1224979098644774918
 db 43, 110, 97, 110, 46, 48
 align 8
L5944:
 dq 1224979098644774918
 db 45, 110, 97, 110, 46, 48
 align 8
L5949:
 dq 1224979098644774918
 db 43, 105, 110, 102, 46, 48
 align 8
L5954:
 dq 1224979098644774918
 db 45, 105, 110, 102, 46, 48
 align 8
L6036:
 dq 1224979098644774928
 db 111, 112, 101, 110, 45, 111, 117, 116, 112, 117, 116, 45, 102, 105, 108, 101
 align 8
L6035:
 dq 1224979098644774927
 db 111, 112, 101, 110, 45, 105, 110, 112, 117, 116, 45, 102, 105, 108, 101
 align 8
L6034:
 dq 1224979098644774924
 db 119, 114, 105, 116, 101, 45, 115, 116, 114, 105, 110, 103
 align 8
L6033:
 dq 1224979098644774929
 db 99, 108, 111, 115, 101, 45, 111, 117, 116, 112, 117, 116, 45, 112, 111, 114, 116
 align 8
L6032:
 dq 1224979098644774923
 db 114, 101, 97, 100, 45, 115, 116, 114, 105, 110, 103
 align 8
L6031:
 dq 1224979098644774928
 db 99, 108, 111, 115, 101, 45, 105, 110, 112, 117, 116, 45, 112, 111, 114, 116
 align 8
L6030:
 dq 1224979098644774924
 db 101, 114, 114, 111, 114, 45, 111, 98, 106, 101, 99, 116
 align 8
L6029:
 dq 1224979098644774916
 db 102, 105, 108, 101
 section .data
symbol_literals:
 dq L9325
 dq L9327
 dq L9262
 dq L9257
 dq L9183
 dq L9225
 dq L9205
 dq L9209
 dq L9172
 dq L9167
 dq L9082
 dq L8903
 dq L8844
 dq L8749
 dq L8650
 dq L8611
 dq L8617
 dq L8623
 dq L8625
 dq L8627
 dq L8362
 dq L8539
 dq L8536
 dq L8454
 dq L8460
 dq L8450
 dq L8451
 dq L8446
 dq L8386
 dq L8388
 dq L8390
 dq L8289
 dq L8266
 dq L8255
 dq L8246
 dq L8240
 dq L8242
 dq L8214
 dq L8211
 dq L8095
 dq L8089
 dq L8039
 dq L6653
 dq L7949
 dq L7964
 dq L7959
 dq L7608
 dq L7611
 dq L7579
 dq L7558
 dq L7564
 dq L7566
 dq L7521
 dq L7525
 dq L7527
 dq L7450
 dq L7474
 dq L7482
 dq L7267
 dq L7336
 dq L7291
 dq L7312
 dq L7295
 dq L7201
 dq L7114
 dq L7134
 dq L7061
 dq L6732
 dq L6894
 dq L6851
 dq L6812
 dq L6799
 dq L6758
 dq L6762
 dq L6766
 dq L6768
 dq L6770
 dq L6721
 dq L6711
 dq L6717
 dq L6612
 dq L6614
 dq L6616
 dq L6618
 dq L6620
 dq L31
 dq L6606
 dq L6578
 dq L6580
 dq L6582
 dq L6584
 dq L6586
 dq L6588
 dq L6590
 dq L6592
 dq L35
 dq L36
 dq L37
 dq L38
 dq L39
 dq L41
 dq L42
 dq L50
 dq L62
 dq L66
 dq L78
 dq L81
 dq L82
 dq L85
 dq L87
 dq L90
 dq L91
 dq L94
 dq L95
 dq L96
 dq L828
 dq L831
 dq L834
 dq L837
 dq L840
 dq L843
 dq L846
 dq L849
 dq L852
 dq L855
 dq L858
 dq L861
 dq L864
 dq L867
 dq L870
 dq L892
 dq L893
 dq L900
 dq L915
 dq L918
 dq L919
 dq L923
 dq L926
 dq L927
 dq L928
 dq L929
 dq L937
 dq L940
 dq L943
 dq L948
 dq L949
 dq L957
 dq L1351
 dq L1364
 dq L1367
 dq L6310
 dq L6305
 dq L6246
 dq L6222
 dq L6224
 dq L6209
 dq L1396
 dq L1407
 dq L6184
 dq L1418
 dq L1426
 dq L1434
 dq L1442
 dq L1451
 dq L1460
 dq L1463
 dq L1477
 dq L1514
 dq L2428
 dq L2457
 dq L2582
 dq L2601
 dq L2603
 dq L2604
 dq L2608
 dq L2610
 dq L2611
 dq L2612
 dq L2615
 dq L2616
 dq L2617
 dq L2621
 dq L2743
 dq L3319
 dq L6116
 dq L3620
 dq L3629
 dq L3640
 dq L3649
 dq L3759
 dq L3874
 dq L3959
 dq L3975
 dq L3987
 dq L3999
 dq L4032
 dq L4071
 dq L6095
 dq L4394
 dq L4482
 dq L4485
 dq L4496
 dq L4609
 dq L4618
 dq L4658
 dq L4700
 dq L4703
 dq L4706
 dq L4709
 dq L4712
 dq L4715
 dq L4718
 dq L4721
 dq L4724
 dq L4727
 dq L4730
 dq L4736
 dq L4950
 dq L6062
 dq L5031
 dq L5163
 dq L5406
 dq L5601
 dq L5602
 dq L5612
 dq L5617
 dq L5623
 dq L5634
 dq L5969
 dq L5972
 dq L5975
 dq L5978
 dq L5985
 dq L5988
 dq L5989
 dq L5990
 dq false
 section .data
L17:
 dq 2305843009213693953,reclaim_garbage
L16:
 dq 2305843009213693953,call_cc
L15:
 dq 2305843009213693953,call_with_values
L14:
 dq 2305843009213693953,values
L13:
 dq 2305843009213693953,apply
L12:
 dq 2305843009213693953,alloc_block
L11:
 dq 2305843009213693953,minimize_numbers
L10:
 dq 2305843009213693953,maximize_numbers
L9:
 dq 2305843009213693953,divide_numbers
L8:
 dq 2305843009213693953,subtract_numbers
L7:
 dq 2305843009213693953,add_numbers
L6:
 dq 2305843009213693953,multiply_numbers
L5:
 dq 2305843009213693953,numerically_less_or_equal
L4:
 dq 2305843009213693953,numerically_greater_or_equal
L3:
 dq 2305843009213693953,numerically_less
L2:
 dq 2305843009213693953,numerically_greater
L1:
 dq 2305843009213693953,numerically_equal
;;; END OF GENERATED CODE
